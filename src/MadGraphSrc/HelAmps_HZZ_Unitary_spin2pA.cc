//==========================================================================
// This file has been automatically generated for C++ Standalone by
// MadGraph 5 v. 1.5.5, 2012-11-18
// By the MadGraph Development Team
// Please visit us at https://launchpad.net/madgraph5
//==========================================================================

#include "HelAmps_HZZ_Unitary_spin2pA.h"

namespace MG5_HZZ_Unitary_spin2pA 
{

void vxxxxx(double p[4], double vmass, int nhel, int nsv, complex<double> vc[6])
{
  double hel, hel0, pt, pt2, pp, pzpt, emp, sqh; 
  int nsvahl; 
  sqh = pow(0.5, 0.5); 
  hel = double(nhel); 
  nsvahl = nsv * abs(hel); 
  pt2 = pow(p[1], 2) + pow(p[2], 2); 
  pp = min(p[0], pow(pt2 + pow(p[3], 2), 0.5)); 
  pt = min(pp, pow(pt2, 0.5)); 
  vc[0] = complex<double> (p[0] * nsv, p[3] * nsv); 
  vc[1] = complex<double> (p[1] * nsv, p[2] * nsv); 
  if (vmass != 0.0)
  {
    hel0 = 1.0 - abs(hel); 
    if(pp == 0.0)
    {
      vc[2] = complex<double> (0.0, 0.0); 
      vc[3] = complex<double> (-hel * sqh, 0.0); 
      vc[4] = complex<double> (0.0, nsvahl * sqh); 
      vc[5] = complex<double> (hel0, 0.0); 
    }
    else
    {
      emp = p[0]/(vmass * pp); 
      vc[2] = complex<double> (hel0 * pp/vmass, 0.0); 
      vc[5] = complex<double> (hel0 * p[3] * emp + hel * pt/pp * sqh, 0.0); 
      if (pt != 0.0)
      {
        pzpt = p[3]/(pp * pt) * sqh * hel; 
        vc[3] = complex<double> (hel0 * p[1] * emp - p[1] * pzpt, -nsvahl *
            p[2]/pt * sqh);
        vc[4] = complex<double> (hel0 * p[2] * emp - p[2] * pzpt, nsvahl *
            p[1]/pt * sqh);
      }
      else
      {
        vc[3] = complex<double> (-hel * sqh, 0.0); 
        vc[4] = complex<double> (0.0, nsvahl * Sgn(sqh, p[3])); 
      }
    }
  }
  else
  {
    pp = p[0]; 
    pt = pow(pow(p[1], 2) + pow(p[2], 2), 0.5); 
    vc[2] = complex<double> (0.0, 0.0); 
    vc[5] = complex<double> (hel * pt/pp * sqh, 0.0); 
    if (pt != 0.0)
    {
      pzpt = p[3]/(pp * pt) * sqh * hel; 
      vc[3] = complex<double> (-p[1] * pzpt, -nsv * p[2]/pt * sqh); 
      vc[4] = complex<double> (-p[2] * pzpt, nsv * p[1]/pt * sqh); 
    }
    else
    {
      vc[3] = complex<double> (-hel * sqh, 0.0); 
      vc[4] = complex<double> (0.0, nsv * Sgn(sqh, p[3])); 
    }
  }
  return; 
}

void sxxxxx(double p[4], int nss, complex<double> sc[3])
{
  sc[2] = complex<double> (1.00, 0.00); 
  sc[0] = complex<double> (p[0] * nss, p[3] * nss); 
  sc[1] = complex<double> (p[1] * nss, p[2] * nss); 
  return; 
}

void oxxxxx(double p[4], double fmass, int nhel, int nsf, complex<double> fo[6])
{
  complex<double> chi[2]; 
  double sf[2], sfomeg[2], omega[2], pp, pp3, sqp0p3, sqm[2]; 
  int nh, ip, im; 
  fo[0] = complex<double> (p[0] * nsf, p[3] * nsf); 
  fo[1] = complex<double> (p[1] * nsf, p[2] * nsf); 
  nh = nhel * nsf; 
  if (fmass != 0.000)
  {
    pp = min(p[0], pow(pow(p[1], 2) + pow(p[2], 2) + pow(p[3], 2), 0.5)); 
    if (pp == 0.000)
    {
      sqm[0] = pow(abs(fmass), 0.5); 
      sqm[1] = Sgn(sqm[0], fmass); 
      ip = -((1 - nh)/2) * nhel; 
      im = (1 + nh)/2 * nhel; 
      fo[2] = im * sqm[im]; 
      fo[3] = ip * nsf * sqm[im]; 
      fo[4] = im * nsf * sqm[ - ip]; 
      fo[5] = ip * sqm[ - ip]; 
    }
    else
    {
      pp = min(p[0], pow(pow(p[1], 2) + pow(p[2], 2) + pow(p[3], 2), 0.5)); 
      sf[0] = double(1 + nsf + (1 - nsf) * nh) * 0.5; 
      sf[1] = double(1 + nsf - (1 - nsf) * nh) * 0.5; 
      omega[0] = pow(p[0] + pp, 0.5); 
      omega[1] = fmass/omega[0]; 
      ip = (1 + nh)/2; 
      im = (1 - nh)/2; 
      sfomeg[0] = sf[0] * omega[ip]; 
      sfomeg[1] = sf[1] * omega[im]; 
      pp3 = max(pp + p[3], 0.00); 
      chi[0] = complex<double> (pow(pp3 * 0.5/pp, 0.5), 0.00); 
      if (pp3 == 0.00)
      {
        chi[1] = complex<double> (-nh, 0.00); 
      }
      else
      {
        chi[1] = complex<double> (nh * p[1], -p[2])/pow(2.0 * pp * pp3, 0.5); 
      }
      fo[2] = sfomeg[1] * chi[im]; 
      fo[3] = sfomeg[1] * chi[ip]; 
      fo[4] = sfomeg[0] * chi[im]; 
      fo[5] = sfomeg[0] * chi[ip]; 
    }
  }
  else
  {
    if((p[1] == 0.00) and (p[2] == 0.00) and (p[3] < 0.00))
    {
      sqp0p3 = 0.00; 
    }
    else
    {
      sqp0p3 = pow(max(p[0] + p[3], 0.00), 0.5) * nsf; 
    }
    chi[0] = complex<double> (sqp0p3, 0.00); 
    if(sqp0p3 == 0.000)
    {
      chi[1] = complex<double> (-nhel, 0.00) * pow(2.0 * p[0], 0.5); 
    }
    else
    {
      chi[1] = complex<double> (nh * p[1], -p[2])/sqp0p3; 
    }
    if(nh == 1)
    {
      fo[2] = chi[0]; 
      fo[3] = chi[1]; 
      fo[4] = complex<double> (0.00, 0.00); 
      fo[5] = complex<double> (0.00, 0.00); 
    }
    else
    {
      fo[2] = complex<double> (0.00, 0.00); 
      fo[3] = complex<double> (0.00, 0.00); 
      fo[4] = chi[1]; 
      fo[5] = chi[0]; 
    }
  }
  return; 
}

void ixxxxx(double p[4], double fmass, int nhel, int nsf, complex<double> fi[6])
{
  complex<double> chi[2]; 
  double sf[2], sfomega[2], omega[2], pp, pp3, sqp0p3, sqm[2]; 
  int ip, im, nh; 
  fi[0] = complex<double> (-p[0] * nsf, -p[3] * nsf); 
  fi[1] = complex<double> (-p[1] * nsf, -p[2] * nsf); 
  nh = nhel * nsf; 
  if (fmass != 0.0)
  {
    pp = min(p[0], pow((pow(p[1], 2) + pow(p[2], 2) + pow(p[3], 2)), 0.5)); 
    if (pp == 0.0)
    {
      sqm[0] = pow(abs(fmass), 0.5); 
      sqm[1] = Sgn(sqm[0], fmass); 
      ip = (1 + nh)/2; 
      im = (1 - nh)/2; 
      fi[2] = ip * sqm[ip]; 
      fi[3] = im * nsf * sqm[ip]; 
      fi[4] = ip * nsf * sqm[im]; 
      fi[5] = im * sqm[im]; 
    }
    else
    {
      sf[0] = (1 + nsf + (1 - nsf) * nh) * 0.5; 
      sf[1] = (1 + nsf - (1 - nsf) * nh) * 0.5; 
      omega[0] = pow(p[0] + pp, 0.5); 
      omega[1] = fmass/omega[0]; 
      ip = (1 + nh)/2; 
      im = (1 - nh)/2; 
      sfomega[0] = sf[0] * omega[ip]; 
      sfomega[1] = sf[1] * omega[im]; 
      pp3 = max(pp + p[3], 0.0); 
      chi[0] = complex<double> (pow(pp3 * 0.5/pp, 0.5), 0); 
      if (pp3 == 0.0)
      {
        chi[1] = complex<double> (-nh, 0); 
      }
      else
      {
        chi[1] = complex<double> (nh * p[1], p[2])/pow(2.0 * pp * pp3, 0.5); 
      }
      fi[2] = sfomega[0] * chi[im]; 
      fi[3] = sfomega[0] * chi[ip]; 
      fi[4] = sfomega[1] * chi[im]; 
      fi[5] = sfomega[1] * chi[ip]; 
    }
  }
  else
  {
    if (p[1] == 0.0 and p[2] == 0.0 and p[3] < 0.0)
    {
      sqp0p3 = 0.0; 
    }
    else
    {
      sqp0p3 = pow(max(p[0] + p[3], 0.0), 0.5) * nsf; 
    }
    chi[0] = complex<double> (sqp0p3, 0.0); 
    if (sqp0p3 == 0.0)
    {
      chi[1] = complex<double> (-nhel * pow(2.0 * p[0], 0.5), 0.0); 
    }
    else
    {
      chi[1] = complex<double> (nh * p[1], p[2])/sqp0p3; 
    }
    if (nh == 1)
    {
      fi[2] = complex<double> (0.0, 0.0); 
      fi[3] = complex<double> (0.0, 0.0); 
      fi[4] = chi[0]; 
      fi[5] = chi[1]; 
    }
    else
    {
      fi[2] = chi[1]; 
      fi[3] = chi[0]; 
      fi[4] = complex<double> (0.0, 0.0); 
      fi[5] = complex<double> (0.0, 0.0); 
    }
  }
  return; 
}


double Sgn(double a, double b)
{
  return (b < 0)? - abs(a):abs(a); 
}

void VVT13_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP60; 
  complex<double> TMP11; 
  double P1[4]; 
  complex<double> TMP12; 
  double P2[4]; 
  double P3[4]; 
  complex<double> denom; 
  double OM1; 
  complex<double> TMP14; 
  complex<double> TMP28; 
  complex<double> TMP29; 
  complex<double> TMP24; 
  complex<double> TMP25; 
  OM1 = 0.; 
  if (M1 != 0.)
    OM1 = 1./pow(M1, 2); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  P3[0] = T3[0].real(); 
  P3[1] = T3[1].real(); 
  P3[2] = T3[1].imag(); 
  P3[3] = T3[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP24 = (P1[0] * - 1. * (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] *
      T3[15] - P2[0] * T3[3]) + (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] +
      P2[3] * T3[16] - P2[0] * T3[4]) + P1[3] * (P2[1] * T3[9] + P2[2] * T3[13]
      + P2[3] * T3[17] - P2[0] * T3[5]))));
  TMP25 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  TMP60 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  TMP28 = (P1[0] * - 1. * (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] -
      V2[2] * T3[2]) + (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] *
      T3[15] - V2[2] * T3[3]) + (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] +
      V2[5] * T3[16] - V2[2] * T3[4]) + P1[3] * (V2[3] * T3[9] + V2[4] * T3[13]
      + V2[5] * T3[17] - V2[2] * T3[5]))));
  TMP29 = (P1[0] * - 1. * (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] -
      V2[2] * T3[2]) + (P1[1] * (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9]
      - V2[2] * T3[6]) + (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] *
      T3[13] - V2[2] * T3[10]) + P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] +
      V2[5] * T3[17] - V2[2] * T3[14]))));
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * (TMP14 * (TMP12 * (OM1 * P1[0] * (-cI * (TMP60) + cI *
      (TMP25)) + (P2[1] * - 1. * (+cI * (T3[3] + T3[6])) + (P2[2] * - 1. * (+cI
      * (T3[4] + T3[10])) + (P2[3] * - 1. * (+cI * (T3[5] + T3[14])) + 2. * cI
      * (P2[0] * T3[2]))))) + TMP11 * (V2[3] * (+cI * (T3[6] + T3[3])) + (V2[4]
      * (+cI * (T3[10] + T3[4])) + (V2[5] * (+cI * (T3[14] + T3[5])) - 2. * cI
      * (V2[2] * T3[2]))))) + P3[0] * (TMP11 * (+cI * (TMP28 + TMP29)) - TMP12
      * (+cI * (TMP24 + TMP25))));
  V1[3] = denom * (TMP14 * (TMP12 * (OM1 * P1[1] * (-cI * (TMP60) + cI *
      (TMP25)) + (P2[0] * (+cI * (T3[6] + T3[3])) + (P2[2] * - 1. * (+cI *
      (T3[8] + T3[11])) + (P2[3] * - 1. * (+cI * (T3[9] + T3[15])) - 2. * cI *
      (P2[1] * T3[7]))))) + TMP11 * (V2[2] * - 1. * (+cI * (T3[3] + T3[6])) +
      (V2[4] * (+cI * (T3[11] + T3[8])) + (V2[5] * (+cI * (T3[15] + T3[9])) +
      2. * cI * (V2[3] * T3[7]))))) + P3[1] * (TMP11 * (+cI * (TMP28 + TMP29))
      - TMP12 * (+cI * (TMP24 + TMP25))));
  V1[4] = denom * (TMP14 * (TMP12 * (OM1 * P1[2] * (-cI * (TMP60) + cI *
      (TMP25)) + (P2[0] * (+cI * (T3[10] + T3[4])) + (P2[1] * - 1. * (+cI *
      (T3[11] + T3[8])) + (P2[3] * - 1. * (+cI * (T3[13] + T3[16])) - 2. * cI *
      (P2[2] * T3[12]))))) + TMP11 * (V2[2] * - 1. * (+cI * (T3[4] + T3[10])) +
      (V2[3] * (+cI * (T3[8] + T3[11])) + (V2[5] * (+cI * (T3[16] + T3[13])) +
      2. * cI * (V2[4] * T3[12]))))) + P3[2] * (TMP11 * (+cI * (TMP28 + TMP29))
      - TMP12 * (+cI * (TMP24 + TMP25))));
  V1[5] = denom * (TMP14 * (TMP12 * (OM1 * P1[3] * (-cI * (TMP60) + cI *
      (TMP25)) + (P2[0] * (+cI * (T3[14] + T3[5])) + (P2[1] * - 1. * (+cI *
      (T3[15] + T3[9])) + (P2[2] * - 1. * (+cI * (T3[16] + T3[13])) - 2. * cI *
      (P2[3] * T3[17]))))) + TMP11 * (V2[2] * - 1. * (+cI * (T3[5] + T3[14])) +
      (V2[3] * (+cI * (T3[9] + T3[15])) + (V2[4] * (+cI * (T3[13] + T3[16])) +
      2. * cI * (V2[5] * T3[17]))))) + P3[3] * (TMP11 * (+cI * (TMP28 + TMP29))
      - TMP12 * (+cI * (TMP24 + TMP25))));
}


void FFV2_0(complex<double> F1[], complex<double> F2[], complex<double> V3[],
    complex<double> COUP, complex<double> & vertex)
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP0; 
  TMP0 = (F1[2] * (F2[4] * (V3[2] + V3[5]) + F2[5] * (V3[3] + cI * (V3[4]))) +
      F1[3] * (F2[4] * (V3[3] - cI * (V3[4])) + F2[5] * (V3[2] - V3[5])));
  vertex = COUP * - cI * TMP0; 
}

void FFV2_4_0(complex<double> F1[], complex<double> F2[], complex<double> V3[],
    complex<double> COUP1, complex<double> COUP2, complex<double> & vertex)
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> tmp; 
  FFV2_0(F1, F2, V3, COUP1, vertex); 
  FFV4_0(F1, F2, V3, COUP2, tmp); 
  vertex = vertex + tmp; 
}

void VVT13_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP12; 
  complex<double> TMP11; 
  double P1[4]; 
  complex<double> TMP10; 
  double P2[4]; 
  double P3[4]; 
  complex<double> TMP15; 
  double OM3; 
  complex<double> TMP14; 
  complex<double> denom; 
  complex<double> TMP9; 
  complex<double> TMP13; 
  complex<double> TMP8; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]); 
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]); 
  TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * 2. * (TMP10 * (TMP11 * (TMP9 * - 0.333333333 * (+cI * (P3[0]
      * P3[0] * OM3) + - 1.000000000 * cI) - cI * (V2[2] * P1[0])) + TMP12 *
      (TMP15 * 0.333333333 * (+cI * (P3[0] * P3[0] * OM3) + - 1.000000000 * cI)
      + cI * (P2[0] * P1[0]))) + TMP14 * (TMP11 * (TMP8 * 0.333333333 * (+cI *
      (P3[0] * P3[0] * OM3) + - 1.000000000 * cI) + cI * (V2[2] * V1[2])) +
      TMP12 * (TMP13 * - 0.333333333 * (+cI * (P3[0] * P3[0] * OM3) + -
      1.000000000 * cI) - cI * (P2[0] * V1[2]))));
  T3[3] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[2] * P1[1] + V2[3] *
      P1[0]) + 0.666666667 * cI * (P3[0] * P3[1] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[0] * P1[1] + P2[1] * P1[0]) + 0.666666667 * cI * (P3[0] * P3[1] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[2] * V1[3] + V2[3] * V1[2])
      + 0.666666667 * cI * (P3[0] * P3[1] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[1] * V1[2] + P2[0] * V1[3]) + 0.666666667 * cI * (P3[0] * P3[1] * OM3
      * TMP13))));
  T3[4] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[2] * P1[2] + V2[4] *
      P1[0]) + 0.666666667 * cI * (P3[0] * P3[2] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[0] * P1[2] + P2[2] * P1[0]) + 0.666666667 * cI * (P3[0] * P3[2] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[2] * V1[4] + V2[4] * V1[2])
      + 0.666666667 * cI * (P3[0] * P3[2] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[2] * V1[2] + P2[0] * V1[4]) + 0.666666667 * cI * (P3[0] * P3[2] * OM3
      * TMP13))));
  T3[5] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[2] * P1[3] + V2[5] *
      P1[0]) + 0.666666667 * cI * (P3[0] * P3[3] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[0] * P1[3] + P2[3] * P1[0]) + 0.666666667 * cI * (P3[0] * P3[3] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[2] * V1[5] + V2[5] * V1[2])
      + 0.666666667 * cI * (P3[0] * P3[3] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[3] * V1[2] + P2[0] * V1[5]) + 0.666666667 * cI * (P3[0] * P3[3] * OM3
      * TMP13))));
  T3[6] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[3] * P1[0] + V2[2] *
      P1[1]) + 0.666666667 * cI * (P3[0] * P3[1] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[1] * P1[0] + P2[0] * P1[1]) + 0.666666667 * cI * (P3[0] * P3[1] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[3] * V1[2] + V2[2] * V1[3])
      + 0.666666667 * cI * (P3[0] * P3[1] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[0] * V1[3] + P2[1] * V1[2]) + 0.666666667 * cI * (P3[0] * P3[1] * OM3
      * TMP13))));
  T3[7] = denom * 2. * (TMP10 * (TMP11 * (TMP9 * - 0.333333333 * (+cI * (P3[1]
      * P3[1] * OM3) + 1.000000000 * cI) - cI * (V2[3] * P1[1])) + TMP12 *
      (TMP15 * 0.333333333 * (+cI * (P3[1] * P3[1] * OM3) + 1.000000000 * cI) +
      cI * (P2[1] * P1[1]))) + TMP14 * (TMP11 * (TMP8 * 0.333333333 * (+cI *
      (P3[1] * P3[1] * OM3) + 1.000000000 * cI) + cI * (V2[3] * V1[3])) + TMP12
      * (TMP13 * - 0.333333333 * (+cI * (P3[1] * P3[1] * OM3) + 1.000000000 *
      cI) - cI * (P2[1] * V1[3]))));
  T3[8] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[3] * P1[2] + V2[4] *
      P1[1]) + 0.666666667 * cI * (P3[1] * P3[2] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[1] * P1[2] + P2[2] * P1[1]) + 0.666666667 * cI * (P3[1] * P3[2] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[3] * V1[4] + V2[4] * V1[3])
      + 0.666666667 * cI * (P3[1] * P3[2] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[2] * V1[3] + P2[1] * V1[4]) + 0.666666667 * cI * (P3[1] * P3[2] * OM3
      * TMP13))));
  T3[9] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[3] * P1[3] + V2[5] *
      P1[1]) + 0.666666667 * cI * (P3[1] * P3[3] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[1] * P1[3] + P2[3] * P1[1]) + 0.666666667 * cI * (P3[1] * P3[3] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[3] * V1[5] + V2[5] * V1[3])
      + 0.666666667 * cI * (P3[1] * P3[3] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[3] * V1[3] + P2[1] * V1[5]) + 0.666666667 * cI * (P3[1] * P3[3] * OM3
      * TMP13))));
  T3[10] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[4] * P1[0] + V2[2] *
      P1[2]) + 0.666666667 * cI * (P3[0] * P3[2] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[2] * P1[0] + P2[0] * P1[2]) + 0.666666667 * cI * (P3[0] * P3[2] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[4] * V1[2] + V2[2] * V1[4])
      + 0.666666667 * cI * (P3[0] * P3[2] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[0] * V1[4] + P2[2] * V1[2]) + 0.666666667 * cI * (P3[0] * P3[2] * OM3
      * TMP13))));
  T3[11] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[4] * P1[1] + V2[3] *
      P1[2]) + 0.666666667 * cI * (P3[1] * P3[2] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[2] * P1[1] + P2[1] * P1[2]) + 0.666666667 * cI * (P3[1] * P3[2] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[4] * V1[3] + V2[3] * V1[4])
      + 0.666666667 * cI * (P3[1] * P3[2] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[1] * V1[4] + P2[2] * V1[3]) + 0.666666667 * cI * (P3[1] * P3[2] * OM3
      * TMP13))));
  T3[12] = denom * 2. * (TMP10 * (TMP11 * (TMP9 * - 0.333333333 * (+cI * (P3[2]
      * P3[2] * OM3) + 1.000000000 * cI) - cI * (V2[4] * P1[2])) + TMP12 *
      (TMP15 * 0.333333333 * (+cI * (P3[2] * P3[2] * OM3) + 1.000000000 * cI) +
      cI * (P2[2] * P1[2]))) + TMP14 * (TMP11 * (TMP8 * 0.333333333 * (+cI *
      (P3[2] * P3[2] * OM3) + 1.000000000 * cI) + cI * (V2[4] * V1[4])) + TMP12
      * (TMP13 * - 0.333333333 * (+cI * (P3[2] * P3[2] * OM3) + 1.000000000 *
      cI) - cI * (P2[2] * V1[4]))));
  T3[13] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[4] * P1[3] + V2[5] *
      P1[2]) + 0.666666667 * cI * (P3[2] * P3[3] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[2] * P1[3] + P2[3] * P1[2]) + 0.666666667 * cI * (P3[2] * P3[3] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[4] * V1[5] + V2[5] * V1[4])
      + 0.666666667 * cI * (P3[2] * P3[3] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[3] * V1[4] + P2[2] * V1[5]) + 0.666666667 * cI * (P3[2] * P3[3] * OM3
      * TMP13))));
  T3[14] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[5] * P1[0] + V2[2] *
      P1[3]) + 0.666666667 * cI * (P3[0] * P3[3] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[3] * P1[0] + P2[0] * P1[3]) + 0.666666667 * cI * (P3[0] * P3[3] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[5] * V1[2] + V2[2] * V1[5])
      + 0.666666667 * cI * (P3[0] * P3[3] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[0] * V1[5] + P2[3] * V1[2]) + 0.666666667 * cI * (P3[0] * P3[3] * OM3
      * TMP13))));
  T3[15] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[5] * P1[1] + V2[3] *
      P1[3]) + 0.666666667 * cI * (P3[1] * P3[3] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[3] * P1[1] + P2[1] * P1[3]) + 0.666666667 * cI * (P3[1] * P3[3] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[5] * V1[3] + V2[3] * V1[5])
      + 0.666666667 * cI * (P3[1] * P3[3] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[1] * V1[5] + P2[3] * V1[3]) + 0.666666667 * cI * (P3[1] * P3[3] * OM3
      * TMP13))));
  T3[16] = denom * (TMP10 * (TMP11 * - 1. * (+cI * (V2[5] * P1[2] + V2[4] *
      P1[3]) + 0.666666667 * cI * (P3[2] * P3[3] * OM3 * TMP9)) + TMP12 * (+cI
      * (P2[3] * P1[2] + P2[2] * P1[3]) + 0.666666667 * cI * (P3[2] * P3[3] *
      OM3 * TMP15))) + TMP14 * (TMP11 * (+cI * (V2[5] * V1[4] + V2[4] * V1[5])
      + 0.666666667 * cI * (P3[2] * P3[3] * OM3 * TMP8)) - TMP12 * (+cI *
      (P2[2] * V1[5] + P2[3] * V1[4]) + 0.666666667 * cI * (P3[2] * P3[3] * OM3
      * TMP13))));
  T3[17] = denom * 2. * (TMP10 * (TMP11 * (TMP9 * - 0.333333333 * (+cI * (P3[3]
      * P3[3] * OM3) + 1.000000000 * cI) - cI * (V2[5] * P1[3])) + TMP12 *
      (TMP15 * 0.333333333 * (+cI * (P3[3] * P3[3] * OM3) + 1.000000000 * cI) +
      cI * (P2[3] * P1[3]))) + TMP14 * (TMP11 * (TMP8 * 0.333333333 * (+cI *
      (P3[3] * P3[3] * OM3) + 1.000000000 * cI) + cI * (V2[5] * V1[5])) + TMP12
      * (TMP13 * - 0.333333333 * (+cI * (P3[3] * P3[3] * OM3) + 1.000000000 *
      cI) - cI * (P2[3] * V1[5]))));
}


void VVT3_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP59; 
  complex<double> TMP58; 
  complex<double> TMP11; 
  double P1[4]; 
  double P2[4]; 
  double P3[4]; 
  complex<double> denom; 
  double OM3; 
  complex<double> TMP14; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP59 = -1. * (P2[0] * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4] *
      V1[3]))) + (P2[1] * (P3[0] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[4] * V1[2] - V2[2] *
      V1[4]))) + (P2[2] * (P3[0] * (V2[3] * V1[5] - V2[5] * V1[3]) + (P3[1] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[3] - V2[3] *
      V1[2]))) + P2[3] * (P3[0] * (V2[4] * V1[3] - V2[3] * V1[4]) + (P3[1] *
      (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] * (V2[3] * V1[2] - V2[2] *
      V1[3]))))));
  TMP58 = -1. * (P1[0] * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4] *
      V1[3]))) + (P1[1] * (P3[0] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[4] * V1[2] - V2[2] *
      V1[4]))) + (P1[2] * (P3[0] * (V2[3] * V1[5] - V2[5] * V1[3]) + (P3[1] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[3] - V2[3] *
      V1[2]))) + P1[3] * (P3[0] * (V2[4] * V1[3] - V2[3] * V1[4]) + (P3[1] *
      (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] * (V2[3] * V1[2] - V2[2] *
      V1[3]))))));
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * - 2. * cI * (OM3 * P3[0] * (TMP11 * (P3[1] * (V2[4] * V1[5] -
      V2[5] * V1[4]) + (P3[2] * (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] *
      (V2[3] * V1[4] - V2[4] * V1[3]))) + (TMP14 * (P3[1] * (V2[5] * V1[4] -
      V2[4] * V1[5]) + (P3[2] * (V2[3] * V1[5] - V2[5] * V1[3]) + P3[3] *
      (V2[4] * V1[3] - V2[3] * V1[4]))) + 0.333333333 * (P3[0] * (TMP59 -
      TMP58)))) + (P1[0] * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4] *
      V1[3]))) + (P2[0] * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[3] * V1[5] - V2[5] * V1[3]) + P3[3] * (V2[4] * V1[3] - V2[3] *
      V1[4]))) + (-0.333333333 * (TMP59) + 0.333333333 * (TMP58)))));
  T3[6] = denom * - cI * (OM3 * (P3[0] * (TMP11 * (P3[0] * (V2[4] * V1[5] -
      V2[5] * V1[4]) + (P3[2] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] *
      (V2[2] * V1[4] - V2[4] * V1[2]))) + (TMP14 * (P3[0] * (V2[5] * V1[4] -
      V2[4] * V1[5]) + (P3[2] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] *
      (V2[4] * V1[2] - V2[2] * V1[4]))) + 0.666666667 * (P3[1] * (TMP59 -
      TMP58)))) + P3[1] * (TMP11 * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) +
      (P3[2] * (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4]
      * V1[3]))) + TMP14 * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[3] * V1[5] - V2[5] * V1[3]) + P3[3] * (V2[4] * V1[3] - V2[3] *
      V1[4]))))) + (P3[2] * (V1[5] * (V2[2] * (P2[0] - P1[0]) + V2[3] * (P2[1]
      - P1[1])) + V2[5] * (V1[2] * (P1[0] - P2[0]) + V1[3] * (P1[1] - P2[1])))
      + (P3[3] * (V1[4] * (V2[2] * (P1[0] - P2[0]) + V2[3] * (P1[1] - P2[1])) +
      V2[4] * (V1[2] * (P2[0] - P1[0]) + V1[3] * (P2[1] - P1[1]))) + (P3[0] *
      (V1[4] * V2[5] * (P2[0] - P1[0]) + V1[5] * V2[4] * (P1[0] - P2[0])) +
      P3[1] * (V1[4] * V2[5] * (P2[1] - P1[1]) + V1[5] * V2[4] * (P1[1] -
      P2[1]))))));
  T3[10] = denom * - cI * (OM3 * (P3[0] * (TMP11 * (P3[0] * (V2[5] * V1[3] -
      V2[3] * V1[5]) + (P3[1] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] *
      (V2[3] * V1[2] - V2[2] * V1[3]))) + (TMP14 * (P3[0] * (V2[3] * V1[5] -
      V2[5] * V1[3]) + (P3[1] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] *
      (V2[2] * V1[3] - V2[3] * V1[2]))) + 0.666666667 * (P3[2] * (TMP59 -
      TMP58)))) + P3[2] * (TMP11 * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) +
      (P3[2] * (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4]
      * V1[3]))) + TMP14 * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[3] * V1[5] - V2[5] * V1[3]) + P3[3] * (V2[4] * V1[3] - V2[3] *
      V1[4]))))) + (P3[1] * (V1[5] * (V2[2] * (P1[0] - P2[0]) + V2[4] * (P1[2]
      - P2[2])) + V2[5] * (V1[2] * (P2[0] - P1[0]) + V1[4] * (P2[2] - P1[2])))
      + (P3[3] * (V1[3] * (V2[2] * (P2[0] - P1[0]) + V2[4] * (P2[2] - P1[2])) +
      V2[3] * (V1[2] * (P1[0] - P2[0]) + V1[4] * (P1[2] - P2[2]))) + (P3[0] *
      (V1[3] * V2[5] * (P1[0] - P2[0]) + V1[5] * V2[3] * (P2[0] - P1[0])) +
      P3[2] * (V1[3] * V2[5] * (P1[2] - P2[2]) + V1[5] * V2[3] * (P2[2] -
      P1[2]))))));
  T3[14] = denom * - cI * (OM3 * (P3[0] * (TMP11 * (P3[0] * (V2[3] * V1[4] -
      V2[4] * V1[3]) + (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) + P3[2] *
      (V2[2] * V1[3] - V2[3] * V1[2]))) + (TMP14 * (P3[0] * (V2[4] * V1[3] -
      V2[3] * V1[4]) + (P3[1] * (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] *
      (V2[3] * V1[2] - V2[2] * V1[3]))) + 0.666666667 * (P3[3] * (TMP59 -
      TMP58)))) + P3[3] * (TMP11 * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) +
      (P3[2] * (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4]
      * V1[3]))) + TMP14 * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[3] * V1[5] - V2[5] * V1[3]) + P3[3] * (V2[4] * V1[3] - V2[3] *
      V1[4]))))) + (P3[1] * (V1[4] * (V2[2] * (P2[0] - P1[0]) + V2[5] * (P2[3]
      - P1[3])) + V2[4] * (V1[2] * (P1[0] - P2[0]) + V1[5] * (P1[3] - P2[3])))
      + (P3[2] * (V1[3] * (V2[2] * (P1[0] - P2[0]) + V2[5] * (P1[3] - P2[3])) +
      V2[3] * (V1[2] * (P2[0] - P1[0]) + V1[5] * (P2[3] - P1[3]))) + (P3[0] *
      (V1[3] * V2[4] * (P2[0] - P1[0]) + V1[4] * V2[3] * (P1[0] - P2[0])) +
      P3[3] * (V1[3] * V2[4] * (P2[3] - P1[3]) + V1[4] * V2[3] * (P1[3] -
      P2[3]))))));
  T3[3] = denom * cI * (OM3 * (P3[0] * (TMP11 * (P3[0] * (V2[5] * V1[4] - V2[4]
      * V1[5]) + (P3[2] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[4] *
      V1[2] - V2[2] * V1[4]))) + (TMP14 * (P3[0] * (V2[4] * V1[5] - V2[5] *
      V1[4]) + (P3[2] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] *
      V1[4] - V2[4] * V1[2]))) + 0.666666667 * (P3[1] * (TMP58 - TMP59)))) +
      P3[1] * (TMP11 * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[3] * V1[5] - V2[5] * V1[3]) + P3[3] * (V2[4] * V1[3] - V2[3] *
      V1[4]))) + TMP14 * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4] *
      V1[3]))))) + (P3[2] * (V1[5] * (V2[2] * (P1[0] - P2[0]) + V2[3] * (P1[1]
      - P2[1])) + V2[5] * (V1[2] * (P2[0] - P1[0]) + V1[3] * (P2[1] - P1[1])))
      + (P3[3] * (V1[4] * (V2[2] * (P2[0] - P1[0]) + V2[3] * (P2[1] - P1[1])) +
      V2[4] * (V1[2] * (P1[0] - P2[0]) + V1[3] * (P1[1] - P2[1]))) + (P3[0] *
      (V1[4] * V2[5] * (P1[0] - P2[0]) + V1[5] * V2[4] * (P2[0] - P1[0])) +
      P3[1] * (V1[4] * V2[5] * (P1[1] - P2[1]) + V1[5] * V2[4] * (P2[1] -
      P1[1]))))));
  T3[7] = denom * 2. * cI * (OM3 * P3[1] * (TMP11 * (P3[0] * (V2[5] * V1[4] -
      V2[4] * V1[5]) + (P3[2] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] *
      (V2[4] * V1[2] - V2[2] * V1[4]))) + (TMP14 * (P3[0] * (V2[4] * V1[5] -
      V2[5] * V1[4]) + (P3[2] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] *
      (V2[2] * V1[4] - V2[4] * V1[2]))) + 0.333333333 * (P3[1] * (TMP58 -
      TMP59)))) + (P1[1] * (P3[0] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[4] * V1[2] - V2[2] *
      V1[4]))) + (P2[1] * (P3[0] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[4] - V2[4] *
      V1[2]))) + (-0.333333333 * (TMP59) + 0.333333333 * (TMP58)))));
  T3[11] = denom * cI * (OM3 * (P3[1] * (TMP11 * (P3[0] * (V2[3] * V1[5] -
      V2[5] * V1[3]) + (P3[1] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] *
      (V2[2] * V1[3] - V2[3] * V1[2]))) + (TMP14 * (P3[0] * (V2[5] * V1[3] -
      V2[3] * V1[5]) + (P3[1] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] *
      (V2[3] * V1[2] - V2[2] * V1[3]))) + 0.666666667 * (P3[2] * (TMP58 -
      TMP59)))) + P3[2] * (TMP11 * (P3[0] * (V2[5] * V1[4] - V2[4] * V1[5]) +
      (P3[2] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[4] * V1[2] - V2[2]
      * V1[4]))) + TMP14 * (P3[0] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[4] - V2[4] *
      V1[2]))))) + (P3[0] * (V1[5] * (V2[3] * (P1[1] - P2[1]) + V2[4] * (P2[2]
      - P1[2])) + V2[5] * (V1[3] * (P2[1] - P1[1]) + V1[4] * (P1[2] - P2[2])))
      + (P3[3] * (V1[2] * (V2[3] * (P2[1] - P1[1]) + V2[4] * (P1[2] - P2[2])) +
      V2[2] * (V1[3] * (P1[1] - P2[1]) + V1[4] * (P2[2] - P1[2]))) + (P3[1] *
      (V1[2] * V2[5] * (P1[1] - P2[1]) + V1[5] * V2[2] * (P2[1] - P1[1])) +
      P3[2] * (V1[2] * V2[5] * (P2[2] - P1[2]) + V1[5] * V2[2] * (P1[2] -
      P2[2]))))));
  T3[15] = denom * cI * (OM3 * (P3[1] * (TMP11 * (P3[0] * (V2[4] * V1[3] -
      V2[3] * V1[4]) + (P3[1] * (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] *
      (V2[3] * V1[2] - V2[2] * V1[3]))) + (TMP14 * (P3[0] * (V2[3] * V1[4] -
      V2[4] * V1[3]) + (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) + P3[2] *
      (V2[2] * V1[3] - V2[3] * V1[2]))) + 0.666666667 * (P3[3] * (TMP58 -
      TMP59)))) + P3[3] * (TMP11 * (P3[0] * (V2[5] * V1[4] - V2[4] * V1[5]) +
      (P3[2] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[4] * V1[2] - V2[2]
      * V1[4]))) + TMP14 * (P3[0] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[4] - V2[4] *
      V1[2]))))) + (P3[0] * (V1[4] * (V2[3] * (P2[1] - P1[1]) + V2[5] * (P1[3]
      - P2[3])) + V2[4] * (V1[3] * (P1[1] - P2[1]) + V1[5] * (P2[3] - P1[3])))
      + (P3[2] * (V1[2] * (V2[3] * (P1[1] - P2[1]) + V2[5] * (P2[3] - P1[3])) +
      V2[2] * (V1[3] * (P2[1] - P1[1]) + V1[5] * (P1[3] - P2[3]))) + (P3[1] *
      (V1[2] * V2[4] * (P2[1] - P1[1]) + V1[4] * V2[2] * (P1[1] - P2[1])) +
      P3[3] * (V1[2] * V2[4] * (P1[3] - P2[3]) + V1[4] * V2[2] * (P2[3] -
      P1[3]))))));
  T3[4] = denom * cI * (OM3 * (P3[0] * (TMP11 * (P3[0] * (V2[3] * V1[5] - V2[5]
      * V1[3]) + (P3[1] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] *
      V1[3] - V2[3] * V1[2]))) + (TMP14 * (P3[0] * (V2[5] * V1[3] - V2[3] *
      V1[5]) + (P3[1] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[3] *
      V1[2] - V2[2] * V1[3]))) + 0.666666667 * (P3[2] * (TMP58 - TMP59)))) +
      P3[2] * (TMP11 * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[3] * V1[5] - V2[5] * V1[3]) + P3[3] * (V2[4] * V1[3] - V2[3] *
      V1[4]))) + TMP14 * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4] *
      V1[3]))))) + (P3[1] * (V1[5] * (V2[2] * (P2[0] - P1[0]) + V2[4] * (P2[2]
      - P1[2])) + V2[5] * (V1[2] * (P1[0] - P2[0]) + V1[4] * (P1[2] - P2[2])))
      + (P3[3] * (V1[3] * (V2[2] * (P1[0] - P2[0]) + V2[4] * (P1[2] - P2[2])) +
      V2[3] * (V1[2] * (P2[0] - P1[0]) + V1[4] * (P2[2] - P1[2]))) + (P3[0] *
      (V1[3] * V2[5] * (P2[0] - P1[0]) + V1[5] * V2[3] * (P1[0] - P2[0])) +
      P3[2] * (V1[3] * V2[5] * (P2[2] - P1[2]) + V1[5] * V2[3] * (P1[2] -
      P2[2]))))));
  T3[8] = denom * cI * (OM3 * (P3[1] * (TMP11 * (P3[0] * (V2[3] * V1[5] - V2[5]
      * V1[3]) + (P3[1] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] *
      V1[3] - V2[3] * V1[2]))) + (TMP14 * (P3[0] * (V2[5] * V1[3] - V2[3] *
      V1[5]) + (P3[1] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[3] *
      V1[2] - V2[2] * V1[3]))) + 0.666666667 * (P3[2] * (TMP58 - TMP59)))) +
      P3[2] * (TMP11 * (P3[0] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[4] * V1[2] - V2[2] *
      V1[4]))) + TMP14 * (P3[0] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[4] - V2[4] *
      V1[2]))))) + (P3[0] * (V1[5] * (V2[3] * (P1[1] - P2[1]) + V2[4] * (P2[2]
      - P1[2])) + V2[5] * (V1[3] * (P2[1] - P1[1]) + V1[4] * (P1[2] - P2[2])))
      + (P3[3] * (V1[2] * (V2[3] * (P2[1] - P1[1]) + V2[4] * (P1[2] - P2[2])) +
      V2[2] * (V1[3] * (P1[1] - P2[1]) + V1[4] * (P2[2] - P1[2]))) + (P3[1] *
      (V1[2] * V2[5] * (P1[1] - P2[1]) + V1[5] * V2[2] * (P2[1] - P1[1])) +
      P3[2] * (V1[2] * V2[5] * (P2[2] - P1[2]) + V1[5] * V2[2] * (P1[2] -
      P2[2]))))));
  T3[12] = denom * 2. * cI * (OM3 * P3[2] * (TMP11 * (P3[0] * (V2[3] * V1[5] -
      V2[5] * V1[3]) + (P3[1] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] *
      (V2[2] * V1[3] - V2[3] * V1[2]))) + (TMP14 * (P3[0] * (V2[5] * V1[3] -
      V2[3] * V1[5]) + (P3[1] * (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] *
      (V2[3] * V1[2] - V2[2] * V1[3]))) + 0.333333333 * (P3[2] * (TMP58 -
      TMP59)))) + (P1[2] * (P3[0] * (V2[3] * V1[5] - V2[5] * V1[3]) + (P3[1] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[3] - V2[3] *
      V1[2]))) + (P2[2] * (P3[0] * (V2[5] * V1[3] - V2[3] * V1[5]) + (P3[1] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[3] * V1[2] - V2[2] *
      V1[3]))) + (-0.333333333 * (TMP59) + 0.333333333 * (TMP58)))));
  T3[16] = denom * cI * (OM3 * (P3[2] * (TMP11 * (P3[0] * (V2[4] * V1[3] -
      V2[3] * V1[4]) + (P3[1] * (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] *
      (V2[3] * V1[2] - V2[2] * V1[3]))) + (TMP14 * (P3[0] * (V2[3] * V1[4] -
      V2[4] * V1[3]) + (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) + P3[2] *
      (V2[2] * V1[3] - V2[3] * V1[2]))) + 0.666666667 * (P3[3] * (TMP58 -
      TMP59)))) + P3[3] * (TMP11 * (P3[0] * (V2[3] * V1[5] - V2[5] * V1[3]) +
      (P3[1] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[3] - V2[3]
      * V1[2]))) + TMP14 * (P3[0] * (V2[5] * V1[3] - V2[3] * V1[5]) + (P3[1] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[3] * V1[2] - V2[2] *
      V1[3]))))) + (P3[0] * (V1[3] * (V2[4] * (P1[2] - P2[2]) + V2[5] * (P2[3]
      - P1[3])) + V2[3] * (V1[4] * (P2[2] - P1[2]) + V1[5] * (P1[3] - P2[3])))
      + (P3[1] * (V1[2] * (V2[4] * (P2[2] - P1[2]) + V2[5] * (P1[3] - P2[3])) +
      V2[2] * (V1[4] * (P1[2] - P2[2]) + V1[5] * (P2[3] - P1[3]))) + (P3[2] *
      (V1[2] * V2[3] * (P1[2] - P2[2]) + V1[3] * V2[2] * (P2[2] - P1[2])) +
      P3[3] * (V1[2] * V2[3] * (P2[3] - P1[3]) + V1[3] * V2[2] * (P1[3] -
      P2[3]))))));
  T3[5] = denom * cI * (OM3 * (P3[0] * (TMP11 * (P3[0] * (V2[4] * V1[3] - V2[3]
      * V1[4]) + (P3[1] * (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] * (V2[3] *
      V1[2] - V2[2] * V1[3]))) + (TMP14 * (P3[0] * (V2[3] * V1[4] - V2[4] *
      V1[3]) + (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) + P3[2] * (V2[2] *
      V1[3] - V2[3] * V1[2]))) + 0.666666667 * (P3[3] * (TMP58 - TMP59)))) +
      P3[3] * (TMP11 * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[3] * V1[5] - V2[5] * V1[3]) + P3[3] * (V2[4] * V1[3] - V2[3] *
      V1[4]))) + TMP14 * (P3[1] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[3] - V2[3] * V1[5]) + P3[3] * (V2[3] * V1[4] - V2[4] *
      V1[3]))))) + (P3[1] * (V1[4] * (V2[2] * (P1[0] - P2[0]) + V2[5] * (P1[3]
      - P2[3])) + V2[4] * (V1[2] * (P2[0] - P1[0]) + V1[5] * (P2[3] - P1[3])))
      + (P3[2] * (V1[3] * (V2[2] * (P2[0] - P1[0]) + V2[5] * (P2[3] - P1[3])) +
      V2[3] * (V1[2] * (P1[0] - P2[0]) + V1[5] * (P1[3] - P2[3]))) + (P3[0] *
      (V1[3] * V2[4] * (P1[0] - P2[0]) + V1[4] * V2[3] * (P2[0] - P1[0])) +
      P3[3] * (V1[3] * V2[4] * (P1[3] - P2[3]) + V1[4] * V2[3] * (P2[3] -
      P1[3]))))));
  T3[9] = denom * cI * (OM3 * (P3[1] * (TMP11 * (P3[0] * (V2[4] * V1[3] - V2[3]
      * V1[4]) + (P3[1] * (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] * (V2[3] *
      V1[2] - V2[2] * V1[3]))) + (TMP14 * (P3[0] * (V2[3] * V1[4] - V2[4] *
      V1[3]) + (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) + P3[2] * (V2[2] *
      V1[3] - V2[3] * V1[2]))) + 0.666666667 * (P3[3] * (TMP58 - TMP59)))) +
      P3[3] * (TMP11 * (P3[0] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P3[2] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[4] * V1[2] - V2[2] *
      V1[4]))) + TMP14 * (P3[0] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P3[2] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[4] - V2[4] *
      V1[2]))))) + (P3[0] * (V1[4] * (V2[3] * (P2[1] - P1[1]) + V2[5] * (P1[3]
      - P2[3])) + V2[4] * (V1[3] * (P1[1] - P2[1]) + V1[5] * (P2[3] - P1[3])))
      + (P3[2] * (V1[2] * (V2[3] * (P1[1] - P2[1]) + V2[5] * (P2[3] - P1[3])) +
      V2[2] * (V1[3] * (P2[1] - P1[1]) + V1[5] * (P1[3] - P2[3]))) + (P3[1] *
      (V1[2] * V2[4] * (P2[1] - P1[1]) + V1[4] * V2[2] * (P1[1] - P2[1])) +
      P3[3] * (V1[2] * V2[4] * (P1[3] - P2[3]) + V1[4] * V2[2] * (P2[3] -
      P1[3]))))));
  T3[13] = denom * cI * (OM3 * (P3[2] * (TMP11 * (P3[0] * (V2[4] * V1[3] -
      V2[3] * V1[4]) + (P3[1] * (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] *
      (V2[3] * V1[2] - V2[2] * V1[3]))) + (TMP14 * (P3[0] * (V2[3] * V1[4] -
      V2[4] * V1[3]) + (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) + P3[2] *
      (V2[2] * V1[3] - V2[3] * V1[2]))) + 0.666666667 * (P3[3] * (TMP58 -
      TMP59)))) + P3[3] * (TMP11 * (P3[0] * (V2[3] * V1[5] - V2[5] * V1[3]) +
      (P3[1] * (V2[5] * V1[2] - V2[2] * V1[5]) + P3[3] * (V2[2] * V1[3] - V2[3]
      * V1[2]))) + TMP14 * (P3[0] * (V2[5] * V1[3] - V2[3] * V1[5]) + (P3[1] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P3[3] * (V2[3] * V1[2] - V2[2] *
      V1[3]))))) + (P3[0] * (V1[3] * (V2[4] * (P1[2] - P2[2]) + V2[5] * (P2[3]
      - P1[3])) + V2[3] * (V1[4] * (P2[2] - P1[2]) + V1[5] * (P1[3] - P2[3])))
      + (P3[1] * (V1[2] * (V2[4] * (P2[2] - P1[2]) + V2[5] * (P1[3] - P2[3])) +
      V2[2] * (V1[4] * (P1[2] - P2[2]) + V1[5] * (P2[3] - P1[3]))) + (P3[2] *
      (V1[2] * V2[3] * (P1[2] - P2[2]) + V1[3] * V2[2] * (P2[2] - P1[2])) +
      P3[3] * (V1[2] * V2[3] * (P2[3] - P1[3]) + V1[3] * V2[2] * (P1[3] -
      P2[3]))))));
  T3[17] = denom * 2. * cI * (OM3 * P3[3] * (TMP11 * (P3[0] * (V2[4] * V1[3] -
      V2[3] * V1[4]) + (P3[1] * (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] *
      (V2[3] * V1[2] - V2[2] * V1[3]))) + (TMP14 * (P3[0] * (V2[3] * V1[4] -
      V2[4] * V1[3]) + (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) + P3[2] *
      (V2[2] * V1[3] - V2[3] * V1[2]))) + 0.333333333 * (P3[3] * (TMP58 -
      TMP59)))) + (P1[3] * (P3[0] * (V2[4] * V1[3] - V2[3] * V1[4]) + (P3[1] *
      (V2[2] * V1[4] - V2[4] * V1[2]) + P3[2] * (V2[3] * V1[2] - V2[2] *
      V1[3]))) + (P2[3] * (P3[0] * (V2[3] * V1[4] - V2[4] * V1[3]) + (P3[1] *
      (V2[4] * V1[2] - V2[2] * V1[4]) + P3[2] * (V2[2] * V1[3] - V2[3] *
      V1[2]))) + (-0.333333333 * (TMP59) + 0.333333333 * (TMP58)))));
}


void FFV1_2(complex<double> F1[], complex<double> V3[], complex<double> COUP,
    double M2, double W2, complex<double> F2[])
{
  complex<double> cI = complex<double> (0., 1.); 
  double P2[4]; 
  complex<double> denom; 
  F2[0] = +F1[0] + V3[0]; 
  F2[1] = +F1[1] + V3[1]; 
  P2[0] = -F2[0].real(); 
  P2[1] = -F2[1].real(); 
  P2[2] = -F2[1].imag(); 
  P2[3] = -F2[0].imag(); 
  denom = COUP/(pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) - pow(P2[3], 2) -
      M2 * (M2 - cI * W2));
  F2[2] = denom * cI * (F1[2] * (P2[0] * (V3[2] + V3[5]) + (P2[1] * - 1. *
      (V3[3] + cI * (V3[4])) + (P2[2] * (+cI * (V3[3]) - V3[4]) - P2[3] *
      (V3[2] + V3[5])))) + (F1[3] * (P2[0] * (V3[3] - cI * (V3[4])) + (P2[1] *
      (V3[5] - V3[2]) + (P2[2] * (-cI * (V3[5]) + cI * (V3[2])) + P2[3] * (+cI
      * (V3[4]) - V3[3])))) + M2 * (F1[4] * (V3[2] - V3[5]) + F1[5] * (+cI *
      (V3[4]) - V3[3]))));
  F2[3] = denom * - cI * (F1[2] * (P2[0] * - 1. * (V3[3] + cI * (V3[4])) +
      (P2[1] * (V3[2] + V3[5]) + (P2[2] * (+cI * (V3[2] + V3[5])) - P2[3] *
      (V3[3] + cI * (V3[4]))))) + (F1[3] * (P2[0] * (V3[5] - V3[2]) + (P2[1] *
      (V3[3] - cI * (V3[4])) + (P2[2] * (V3[4] + cI * (V3[3])) + P2[3] * (V3[5]
      - V3[2])))) + M2 * (F1[4] * (V3[3] + cI * (V3[4])) - F1[5] * (V3[2] +
      V3[5]))));
  F2[4] = denom * - cI * (F1[4] * (P2[0] * (V3[5] - V3[2]) + (P2[1] * (V3[3] +
      cI * (V3[4])) + (P2[2] * (V3[4] - cI * (V3[3])) + P2[3] * (V3[5] -
      V3[2])))) + (F1[5] * (P2[0] * (V3[3] - cI * (V3[4])) + (P2[1] * - 1. *
      (V3[2] + V3[5]) + (P2[2] * (+cI * (V3[2] + V3[5])) + P2[3] * (V3[3] - cI
      * (V3[4]))))) + M2 * (F1[2] * - 1. * (V3[2] + V3[5]) + F1[3] * (+cI *
      (V3[4]) - V3[3]))));
  F2[5] = denom * cI * (F1[4] * (P2[0] * - 1. * (V3[3] + cI * (V3[4])) + (P2[1]
      * (V3[2] - V3[5]) + (P2[2] * (-cI * (V3[5]) + cI * (V3[2])) + P2[3] *
      (V3[3] + cI * (V3[4]))))) + (F1[5] * (P2[0] * (V3[2] + V3[5]) + (P2[1] *
      (+cI * (V3[4]) - V3[3]) + (P2[2] * - 1. * (V3[4] + cI * (V3[3])) - P2[3]
      * (V3[2] + V3[5])))) + M2 * (F1[2] * (V3[3] + cI * (V3[4])) + F1[3] *
      (V3[2] - V3[5]))));
}


void VVT5_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP12; 
  complex<double> TMP11; 
  double P1[4]; 
  complex<double> TMP10; 
  double P2[4]; 
  complex<double> TMP14; 
  double P3[4]; 
  complex<double> TMP33; 
  double OM3; 
  complex<double> TMP32; 
  complex<double> denom; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP32 = -1. * (P1[0] * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] *
      (P3[1] * V1[5] - P3[3] * V1[3]) + P2[3] * (P3[2] * V1[3] - P3[1] *
      V1[4]))) + (P1[1] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))) + (P1[2] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) + (P2[1] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + P1[3] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) + (P2[1] *
      (P3[2] * V1[2] - P3[0] * V1[4]) + P2[2] * (P3[0] * V1[3] - P3[1] *
      V1[2]))))));
  TMP33 = -1. * (P1[0] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P2[3] * (P3[1] * V2[4] - P3[2] *
      V2[3]))) + (P1[1] * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3] * (P3[2] * V2[2] - P3[0] *
      V2[4]))) + (P1[2] * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) + (P2[1] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P1[3] * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) + (P2[1] *
      (P3[0] * V2[4] - P3[2] * V2[2]) + P2[2] * (P3[1] * V2[2] - P3[0] *
      V2[3]))))));
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * - 2. * cI * (TMP10 * (OM3 * P3[0] * (TMP11 * (P1[1] * (P3[2]
      * V2[5] - P3[3] * V2[4]) + (P1[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
      P1[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) - 0.333333333 * (P3[0] *
      TMP33)) + (P2[0] * (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] *
      (P3[1] * V2[5] - P3[3] * V2[3]) + P1[3] * (P3[2] * V2[3] - P3[1] *
      V2[4]))) + 0.333333333 * (TMP33))) + TMP12 * (OM3 * P3[0] * (TMP14 *
      (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] * (P3[3] * V1[3] -
      P3[1] * V1[5]) + P2[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) - 0.333333333
      * (P3[0] * TMP32)) + (P1[0] * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
      (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) + P2[3] * (P3[2] * V1[3] - P3[1]
      * V1[4]))) + 0.333333333 * (TMP32))));
  T3[6] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP11 * (P1[0] * (P3[3] *
      V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3]
      * (P3[2] * V2[2] - P3[0] * V2[4]))) + 0.666666667 * (P3[1] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[2] * V1[2] - P3[0] *
      V1[4]))) + 0.666666667 * (P3[1] * TMP32))) + P3[1] * (TMP10 * TMP11 *
      (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP12 *
      TMP14 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P2[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P2[0] * (P1[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3] * (P3[0] * V2[4] - P3[2] *
      V2[2]))) + P2[1] * (P1[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P1[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P1[0] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
      (P2[2] * (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[4] - P3[2]
      * V1[2]))) + P1[1] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P2[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[10] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP11 * (P1[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.666666667 * (P3[2] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P2[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.666666667 * (P3[2] * TMP32))) + P3[2] * (TMP10 * TMP11 *
      (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP12 *
      TMP14 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P2[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P2[0] * (P1[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P1[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P2[2] * (P1[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P1[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P1[0] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
      (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[1] * V1[2] - P3[0]
      * V1[3]))) + P1[2] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P2[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[14] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP11 * (P1[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P1[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P2[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P2[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP32))) + P3[3] * (TMP10 * TMP11 *
      (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP12 *
      TMP14 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P2[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P2[0] * (P1[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P1[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P1[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P2[3] * (P1[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P1[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P1[0] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P2[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P1[3] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P2[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[3] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP11 * (P1[0] * (P3[3] *
      V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3]
      * (P3[2] * V2[2] - P3[0] * V2[4]))) + 0.666666667 * (P3[1] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[2] * V1[2] - P3[0] *
      V1[4]))) + 0.666666667 * (P3[1] * TMP32))) + P3[1] * (TMP10 * TMP11 *
      (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP12 *
      TMP14 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P2[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P2[0] * (P1[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3] * (P3[0] * V2[4] - P3[2] *
      V2[2]))) + P2[1] * (P1[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P1[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P1[0] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
      (P2[2] * (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[4] - P3[2]
      * V1[2]))) + P1[1] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P2[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[7] = denom * 2. * cI * (TMP10 * (OM3 * P3[1] * (TMP11 * (P1[0] * (P3[3] *
      V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3]
      * (P3[2] * V2[2] - P3[0] * V2[4]))) + 0.333333333 * (P3[1] * TMP33)) +
      (P2[1] * (P1[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] * (P3[3] *
      V2[2] - P3[0] * V2[5]) + P1[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
      0.333333333 * (TMP33))) + TMP12 * (OM3 * P3[1] * (TMP14 * (P2[0] * (P3[3]
      * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
      P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) + 0.333333333 * (P3[1] *
      TMP32)) + (P1[1] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))) + 0.333333333 * (TMP32))));
  T3[11] = denom * cI * (OM3 * (P3[1] * (TMP10 * (TMP11 * (P1[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.666666667 * (P3[2] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P2[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.666666667 * (P3[2] * TMP32))) + P3[2] * (TMP10 * TMP11 *
      (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[0] * V2[5] -
      P3[3] * V2[2]) + P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) + TMP12 *
      TMP14 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[0] *
      V1[5] - P3[3] * V1[2]) + P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))))) +
      (TMP10 * (P2[1] * (P1[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P1[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P2[2] * (P1[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3] * (P3[0] * V2[4] - P3[2] *
      V2[2])))) + TMP12 * (P1[1] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
      (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[1] * V1[2] - P3[0]
      * V1[3]))) + P1[2] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))))));
  T3[15] = denom * cI * (OM3 * (P3[1] * (TMP10 * (TMP11 * (P1[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P1[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P2[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P2[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP32))) + P3[3] * (TMP10 * TMP11 *
      (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[0] * V2[5] -
      P3[3] * V2[2]) + P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) + TMP12 *
      TMP14 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[0] *
      V1[5] - P3[3] * V1[2]) + P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))))) +
      (TMP10 * (P2[1] * (P1[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P1[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P1[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P2[3] * (P1[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3] * (P3[0] * V2[4] - P3[2] *
      V2[2])))) + TMP12 * (P1[1] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P2[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P1[3] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))))));
  T3[4] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP11 * (P1[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.666666667 * (P3[2] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P2[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.666666667 * (P3[2] * TMP32))) + P3[2] * (TMP10 * TMP11 *
      (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP12 *
      TMP14 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P2[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P2[0] * (P1[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P1[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P2[2] * (P1[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P1[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P1[0] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
      (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[1] * V1[2] - P3[0]
      * V1[3]))) + P1[2] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P2[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[8] = denom * cI * (OM3 * (P3[1] * (TMP10 * (TMP11 * (P1[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.666666667 * (P3[2] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P2[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.666666667 * (P3[2] * TMP32))) + P3[2] * (TMP10 * TMP11 *
      (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[0] * V2[5] -
      P3[3] * V2[2]) + P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) + TMP12 *
      TMP14 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[0] *
      V1[5] - P3[3] * V1[2]) + P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))))) +
      (TMP10 * (P2[1] * (P1[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P1[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P2[2] * (P1[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3] * (P3[0] * V2[4] - P3[2] *
      V2[2])))) + TMP12 * (P1[1] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
      (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[1] * V1[2] - P3[0]
      * V1[3]))) + P1[2] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))))));
  T3[12] = denom * 2. * cI * (TMP10 * (OM3 * P3[2] * (TMP11 * (P1[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.333333333 * (P3[2] * TMP33)) +
      (P2[2] * (P1[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P1[1] * (P3[0] *
      V2[5] - P3[3] * V2[2]) + P1[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
      0.333333333 * (TMP33))) + TMP12 * (OM3 * P3[2] * (TMP14 * (P2[0] * (P3[1]
      * V1[5] - P3[3] * V1[3]) + (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
      P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) + 0.333333333 * (P3[2] *
      TMP32)) + (P1[2] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) + (P2[1] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.333333333 * (TMP32))));
  T3[16] = denom * cI * (OM3 * (P3[2] * (TMP10 * (TMP11 * (P1[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P1[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P2[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P2[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP32))) + P3[3] * (TMP10 * TMP11 *
      (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) + (P1[1] * (P3[3] * V2[2] -
      P3[0] * V2[5]) + P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) + TMP12 *
      TMP14 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P2[1] * (P3[3] *
      V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))))) +
      (TMP10 * (P2[2] * (P1[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P1[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P1[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P2[3] * (P1[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P1[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3] * (P3[1] * V2[2] - P3[0] *
      V2[3])))) + TMP12 * (P1[2] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P2[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P1[3] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) + (P2[1] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[1] * V1[2] - P3[0] *
      V1[3]))))));
  T3[5] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP11 * (P1[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P1[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P2[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P2[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP32))) + P3[3] * (TMP10 * TMP11 *
      (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP12 *
      TMP14 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P2[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P2[0] * (P1[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P1[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P1[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P2[3] * (P1[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P1[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P1[0] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P2[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P1[3] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P2[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[9] = denom * cI * (OM3 * (P3[1] * (TMP10 * (TMP11 * (P1[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P1[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P2[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P2[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP32))) + P3[3] * (TMP10 * TMP11 *
      (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P1[2] * (P3[0] * V2[5] -
      P3[3] * V2[2]) + P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) + TMP12 *
      TMP14 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] * (P3[0] *
      V1[5] - P3[3] * V1[2]) + P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))))) +
      (TMP10 * (P2[1] * (P1[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P1[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P1[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P2[3] * (P1[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P1[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P1[3] * (P3[0] * V2[4] - P3[2] *
      V2[2])))) + TMP12 * (P1[1] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P2[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P1[3] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))))));
  T3[13] = denom * cI * (OM3 * (P3[2] * (TMP10 * (TMP11 * (P1[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P1[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP33)) +
      TMP12 * (TMP14 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P2[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P2[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP32))) + P3[3] * (TMP10 * TMP11 *
      (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) + (P1[1] * (P3[3] * V2[2] -
      P3[0] * V2[5]) + P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) + TMP12 *
      TMP14 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P2[1] * (P3[3] *
      V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))))) +
      (TMP10 * (P2[2] * (P1[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P1[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P1[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P2[3] * (P1[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P1[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P1[3] * (P3[1] * V2[2] - P3[0] *
      V2[3])))) + TMP12 * (P1[2] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P2[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P1[3] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) + (P2[1] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[1] * V1[2] - P3[0] *
      V1[3]))))));
  T3[17] = denom * 2. * cI * (TMP10 * (OM3 * P3[3] * (TMP11 * (P1[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P1[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.333333333 * (P3[3] * TMP33)) +
      (P2[3] * (P1[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P1[1] * (P3[2] *
      V2[2] - P3[0] * V2[4]) + P1[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
      0.333333333 * (TMP33))) + TMP12 * (OM3 * P3[3] * (TMP14 * (P2[0] * (P3[2]
      * V1[3] - P3[1] * V1[4]) + (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
      P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) + 0.333333333 * (P3[3] *
      TMP32)) + (P1[3] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) + (P2[1] *
      (P3[2] * V1[2] - P3[0] * V1[4]) + P2[2] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.333333333 * (TMP32))));
}


void FFV2_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
    double M3, double W3, complex<double> V3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> denom; 
  complex<double> TMP1; 
  double P3[4]; 
  double OM3; 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  V3[0] = +F1[0] + F2[0]; 
  V3[1] = +F1[1] + F2[1]; 
  P3[0] = -V3[0].real(); 
  P3[1] = -V3[1].real(); 
  P3[2] = -V3[1].imag(); 
  P3[3] = -V3[0].imag(); 
  TMP1 = (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
      F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])));
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  V3[2] = denom * - cI * (F1[2] * F2[4] + F1[3] * F2[5] - P3[0] * OM3 * TMP1); 
  V3[3] = denom * - cI * (-F1[2] * F2[5] - F1[3] * F2[4] - P3[1] * OM3 * TMP1); 
  V3[4] = denom * - cI * (-cI * (F1[2] * F2[5]) + cI * (F1[3] * F2[4]) - P3[2]
      * OM3 * TMP1);
  V3[5] = denom * - cI * (F1[3] * F2[5] - F1[2] * F2[4] - P3[3] * OM3 * TMP1); 
}

void FFV2_4_3(complex<double> F1[], complex<double> F2[], complex<double>
    COUP1, complex<double> COUP2, double M3, double W3, complex<double> V3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> denom; 
//   double P3[4];
//   double OM3;
  int i; 
  complex<double> Vtmp[6]; 
  FFV2_3(F1, F2, COUP1, M3, W3, V3); 
  FFV4_3(F1, F2, COUP2, M3, W3, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V3[i] = V3[i] + Vtmp[i]; 
    i++; 
  }
}

void VVT3_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  double P1[4]; 
  double P2[4]; 
  double P3[4]; 
  complex<double> TMP66; 
  complex<double> denom; 
  complex<double> TMP67; 
  complex<double> TMP64; 
  complex<double> TMP65; 
  double OM1; 
  OM1 = 0.; 
  if (M1 != 0.)
    OM1 = 1./pow(M1, 2); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  P3[0] = T3[0].real(); 
  P3[1] = T3[1].real(); 
  P3[2] = T3[1].imag(); 
  P3[3] = T3[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP64 = -1. * (P1[0] * (P1[1] * (P3[2] * (V2[5] * (T3[2] + T3[7]) + (-V2[2] *
      T3[5] - V2[3] * T3[9])) + (P3[3] * (V2[4] * - 1. * (T3[2] + T3[7]) +
      (V2[2] * T3[4] + V2[3] * T3[8])) + (P3[0] * (V2[4] * T3[5] - V2[5] *
      T3[4]) + P3[1] * (V2[4] * T3[9] - V2[5] * T3[8])))) + (P1[2] * (P3[1] *
      (V2[5] * - 1. * (T3[2] + T3[12]) + (V2[2] * T3[5] + V2[4] * T3[13])) +
      (P3[3] * (V2[3] * (T3[2] + T3[12]) + (-V2[2] * T3[3] - V2[4] * T3[11])) +
      (P3[0] * (V2[5] * T3[3] - V2[3] * T3[5]) + P3[2] * (V2[5] * T3[11] -
      V2[3] * T3[13])))) + (P1[3] * (P3[1] * (V2[4] * (T3[2] + T3[17]) +
      (-V2[2] * T3[4] - V2[5] * T3[16])) + (P3[2] * (V2[3] * - 1. * (T3[2] +
      T3[17]) + (V2[2] * T3[3] + V2[5] * T3[15])) + (P3[0] * (V2[3] * T3[4] -
      V2[4] * T3[3]) + P3[3] * (V2[3] * T3[16] - V2[4] * T3[15])))) + P1[0] *
      (P3[1] * (V2[5] * T3[4] - V2[4] * T3[5]) + (P3[2] * (V2[3] * T3[5] -
      V2[5] * T3[3]) + P3[3] * (V2[4] * T3[3] - V2[3] * T3[4])))))) + (P1[1] *
      (P1[2] * (P3[0] * (V2[5] * (T3[12] - T3[7]) + (V2[3] * T3[9] - V2[4] *
      T3[13])) + (P3[3] * (V2[2] * (T3[7] - T3[12]) + (V2[4] * T3[10] - V2[3] *
      T3[6])) + (P3[1] * (V2[5] * T3[6] - V2[2] * T3[9]) + P3[2] * (V2[2] *
      T3[13] - V2[5] * T3[10])))) + (P1[3] * (P3[0] * (V2[4] * (T3[7] - T3[17])
      + (V2[5] * T3[16] - V2[3] * T3[8])) + (P3[2] * (V2[2] * (T3[17] - T3[7])
      + (V2[3] * T3[6] - V2[5] * T3[14])) + (P3[1] * (V2[2] * T3[8] - V2[4] *
      T3[6]) + P3[3] * (V2[4] * T3[14] - V2[2] * T3[16])))) + P1[1] * (P3[0] *
      (V2[5] * T3[8] - V2[4] * T3[9]) + (P3[2] * (V2[2] * T3[9] - V2[5] *
      T3[6]) + P3[3] * (V2[4] * T3[6] - V2[2] * T3[8]))))) + (P1[2] * (P1[3] *
      (P3[0] * (V2[3] * (T3[17] - T3[12]) + (V2[4] * T3[11] - V2[5] * T3[15]))
      + (P3[1] * (V2[2] * (T3[12] - T3[17]) + (V2[5] * T3[14] - V2[4] *
      T3[10])) + (P3[2] * (V2[3] * T3[10] - V2[2] * T3[11]) + P3[3] * (V2[2] *
      T3[15] - V2[3] * T3[14])))) + P1[2] * (P3[0] * (V2[3] * T3[13] - V2[5] *
      T3[11]) + (P3[1] * (V2[5] * T3[10] - V2[2] * T3[13]) + P3[3] * (V2[2] *
      T3[11] - V2[3] * T3[10])))) + P1[3] * P1[3] * (P3[0] * (V2[4] * T3[15] -
      V2[3] * T3[16]) + (P3[1] * (V2[2] * T3[16] - V2[4] * T3[14]) + P3[2] *
      (V2[3] * T3[14] - V2[2] * T3[15]))))));
  TMP65 = -1. * (P2[0] * (P1[0] * (P3[1] * (V2[5] * T3[4] - V2[4] * T3[5]) +
      (P3[2] * (V2[3] * T3[5] - V2[5] * T3[3]) + P3[3] * (V2[4] * T3[3] - V2[3]
      * T3[4]))) + (P1[1] * (P3[0] * (V2[4] * T3[5] - V2[5] * T3[4]) + (P3[2] *
      (V2[5] * T3[2] - V2[2] * T3[5]) + P3[3] * (V2[2] * T3[4] - V2[4] *
      T3[2]))) + (P1[2] * (P3[0] * (V2[5] * T3[3] - V2[3] * T3[5]) + (P3[1] *
      (V2[2] * T3[5] - V2[5] * T3[2]) + P3[3] * (V2[3] * T3[2] - V2[2] *
      T3[3]))) + P1[3] * (P3[0] * (V2[3] * T3[4] - V2[4] * T3[3]) + (P3[1] *
      (V2[4] * T3[2] - V2[2] * T3[4]) + P3[2] * (V2[2] * T3[3] - V2[3] *
      T3[2])))))) + (P2[1] * (P1[0] * (P3[1] * (V2[4] * T3[9] - V2[5] * T3[8])
      + (P3[2] * (V2[5] * T3[7] - V2[3] * T3[9]) + P3[3] * (V2[3] * T3[8] -
      V2[4] * T3[7]))) + (P1[1] * (P3[0] * (V2[5] * T3[8] - V2[4] * T3[9]) +
      (P3[2] * (V2[2] * T3[9] - V2[5] * T3[6]) + P3[3] * (V2[4] * T3[6] - V2[2]
      * T3[8]))) + (P1[2] * (P3[0] * (V2[3] * T3[9] - V2[5] * T3[7]) + (P3[1] *
      (V2[5] * T3[6] - V2[2] * T3[9]) + P3[3] * (V2[2] * T3[7] - V2[3] *
      T3[6]))) + P1[3] * (P3[0] * (V2[4] * T3[7] - V2[3] * T3[8]) + (P3[1] *
      (V2[2] * T3[8] - V2[4] * T3[6]) + P3[2] * (V2[3] * T3[6] - V2[2] *
      T3[7])))))) + (P2[2] * (P1[0] * (P3[1] * (V2[4] * T3[13] - V2[5] *
      T3[12]) + (P3[2] * (V2[5] * T3[11] - V2[3] * T3[13]) + P3[3] * (V2[3] *
      T3[12] - V2[4] * T3[11]))) + (P1[1] * (P3[0] * (V2[5] * T3[12] - V2[4] *
      T3[13]) + (P3[2] * (V2[2] * T3[13] - V2[5] * T3[10]) + P3[3] * (V2[4] *
      T3[10] - V2[2] * T3[12]))) + (P1[2] * (P3[0] * (V2[3] * T3[13] - V2[5] *
      T3[11]) + (P3[1] * (V2[5] * T3[10] - V2[2] * T3[13]) + P3[3] * (V2[2] *
      T3[11] - V2[3] * T3[10]))) + P1[3] * (P3[0] * (V2[4] * T3[11] - V2[3] *
      T3[12]) + (P3[1] * (V2[2] * T3[12] - V2[4] * T3[10]) + P3[2] * (V2[3] *
      T3[10] - V2[2] * T3[11])))))) + P2[3] * (P1[0] * (P3[1] * (V2[4] * T3[17]
      - V2[5] * T3[16]) + (P3[2] * (V2[5] * T3[15] - V2[3] * T3[17]) + P3[3] *
      (V2[3] * T3[16] - V2[4] * T3[15]))) + (P1[1] * (P3[0] * (V2[5] * T3[16] -
      V2[4] * T3[17]) + (P3[2] * (V2[2] * T3[17] - V2[5] * T3[14]) + P3[3] *
      (V2[4] * T3[14] - V2[2] * T3[16]))) + (P1[2] * (P3[0] * (V2[3] * T3[17] -
      V2[5] * T3[15]) + (P3[1] * (V2[5] * T3[14] - V2[2] * T3[17]) + P3[3] *
      (V2[2] * T3[15] - V2[3] * T3[14]))) + P1[3] * (P3[0] * (V2[4] * T3[15] -
      V2[3] * T3[16]) + (P3[1] * (V2[2] * T3[16] - V2[4] * T3[14]) + P3[2] *
      (V2[3] * T3[14] - V2[2] * T3[15])))))))));
  TMP66 = -1. * (P1[0] * (P1[1] * (P3[2] * (V2[5] * (T3[2] + T3[7]) + (-V2[2] *
      T3[14] - V2[3] * T3[15])) + (P3[3] * (V2[4] * - 1. * (T3[2] + T3[7]) +
      (V2[2] * T3[10] + V2[3] * T3[11])) + (P3[0] * (V2[4] * T3[14] - V2[5] *
      T3[10]) + P3[1] * (V2[4] * T3[15] - V2[5] * T3[11])))) + (P1[2] * (P3[1]
      * (V2[5] * - 1. * (T3[2] + T3[12]) + (V2[2] * T3[14] + V2[4] * T3[16])) +
      (P3[3] * (V2[3] * (T3[2] + T3[12]) + (-V2[2] * T3[6] - V2[4] * T3[8])) +
      (P3[0] * (V2[5] * T3[6] - V2[3] * T3[14]) + P3[2] * (V2[5] * T3[8] -
      V2[3] * T3[16])))) + (P1[3] * (P3[1] * (V2[4] * (T3[2] + T3[17]) +
      (-V2[2] * T3[10] - V2[5] * T3[13])) + (P3[2] * (V2[3] * - 1. * (T3[2] +
      T3[17]) + (V2[2] * T3[6] + V2[5] * T3[9])) + (P3[0] * (V2[3] * T3[10] -
      V2[4] * T3[6]) + P3[3] * (V2[3] * T3[13] - V2[4] * T3[9])))) + P1[0] *
      (P3[1] * (V2[5] * T3[10] - V2[4] * T3[14]) + (P3[2] * (V2[3] * T3[14] -
      V2[5] * T3[6]) + P3[3] * (V2[4] * T3[6] - V2[3] * T3[10])))))) + (P1[1] *
      (P1[2] * (P3[0] * (V2[5] * (T3[12] - T3[7]) + (V2[3] * T3[15] - V2[4] *
      T3[16])) + (P3[3] * (V2[2] * (T3[7] - T3[12]) + (V2[4] * T3[4] - V2[3] *
      T3[3])) + (P3[1] * (V2[5] * T3[3] - V2[2] * T3[15]) + P3[2] * (V2[2] *
      T3[16] - V2[5] * T3[4])))) + (P1[3] * (P3[0] * (V2[4] * (T3[7] - T3[17])
      + (V2[5] * T3[13] - V2[3] * T3[11])) + (P3[2] * (V2[2] * (T3[17] - T3[7])
      + (V2[3] * T3[3] - V2[5] * T3[5])) + (P3[1] * (V2[2] * T3[11] - V2[4] *
      T3[3]) + P3[3] * (V2[4] * T3[5] - V2[2] * T3[13])))) + P1[1] * (P3[0] *
      (V2[5] * T3[11] - V2[4] * T3[15]) + (P3[2] * (V2[2] * T3[15] - V2[5] *
      T3[3]) + P3[3] * (V2[4] * T3[3] - V2[2] * T3[11]))))) + (P1[2] * (P1[3] *
      (P3[0] * (V2[3] * (T3[17] - T3[12]) + (V2[4] * T3[8] - V2[5] * T3[9])) +
      (P3[1] * (V2[2] * (T3[12] - T3[17]) + (V2[5] * T3[5] - V2[4] * T3[4])) +
      (P3[2] * (V2[3] * T3[4] - V2[2] * T3[8]) + P3[3] * (V2[2] * T3[9] - V2[3]
      * T3[5])))) + P1[2] * (P3[0] * (V2[3] * T3[16] - V2[5] * T3[8]) + (P3[1]
      * (V2[5] * T3[4] - V2[2] * T3[16]) + P3[3] * (V2[2] * T3[8] - V2[3] *
      T3[4])))) + P1[3] * P1[3] * (P3[0] * (V2[4] * T3[9] - V2[3] * T3[13]) +
      (P3[1] * (V2[2] * T3[13] - V2[4] * T3[5]) + P3[2] * (V2[3] * T3[5] -
      V2[2] * T3[9]))))));
  TMP67 = -1. * (P2[0] * (P1[0] * (P3[1] * (V2[5] * T3[10] - V2[4] * T3[14]) +
      (P3[2] * (V2[3] * T3[14] - V2[5] * T3[6]) + P3[3] * (V2[4] * T3[6] -
      V2[3] * T3[10]))) + (P1[1] * (P3[0] * (V2[4] * T3[14] - V2[5] * T3[10]) +
      (P3[2] * (V2[5] * T3[2] - V2[2] * T3[14]) + P3[3] * (V2[2] * T3[10] -
      V2[4] * T3[2]))) + (P1[2] * (P3[0] * (V2[5] * T3[6] - V2[3] * T3[14]) +
      (P3[1] * (V2[2] * T3[14] - V2[5] * T3[2]) + P3[3] * (V2[3] * T3[2] -
      V2[2] * T3[6]))) + P1[3] * (P3[0] * (V2[3] * T3[10] - V2[4] * T3[6]) +
      (P3[1] * (V2[4] * T3[2] - V2[2] * T3[10]) + P3[2] * (V2[2] * T3[6] -
      V2[3] * T3[2])))))) + (P2[1] * (P1[0] * (P3[1] * (V2[4] * T3[15] - V2[5]
      * T3[11]) + (P3[2] * (V2[5] * T3[7] - V2[3] * T3[15]) + P3[3] * (V2[3] *
      T3[11] - V2[4] * T3[7]))) + (P1[1] * (P3[0] * (V2[5] * T3[11] - V2[4] *
      T3[15]) + (P3[2] * (V2[2] * T3[15] - V2[5] * T3[3]) + P3[3] * (V2[4] *
      T3[3] - V2[2] * T3[11]))) + (P1[2] * (P3[0] * (V2[3] * T3[15] - V2[5] *
      T3[7]) + (P3[1] * (V2[5] * T3[3] - V2[2] * T3[15]) + P3[3] * (V2[2] *
      T3[7] - V2[3] * T3[3]))) + P1[3] * (P3[0] * (V2[4] * T3[7] - V2[3] *
      T3[11]) + (P3[1] * (V2[2] * T3[11] - V2[4] * T3[3]) + P3[2] * (V2[3] *
      T3[3] - V2[2] * T3[7])))))) + (P2[2] * (P1[0] * (P3[1] * (V2[4] * T3[16]
      - V2[5] * T3[12]) + (P3[2] * (V2[5] * T3[8] - V2[3] * T3[16]) + P3[3] *
      (V2[3] * T3[12] - V2[4] * T3[8]))) + (P1[1] * (P3[0] * (V2[5] * T3[12] -
      V2[4] * T3[16]) + (P3[2] * (V2[2] * T3[16] - V2[5] * T3[4]) + P3[3] *
      (V2[4] * T3[4] - V2[2] * T3[12]))) + (P1[2] * (P3[0] * (V2[3] * T3[16] -
      V2[5] * T3[8]) + (P3[1] * (V2[5] * T3[4] - V2[2] * T3[16]) + P3[3] *
      (V2[2] * T3[8] - V2[3] * T3[4]))) + P1[3] * (P3[0] * (V2[4] * T3[8] -
      V2[3] * T3[12]) + (P3[1] * (V2[2] * T3[12] - V2[4] * T3[4]) + P3[2] *
      (V2[3] * T3[4] - V2[2] * T3[8])))))) + P2[3] * (P1[0] * (P3[1] * (V2[4] *
      T3[17] - V2[5] * T3[13]) + (P3[2] * (V2[5] * T3[9] - V2[3] * T3[17]) +
      P3[3] * (V2[3] * T3[13] - V2[4] * T3[9]))) + (P1[1] * (P3[0] * (V2[5] *
      T3[13] - V2[4] * T3[17]) + (P3[2] * (V2[2] * T3[17] - V2[5] * T3[5]) +
      P3[3] * (V2[4] * T3[5] - V2[2] * T3[13]))) + (P1[2] * (P3[0] * (V2[3] *
      T3[17] - V2[5] * T3[9]) + (P3[1] * (V2[5] * T3[5] - V2[2] * T3[17]) +
      P3[3] * (V2[2] * T3[9] - V2[3] * T3[5]))) + P1[3] * (P3[0] * (V2[4] *
      T3[9] - V2[3] * T3[13]) + (P3[1] * (V2[2] * T3[13] - V2[4] * T3[5]) +
      P3[2] * (V2[3] * T3[5] - V2[2] * T3[9])))))))));
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * - 2. * cI * (P3[1] * (V2[4] * (P1[0] * 0.500000000 * (T3[5] +
      T3[14]) + (P1[1] * - 0.500000000 * (T3[9] + T3[15]) + (P1[2] * -
      0.500000000 * (T3[13] + T3[16]) + (P2[0] * - 0.500000000 * (T3[5] +
      T3[14]) + (P2[1] * 0.500000000 * (T3[9] + T3[15]) + (P2[2] * 0.500000000
      * (T3[13] + T3[16]) + T3[17] * (P2[3] - P1[3]))))))) + V2[5] * (P1[0] * -
      0.500000000 * (T3[4] + T3[10]) + (P1[1] * 0.500000000 * (T3[8] + T3[11])
      + (P1[3] * 0.500000000 * (T3[16] + T3[13]) + (P2[0] * 0.500000000 *
      (T3[4] + T3[10]) + (P2[1] * - 0.500000000 * (T3[8] + T3[11]) + (P2[3] * -
      0.500000000 * (T3[16] + T3[13]) + T3[12] * (P1[2] - P2[2])))))))) +
      (P3[2] * (V2[3] * (P1[0] * - 0.500000000 * (T3[5] + T3[14]) + (P1[1] *
      0.500000000 * (T3[9] + T3[15]) + (P1[2] * 0.500000000 * (T3[13] + T3[16])
      + (P2[0] * 0.500000000 * (T3[5] + T3[14]) + (P2[1] * - 0.500000000 *
      (T3[9] + T3[15]) + (P2[2] * - 0.500000000 * (T3[13] + T3[16]) + T3[17] *
      (P1[3] - P2[3]))))))) + V2[5] * (P1[0] * 0.500000000 * (T3[3] + T3[6]) +
      (P1[2] * - 0.500000000 * (T3[11] + T3[8]) + (P1[3] * - 0.500000000 *
      (T3[15] + T3[9]) + (P2[0] * - 0.500000000 * (T3[3] + T3[6]) + (P2[2] *
      0.500000000 * (T3[11] + T3[8]) + (P2[3] * 0.500000000 * (T3[15] + T3[9])
      + T3[7] * (P2[1] - P1[1])))))))) + (+0.500000000 * (OM1 * P1[0] * (TMP65
      + TMP67 - TMP64 - TMP66)) + P3[3] * (V2[3] * (P1[0] * 0.500000000 *
      (T3[4] + T3[10]) + (P1[1] * - 0.500000000 * (T3[8] + T3[11]) + (P1[3] * -
      0.500000000 * (T3[16] + T3[13]) + (P2[0] * - 0.500000000 * (T3[4] +
      T3[10]) + (P2[1] * 0.500000000 * (T3[8] + T3[11]) + (P2[3] * 0.500000000
      * (T3[16] + T3[13]) + T3[12] * (P2[2] - P1[2]))))))) + V2[4] * (P1[0] * -
      0.500000000 * (T3[3] + T3[6]) + (P1[2] * 0.500000000 * (T3[11] + T3[8]) +
      (P1[3] * 0.500000000 * (T3[15] + T3[9]) + (P2[0] * 0.500000000 * (T3[3] +
      T3[6]) + (P2[2] * - 0.500000000 * (T3[11] + T3[8]) + (P2[3] * -
      0.500000000 * (T3[15] + T3[9]) + T3[7] * (P1[1] - P2[1])))))))))));
  V1[3] = denom * - 2. * cI * (P3[0] * (V2[4] * (P1[0] * 0.500000000 * (T3[5] +
      T3[14]) + (P1[1] * - 0.500000000 * (T3[9] + T3[15]) + (P1[2] * -
      0.500000000 * (T3[13] + T3[16]) + (P2[0] * - 0.500000000 * (T3[5] +
      T3[14]) + (P2[1] * 0.500000000 * (T3[9] + T3[15]) + (P2[2] * 0.500000000
      * (T3[13] + T3[16]) + T3[17] * (P2[3] - P1[3]))))))) + V2[5] * (P1[0] * -
      0.500000000 * (T3[4] + T3[10]) + (P1[1] * 0.500000000 * (T3[8] + T3[11])
      + (P1[3] * 0.500000000 * (T3[16] + T3[13]) + (P2[0] * 0.500000000 *
      (T3[4] + T3[10]) + (P2[1] * - 0.500000000 * (T3[8] + T3[11]) + (P2[3] * -
      0.500000000 * (T3[16] + T3[13]) + T3[12] * (P1[2] - P2[2])))))))) +
      (P3[2] * (V2[2] * (P1[0] * - 0.500000000 * (T3[5] + T3[14]) + (P1[1] *
      0.500000000 * (T3[9] + T3[15]) + (P1[2] * 0.500000000 * (T3[13] + T3[16])
      + (P2[0] * 0.500000000 * (T3[5] + T3[14]) + (P2[1] * - 0.500000000 *
      (T3[9] + T3[15]) + (P2[2] * - 0.500000000 * (T3[13] + T3[16]) + T3[17] *
      (P1[3] - P2[3]))))))) + V2[5] * (P1[1] * - 0.500000000 * (T3[6] + T3[3])
      + (P1[2] * - 0.500000000 * (T3[10] + T3[4]) + (P1[3] * - 0.500000000 *
      (T3[14] + T3[5]) + (P2[1] * 0.500000000 * (T3[6] + T3[3]) + (P2[2] *
      0.500000000 * (T3[10] + T3[4]) + (P2[3] * 0.500000000 * (T3[14] + T3[5])
      + T3[2] * (P1[0] - P2[0])))))))) + (+0.500000000 * (OM1 * P1[1] * (TMP65
      + TMP67 - TMP64 - TMP66)) + P3[3] * (V2[2] * (P1[0] * 0.500000000 *
      (T3[4] + T3[10]) + (P1[1] * - 0.500000000 * (T3[8] + T3[11]) + (P1[3] * -
      0.500000000 * (T3[16] + T3[13]) + (P2[0] * - 0.500000000 * (T3[4] +
      T3[10]) + (P2[1] * 0.500000000 * (T3[8] + T3[11]) + (P2[3] * 0.500000000
      * (T3[16] + T3[13]) + T3[12] * (P2[2] - P1[2]))))))) + V2[4] * (P1[1] *
      0.500000000 * (T3[6] + T3[3]) + (P1[2] * 0.500000000 * (T3[10] + T3[4]) +
      (P1[3] * 0.500000000 * (T3[14] + T3[5]) + (P2[1] * - 0.500000000 * (T3[6]
      + T3[3]) + (P2[2] * - 0.500000000 * (T3[10] + T3[4]) + (P2[3] * -
      0.500000000 * (T3[14] + T3[5]) + T3[2] * (P2[0] - P1[0])))))))))));
  V1[4] = denom * 2. * cI * (P3[0] * (V2[3] * (P1[0] * 0.500000000 * (T3[5] +
      T3[14]) + (P1[1] * - 0.500000000 * (T3[9] + T3[15]) + (P1[2] * -
      0.500000000 * (T3[13] + T3[16]) + (P2[0] * - 0.500000000 * (T3[5] +
      T3[14]) + (P2[1] * 0.500000000 * (T3[9] + T3[15]) + (P2[2] * 0.500000000
      * (T3[13] + T3[16]) + T3[17] * (P2[3] - P1[3]))))))) + V2[5] * (P1[0] * -
      0.500000000 * (T3[3] + T3[6]) + (P1[2] * 0.500000000 * (T3[11] + T3[8]) +
      (P1[3] * 0.500000000 * (T3[15] + T3[9]) + (P2[0] * 0.500000000 * (T3[3] +
      T3[6]) + (P2[2] * - 0.500000000 * (T3[11] + T3[8]) + (P2[3] * -
      0.500000000 * (T3[15] + T3[9]) + T3[7] * (P1[1] - P2[1])))))))) + (P3[1]
      * (V2[2] * (P1[0] * - 0.500000000 * (T3[5] + T3[14]) + (P1[1] *
      0.500000000 * (T3[9] + T3[15]) + (P1[2] * 0.500000000 * (T3[13] + T3[16])
      + (P2[0] * 0.500000000 * (T3[5] + T3[14]) + (P2[1] * - 0.500000000 *
      (T3[9] + T3[15]) + (P2[2] * - 0.500000000 * (T3[13] + T3[16]) + T3[17] *
      (P1[3] - P2[3]))))))) + V2[5] * (P1[1] * - 0.500000000 * (T3[6] + T3[3])
      + (P1[2] * - 0.500000000 * (T3[10] + T3[4]) + (P1[3] * - 0.500000000 *
      (T3[14] + T3[5]) + (P2[1] * 0.500000000 * (T3[6] + T3[3]) + (P2[2] *
      0.500000000 * (T3[10] + T3[4]) + (P2[3] * 0.500000000 * (T3[14] + T3[5])
      + T3[2] * (P1[0] - P2[0])))))))) + (+0.500000000 * (OM1 * P1[2] * (TMP64
      + TMP66 - TMP65 - TMP67)) + P3[3] * (V2[2] * (P1[0] * 0.500000000 *
      (T3[3] + T3[6]) + (P1[2] * - 0.500000000 * (T3[11] + T3[8]) + (P1[3] * -
      0.500000000 * (T3[15] + T3[9]) + (P2[0] * - 0.500000000 * (T3[3] + T3[6])
      + (P2[2] * 0.500000000 * (T3[11] + T3[8]) + (P2[3] * 0.500000000 *
      (T3[15] + T3[9]) + T3[7] * (P2[1] - P1[1]))))))) + V2[3] * (P1[1] *
      0.500000000 * (T3[6] + T3[3]) + (P1[2] * 0.500000000 * (T3[10] + T3[4]) +
      (P1[3] * 0.500000000 * (T3[14] + T3[5]) + (P2[1] * - 0.500000000 * (T3[6]
      + T3[3]) + (P2[2] * - 0.500000000 * (T3[10] + T3[4]) + (P2[3] * -
      0.500000000 * (T3[14] + T3[5]) + T3[2] * (P2[0] - P1[0])))))))))));
  V1[5] = denom * - 2. * cI * (P3[0] * (V2[3] * (P1[0] * 0.500000000 * (T3[4] +
      T3[10]) + (P1[1] * - 0.500000000 * (T3[8] + T3[11]) + (P1[3] * -
      0.500000000 * (T3[16] + T3[13]) + (P2[0] * - 0.500000000 * (T3[4] +
      T3[10]) + (P2[1] * 0.500000000 * (T3[8] + T3[11]) + (P2[3] * 0.500000000
      * (T3[16] + T3[13]) + T3[12] * (P2[2] - P1[2]))))))) + V2[4] * (P1[0] * -
      0.500000000 * (T3[3] + T3[6]) + (P1[2] * 0.500000000 * (T3[11] + T3[8]) +
      (P1[3] * 0.500000000 * (T3[15] + T3[9]) + (P2[0] * 0.500000000 * (T3[3] +
      T3[6]) + (P2[2] * - 0.500000000 * (T3[11] + T3[8]) + (P2[3] * -
      0.500000000 * (T3[15] + T3[9]) + T3[7] * (P1[1] - P2[1])))))))) + (P3[1]
      * (V2[2] * (P1[0] * - 0.500000000 * (T3[4] + T3[10]) + (P1[1] *
      0.500000000 * (T3[8] + T3[11]) + (P1[3] * 0.500000000 * (T3[16] + T3[13])
      + (P2[0] * 0.500000000 * (T3[4] + T3[10]) + (P2[1] * - 0.500000000 *
      (T3[8] + T3[11]) + (P2[3] * - 0.500000000 * (T3[16] + T3[13]) + T3[12] *
      (P1[2] - P2[2]))))))) + V2[4] * (P1[1] * - 0.500000000 * (T3[6] + T3[3])
      + (P1[2] * - 0.500000000 * (T3[10] + T3[4]) + (P1[3] * - 0.500000000 *
      (T3[14] + T3[5]) + (P2[1] * 0.500000000 * (T3[6] + T3[3]) + (P2[2] *
      0.500000000 * (T3[10] + T3[4]) + (P2[3] * 0.500000000 * (T3[14] + T3[5])
      + T3[2] * (P1[0] - P2[0])))))))) + (+0.500000000 * (OM1 * P1[3] * (TMP65
      + TMP67 - TMP64 - TMP66)) + P3[2] * (V2[2] * (P1[0] * 0.500000000 *
      (T3[3] + T3[6]) + (P1[2] * - 0.500000000 * (T3[11] + T3[8]) + (P1[3] * -
      0.500000000 * (T3[15] + T3[9]) + (P2[0] * - 0.500000000 * (T3[3] + T3[6])
      + (P2[2] * 0.500000000 * (T3[11] + T3[8]) + (P2[3] * 0.500000000 *
      (T3[15] + T3[9]) + T3[7] * (P2[1] - P1[1]))))))) + V2[3] * (P1[1] *
      0.500000000 * (T3[6] + T3[3]) + (P1[2] * 0.500000000 * (T3[10] + T3[4]) +
      (P1[3] * 0.500000000 * (T3[14] + T3[5]) + (P2[1] * - 0.500000000 * (T3[6]
      + T3[3]) + (P2[2] * - 0.500000000 * (T3[10] + T3[4]) + (P2[3] * -
      0.500000000 * (T3[14] + T3[5]) + T3[2] * (P2[0] - P1[0])))))))))));
}


void VVT10_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  double P3[4]; 
  complex<double> TMP14; 
  complex<double> TMP9; 
  complex<double> TMP25; 
  complex<double> TMP11; 
  double P2[4]; 
  complex<double> TMP15; 
  complex<double> TMP24; 
  complex<double> TMP49; 
  complex<double> TMP12; 
  double P1[4]; 
  complex<double> TMP45; 
  complex<double> denom; 
  complex<double> TMP48; 
  complex<double> TMP44; 
  complex<double> TMP63; 
  double OM1; 
  OM1 = 0.; 
  if (M1 != 0.)
    OM1 = 1./pow(M1, 2); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  P3[0] = T3[0].real(); 
  P3[1] = T3[1].real(); 
  P3[2] = T3[1].imag(); 
  P3[3] = T3[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP24 = (P1[0] * - 1. * (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] *
      T3[15] - P2[0] * T3[3]) + (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] +
      P2[3] * T3[16] - P2[0] * T3[4]) + P1[3] * (P2[1] * T3[9] + P2[2] * T3[13]
      + P2[3] * T3[17] - P2[0] * T3[5]))));
  TMP25 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  TMP63 = (P1[0] * (P1[1] * - 1. * (T3[3] + T3[6]) + (P1[2] * - 1. * (T3[4] +
      T3[10]) + (P1[3] * - 1. * (T3[5] + T3[14]) + P1[0] * T3[2]))) + (P1[1] *
      (P1[2] * (T3[8] + T3[11]) + (P1[3] * (T3[9] + T3[15]) + P1[1] * T3[7])) +
      (P1[2] * (P1[3] * (T3[13] + T3[16]) + P1[2] * T3[12]) + P1[3] * P1[3] *
      T3[17])));
  TMP44 = (P1[0] * (P1[1] * - 1. * (T3[6] + T3[3]) + (P1[2] * - 1. * (T3[10] +
      T3[4]) + (P1[3] * - 1. * (T3[14] + T3[5]) + P1[0] * T3[2]))) + (P1[1] *
      (P1[2] * (T3[11] + T3[8]) + (P1[3] * (T3[15] + T3[9]) + P1[1] * T3[7])) +
      (P1[2] * (P1[3] * (T3[16] + T3[13]) + P1[2] * T3[12]) + P1[3] * P1[3] *
      T3[17])));
  TMP45 = (P2[0] * (P2[1] * - 1. * (T3[3] + T3[6]) + (P2[2] * - 1. * (T3[4] +
      T3[10]) + (P2[3] * - 1. * (T3[5] + T3[14]) + P2[0] * T3[2]))) + (P2[1] *
      (P2[2] * (T3[8] + T3[11]) + (P2[3] * (T3[9] + T3[15]) + P2[1] * T3[7])) +
      (P2[2] * (P2[3] * (T3[13] + T3[16]) + P2[2] * T3[12]) + P2[3] * P2[3] *
      T3[17])));
  TMP48 = (P2[0] * - 1. * (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] -
      V2[2] * T3[2]) + (P2[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] *
      T3[15] - V2[2] * T3[3]) + (P2[2] * (V2[3] * T3[8] + V2[4] * T3[12] +
      V2[5] * T3[16] - V2[2] * T3[4]) + P2[3] * (V2[3] * T3[9] + V2[4] * T3[13]
      + V2[5] * T3[17] - V2[2] * T3[5]))));
  TMP49 = (P2[0] * - 1. * (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] -
      V2[2] * T3[2]) + (P2[1] * (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9]
      - V2[2] * T3[6]) + (P2[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] *
      T3[13] - V2[2] * T3[10]) + P2[3] * (V2[3] * T3[15] + V2[4] * T3[16] +
      V2[5] * T3[17] - V2[2] * T3[14]))));
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * 0.500000000 * (TMP15 * (TMP12 * (P1[0] * (OM1 * (-cI *
      (TMP63) + cI * (TMP44)) + 2. * cI * (T3[2])) + (P1[1] * - 1. * (+cI *
      (T3[3] + T3[6])) + (P1[2] * - 1. * (+cI * (T3[4] + T3[10])) - P1[3] *
      (+cI * (T3[5] + T3[14]))))) + (V2[2] * 2. * (-cI * (TMP24 + TMP25) + cI *
      (TMP44 + TMP45)) + P3[0] * (+cI * (TMP48 + TMP49)))) + (TMP9 * (TMP11 *
      (P1[0] * (OM1 * (-cI * (TMP44) + cI * (TMP63)) - 2. * cI * (T3[2])) +
      (P1[1] * (+cI * (T3[3] + T3[6])) + (P1[2] * (+cI * (T3[4] + T3[10])) +
      P1[3] * (+cI * (T3[5] + T3[14]))))) + (P2[0] * 2. * (-cI * (TMP44 +
      TMP45) + cI * (TMP24 + TMP25)) - 2. * cI * (P3[0] * TMP45))) + (P2[0] *
      (TMP14 * - 1. * (+cI * (TMP48 + TMP49)) - 2. * cI * (TMP12 * TMP44)) + 2.
      * (V2[2] * (+cI * (TMP11 * TMP44 + TMP14 * TMP45))))));
  V1[3] = denom * 0.500000000 * (TMP15 * (TMP12 * (P1[1] * (OM1 * (-cI *
      (TMP63) + cI * (TMP44)) - 2. * cI * (T3[7])) + (P1[0] * (+cI * (T3[6] +
      T3[3])) + (P1[2] * - 1. * (+cI * (T3[8] + T3[11])) - P1[3] * (+cI *
      (T3[9] + T3[15]))))) + (V2[3] * 2. * (-cI * (TMP24 + TMP25) + cI * (TMP44
      + TMP45)) + P3[1] * (+cI * (TMP48 + TMP49)))) + (TMP9 * (TMP11 * (P1[1] *
      (OM1 * (-cI * (TMP44) + cI * (TMP63)) + 2. * cI * (T3[7])) + (P1[0] * -
      1. * (+cI * (T3[6] + T3[3])) + (P1[2] * (+cI * (T3[8] + T3[11])) + P1[3]
      * (+cI * (T3[9] + T3[15]))))) + (P2[1] * 2. * (-cI * (TMP44 + TMP45) + cI
      * (TMP24 + TMP25)) - 2. * cI * (P3[1] * TMP45))) + (P2[1] * (TMP14 * - 1.
      * (+cI * (TMP48 + TMP49)) - 2. * cI * (TMP12 * TMP44)) + 2. * (V2[3] *
      (+cI * (TMP11 * TMP44 + TMP14 * TMP45))))));
  V1[4] = denom * 0.500000000 * (TMP15 * (TMP12 * (P1[2] * (OM1 * (-cI *
      (TMP63) + cI * (TMP44)) - 2. * cI * (T3[12])) + (P1[0] * (+cI * (T3[10] +
      T3[4])) + (P1[1] * - 1. * (+cI * (T3[11] + T3[8])) - P1[3] * (+cI *
      (T3[13] + T3[16]))))) + (V2[4] * 2. * (-cI * (TMP24 + TMP25) + cI *
      (TMP44 + TMP45)) + P3[2] * (+cI * (TMP48 + TMP49)))) + (TMP9 * (TMP11 *
      (P1[2] * (OM1 * (-cI * (TMP44) + cI * (TMP63)) + 2. * cI * (T3[12])) +
      (P1[0] * - 1. * (+cI * (T3[10] + T3[4])) + (P1[1] * (+cI * (T3[11] +
      T3[8])) + P1[3] * (+cI * (T3[13] + T3[16]))))) + (P2[2] * 2. * (-cI *
      (TMP44 + TMP45) + cI * (TMP24 + TMP25)) - 2. * cI * (P3[2] * TMP45))) +
      (P2[2] * (TMP14 * - 1. * (+cI * (TMP48 + TMP49)) - 2. * cI * (TMP12 *
      TMP44)) + 2. * (V2[4] * (+cI * (TMP11 * TMP44 + TMP14 * TMP45))))));
  V1[5] = denom * 0.500000000 * (TMP15 * (TMP12 * (P1[3] * (OM1 * (-cI *
      (TMP63) + cI * (TMP44)) - 2. * cI * (T3[17])) + (P1[0] * (+cI * (T3[14] +
      T3[5])) + (P1[1] * - 1. * (+cI * (T3[15] + T3[9])) - P1[2] * (+cI *
      (T3[16] + T3[13]))))) + (V2[5] * 2. * (-cI * (TMP24 + TMP25) + cI *
      (TMP44 + TMP45)) + P3[3] * (+cI * (TMP48 + TMP49)))) + (TMP9 * (TMP11 *
      (P1[3] * (OM1 * (-cI * (TMP44) + cI * (TMP63)) + 2. * cI * (T3[17])) +
      (P1[0] * - 1. * (+cI * (T3[14] + T3[5])) + (P1[1] * (+cI * (T3[15] +
      T3[9])) + P1[2] * (+cI * (T3[16] + T3[13]))))) + (P2[3] * 2. * (-cI *
      (TMP44 + TMP45) + cI * (TMP24 + TMP25)) - 2. * cI * (P3[3] * TMP45))) +
      (P2[3] * (TMP14 * - 1. * (+cI * (TMP48 + TMP49)) - 2. * cI * (TMP12 *
      TMP44)) + 2. * (V2[5] * (+cI * (TMP11 * TMP44 + TMP14 * TMP45))))));
}

void VVT10_11_12_13_2_3_6_7_8_9_1(complex<double> V2[], complex<double> T3[],
    complex<double> COUP1, complex<double> COUP2, complex<double> COUP3,
    complex<double> COUP4, complex<double> COUP5, complex<double> COUP6,
    complex<double> COUP7, complex<double> COUP8, complex<double> COUP9,
    complex<double> COUP10, double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
//   double P3[4];
  complex<double> Vtmp[6]; 
//   double P2[4];
//   double P1[4];
  complex<double> denom; 
  int i; 
//   double OM1;
  VVT10_1(V2, T3, COUP1, M1, W1, V1); 
  VVT11_1(V2, T3, COUP2, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
  VVT12_1(V2, T3, COUP3, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
  VVT13_1(V2, T3, COUP4, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
  VVT2_1(V2, T3, COUP5, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
  VVT3_1(V2, T3, COUP6, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
  VVT6_1(V2, T3, COUP7, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
  VVT7_1(V2, T3, COUP8, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
  VVT8_1(V2, T3, COUP9, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
  VVT9_1(V2, T3, COUP10, M1, W1, Vtmp); 
  i = 2; 
  while (i < 6)
  {
    V1[i] = V1[i] + Vtmp[i]; 
    i++; 
  }
}

void FFV4_0(complex<double> F1[], complex<double> F2[], complex<double> V3[],
    complex<double> COUP, complex<double> & vertex)
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP2; 
  complex<double> TMP0; 
  TMP0 = (F1[2] * (F2[4] * (V3[2] + V3[5]) + F2[5] * (V3[3] + cI * (V3[4]))) +
      F1[3] * (F2[4] * (V3[3] - cI * (V3[4])) + F2[5] * (V3[2] - V3[5])));
  TMP2 = (F1[4] * (F2[2] * (V3[2] - V3[5]) - F2[3] * (V3[3] + cI * (V3[4]))) +
      F1[5] * (F2[2] * (+cI * (V3[4]) - V3[3]) + F2[3] * (V3[2] + V3[5])));
  vertex = COUP * - 1. * (+cI * (TMP0) + 2. * cI * (TMP2)); 
}


void VVT6_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP12; 
  complex<double> TMP61; 
  double P1[4]; 
  complex<double> TMP36; 
  double P2[4]; 
  double P3[4]; 
  complex<double> denom; 
  complex<double> TMP40; 
  complex<double> TMP14; 
  complex<double> TMP34; 
  double OM1; 
  complex<double> TMP62; 
  complex<double> TMP38; 
  OM1 = 0.; 
  if (M1 != 0.)
    OM1 = 1./pow(M1, 2); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  P3[0] = T3[0].real(); 
  P3[1] = T3[1].real(); 
  P3[2] = T3[1].imag(); 
  P3[3] = T3[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP40 = -1. * (P2[0] * (P1[0] * (P3[1] * (V2[4] * T3[14] - V2[5] * T3[10]) +
      (P3[2] * (V2[5] * T3[6] - V2[3] * T3[14]) + P3[3] * (V2[3] * T3[10] -
      V2[4] * T3[6]))) + (P1[1] * (P3[0] * (V2[5] * T3[10] - V2[4] * T3[14]) +
      (P3[2] * (V2[2] * T3[14] - V2[5] * T3[2]) + P3[3] * (V2[4] * T3[2] -
      V2[2] * T3[10]))) + (P1[2] * (P3[0] * (V2[3] * T3[14] - V2[5] * T3[6]) +
      (P3[1] * (V2[5] * T3[2] - V2[2] * T3[14]) + P3[3] * (V2[2] * T3[6] -
      V2[3] * T3[2]))) + P1[3] * (P3[0] * (V2[4] * T3[6] - V2[3] * T3[10]) +
      (P3[1] * (V2[2] * T3[10] - V2[4] * T3[2]) + P3[2] * (V2[3] * T3[2] -
      V2[2] * T3[6])))))) + (P2[1] * (P1[0] * (P3[1] * (V2[5] * T3[11] - V2[4]
      * T3[15]) + (P3[2] * (V2[3] * T3[15] - V2[5] * T3[7]) + P3[3] * (V2[4] *
      T3[7] - V2[3] * T3[11]))) + (P1[1] * (P3[0] * (V2[4] * T3[15] - V2[5] *
      T3[11]) + (P3[2] * (V2[5] * T3[3] - V2[2] * T3[15]) + P3[3] * (V2[2] *
      T3[11] - V2[4] * T3[3]))) + (P1[2] * (P3[0] * (V2[5] * T3[7] - V2[3] *
      T3[15]) + (P3[1] * (V2[2] * T3[15] - V2[5] * T3[3]) + P3[3] * (V2[3] *
      T3[3] - V2[2] * T3[7]))) + P1[3] * (P3[0] * (V2[3] * T3[11] - V2[4] *
      T3[7]) + (P3[1] * (V2[4] * T3[3] - V2[2] * T3[11]) + P3[2] * (V2[2] *
      T3[7] - V2[3] * T3[3])))))) + (P2[2] * (P1[0] * (P3[1] * (V2[5] * T3[12]
      - V2[4] * T3[16]) + (P3[2] * (V2[3] * T3[16] - V2[5] * T3[8]) + P3[3] *
      (V2[4] * T3[8] - V2[3] * T3[12]))) + (P1[1] * (P3[0] * (V2[4] * T3[16] -
      V2[5] * T3[12]) + (P3[2] * (V2[5] * T3[4] - V2[2] * T3[16]) + P3[3] *
      (V2[2] * T3[12] - V2[4] * T3[4]))) + (P1[2] * (P3[0] * (V2[5] * T3[8] -
      V2[3] * T3[16]) + (P3[1] * (V2[2] * T3[16] - V2[5] * T3[4]) + P3[3] *
      (V2[3] * T3[4] - V2[2] * T3[8]))) + P1[3] * (P3[0] * (V2[3] * T3[12] -
      V2[4] * T3[8]) + (P3[1] * (V2[4] * T3[4] - V2[2] * T3[12]) + P3[2] *
      (V2[2] * T3[8] - V2[3] * T3[4])))))) + P2[3] * (P1[0] * (P3[1] * (V2[5] *
      T3[13] - V2[4] * T3[17]) + (P3[2] * (V2[3] * T3[17] - V2[5] * T3[9]) +
      P3[3] * (V2[4] * T3[9] - V2[3] * T3[13]))) + (P1[1] * (P3[0] * (V2[4] *
      T3[17] - V2[5] * T3[13]) + (P3[2] * (V2[5] * T3[5] - V2[2] * T3[17]) +
      P3[3] * (V2[2] * T3[13] - V2[4] * T3[5]))) + (P1[2] * (P3[0] * (V2[5] *
      T3[9] - V2[3] * T3[17]) + (P3[1] * (V2[2] * T3[17] - V2[5] * T3[5]) +
      P3[3] * (V2[3] * T3[5] - V2[2] * T3[9]))) + P1[3] * (P3[0] * (V2[3] *
      T3[13] - V2[4] * T3[9]) + (P3[1] * (V2[4] * T3[5] - V2[2] * T3[13]) +
      P3[2] * (V2[2] * T3[9] - V2[3] * T3[5])))))))));
  TMP61 = -1. * (P1[0] * (P1[1] * (P2[2] * (P3[3] * - 1. * (T3[2] + T3[7]) +
      (P3[0] * T3[5] + P3[1] * T3[9])) + (P2[3] * (P3[2] * (T3[2] + T3[7]) +
      (-P3[0] * T3[4] - P3[1] * T3[8])) + (P2[0] * (P3[3] * T3[4] - P3[2] *
      T3[5]) + P2[1] * (P3[3] * T3[8] - P3[2] * T3[9])))) + (P1[2] * (P2[1] *
      (P3[3] * (T3[2] + T3[12]) + (-P3[0] * T3[5] - P3[2] * T3[13])) + (P2[3] *
      (P3[1] * - 1. * (T3[2] + T3[12]) + (P3[0] * T3[3] + P3[2] * T3[11])) +
      (P2[0] * (P3[1] * T3[5] - P3[3] * T3[3]) + P2[2] * (P3[1] * T3[13] -
      P3[3] * T3[11])))) + (P1[3] * (P2[1] * (P3[2] * - 1. * (T3[2] + T3[17]) +
      (P3[0] * T3[4] + P3[3] * T3[16])) + (P2[2] * (P3[1] * (T3[2] + T3[17]) +
      (-P3[0] * T3[3] - P3[3] * T3[15])) + (P2[0] * (P3[2] * T3[3] - P3[1] *
      T3[4]) + P2[3] * (P3[2] * T3[15] - P3[1] * T3[16])))) + P1[0] * (P2[1] *
      (P3[2] * T3[5] - P3[3] * T3[4]) + (P2[2] * (P3[3] * T3[3] - P3[1] *
      T3[5]) + P2[3] * (P3[1] * T3[4] - P3[2] * T3[3])))))) + (P1[1] * (P1[2] *
      (P2[0] * (P3[3] * (T3[7] - T3[12]) + (P3[2] * T3[13] - P3[1] * T3[9])) +
      (P2[3] * (P3[0] * (T3[12] - T3[7]) + (P3[1] * T3[6] - P3[2] * T3[10])) +
      (P2[1] * (P3[0] * T3[9] - P3[3] * T3[6]) + P2[2] * (P3[3] * T3[10] -
      P3[0] * T3[13])))) + (P1[3] * (P2[0] * (P3[2] * (T3[17] - T3[7]) + (P3[1]
      * T3[8] - P3[3] * T3[16])) + (P2[2] * (P3[0] * (T3[7] - T3[17]) + (P3[3]
      * T3[14] - P3[1] * T3[6])) + (P2[1] * (P3[2] * T3[6] - P3[0] * T3[8]) +
      P2[3] * (P3[0] * T3[16] - P3[2] * T3[14])))) + P1[1] * (P2[0] * (P3[2] *
      T3[9] - P3[3] * T3[8]) + (P2[2] * (P3[3] * T3[6] - P3[0] * T3[9]) + P2[3]
      * (P3[0] * T3[8] - P3[2] * T3[6]))))) + (P1[2] * (P1[3] * (P2[0] * (P3[1]
      * (T3[12] - T3[17]) + (P3[3] * T3[15] - P3[2] * T3[11])) + (P2[1] *
      (P3[0] * (T3[17] - T3[12]) + (P3[2] * T3[10] - P3[3] * T3[14])) + (P2[2]
      * (P3[0] * T3[11] - P3[1] * T3[10]) + P2[3] * (P3[1] * T3[14] - P3[0] *
      T3[15])))) + P1[2] * (P2[0] * (P3[3] * T3[11] - P3[1] * T3[13]) + (P2[1]
      * (P3[0] * T3[13] - P3[3] * T3[10]) + P2[3] * (P3[1] * T3[10] - P3[0] *
      T3[11])))) + P1[3] * P1[3] * (P2[0] * (P3[1] * T3[16] - P3[2] * T3[15]) +
      (P2[1] * (P3[2] * T3[14] - P3[0] * T3[16]) + P2[2] * (P3[0] * T3[15] -
      P3[1] * T3[14]))))));
  TMP62 = -1. * (P1[0] * (P1[1] * (P2[2] * (P3[3] * - 1. * (T3[2] + T3[7]) +
      (P3[0] * T3[14] + P3[1] * T3[15])) + (P2[3] * (P3[2] * (T3[2] + T3[7]) +
      (-P3[0] * T3[10] - P3[1] * T3[11])) + (P2[0] * (P3[3] * T3[10] - P3[2] *
      T3[14]) + P2[1] * (P3[3] * T3[11] - P3[2] * T3[15])))) + (P1[2] * (P2[1]
      * (P3[3] * (T3[2] + T3[12]) + (-P3[0] * T3[14] - P3[2] * T3[16])) +
      (P2[3] * (P3[1] * - 1. * (T3[2] + T3[12]) + (P3[0] * T3[6] + P3[2] *
      T3[8])) + (P2[0] * (P3[1] * T3[14] - P3[3] * T3[6]) + P2[2] * (P3[1] *
      T3[16] - P3[3] * T3[8])))) + (P1[3] * (P2[1] * (P3[2] * - 1. * (T3[2] +
      T3[17]) + (P3[0] * T3[10] + P3[3] * T3[13])) + (P2[2] * (P3[1] * (T3[2] +
      T3[17]) + (-P3[0] * T3[6] - P3[3] * T3[9])) + (P2[0] * (P3[2] * T3[6] -
      P3[1] * T3[10]) + P2[3] * (P3[2] * T3[9] - P3[1] * T3[13])))) + P1[0] *
      (P2[1] * (P3[2] * T3[14] - P3[3] * T3[10]) + (P2[2] * (P3[3] * T3[6] -
      P3[1] * T3[14]) + P2[3] * (P3[1] * T3[10] - P3[2] * T3[6])))))) + (P1[1]
      * (P1[2] * (P2[0] * (P3[3] * (T3[7] - T3[12]) + (P3[2] * T3[16] - P3[1] *
      T3[15])) + (P2[3] * (P3[0] * (T3[12] - T3[7]) + (P3[1] * T3[3] - P3[2] *
      T3[4])) + (P2[1] * (P3[0] * T3[15] - P3[3] * T3[3]) + P2[2] * (P3[3] *
      T3[4] - P3[0] * T3[16])))) + (P1[3] * (P2[0] * (P3[2] * (T3[17] - T3[7])
      + (P3[1] * T3[11] - P3[3] * T3[13])) + (P2[2] * (P3[0] * (T3[7] - T3[17])
      + (P3[3] * T3[5] - P3[1] * T3[3])) + (P2[1] * (P3[2] * T3[3] - P3[0] *
      T3[11]) + P2[3] * (P3[0] * T3[13] - P3[2] * T3[5])))) + P1[1] * (P2[0] *
      (P3[2] * T3[15] - P3[3] * T3[11]) + (P2[2] * (P3[3] * T3[3] - P3[0] *
      T3[15]) + P2[3] * (P3[0] * T3[11] - P3[2] * T3[3]))))) + (P1[2] * (P1[3]
      * (P2[0] * (P3[1] * (T3[12] - T3[17]) + (P3[3] * T3[9] - P3[2] * T3[8]))
      + (P2[1] * (P3[0] * (T3[17] - T3[12]) + (P3[2] * T3[4] - P3[3] * T3[5]))
      + (P2[2] * (P3[0] * T3[8] - P3[1] * T3[4]) + P2[3] * (P3[1] * T3[5] -
      P3[0] * T3[9])))) + P1[2] * (P2[0] * (P3[3] * T3[8] - P3[1] * T3[16]) +
      (P2[1] * (P3[0] * T3[16] - P3[3] * T3[4]) + P2[3] * (P3[1] * T3[4] -
      P3[0] * T3[8])))) + P1[3] * P1[3] * (P2[0] * (P3[1] * T3[13] - P3[2] *
      T3[9]) + (P2[1] * (P3[2] * T3[5] - P3[0] * T3[13]) + P2[2] * (P3[0] *
      T3[9] - P3[1] * T3[5]))))));
  TMP38 = -1. * (P1[0] * (P2[0] * (P3[1] * (V2[4] * T3[14] - V2[5] * T3[10]) +
      (P3[2] * (V2[5] * T3[6] - V2[3] * T3[14]) + P3[3] * (V2[3] * T3[10] -
      V2[4] * T3[6]))) + (P2[1] * (P3[0] * (V2[5] * T3[10] - V2[4] * T3[14]) +
      (P3[2] * (V2[2] * T3[14] - V2[5] * T3[2]) + P3[3] * (V2[4] * T3[2] -
      V2[2] * T3[10]))) + (P2[2] * (P3[0] * (V2[3] * T3[14] - V2[5] * T3[6]) +
      (P3[1] * (V2[5] * T3[2] - V2[2] * T3[14]) + P3[3] * (V2[2] * T3[6] -
      V2[3] * T3[2]))) + P2[3] * (P3[0] * (V2[4] * T3[6] - V2[3] * T3[10]) +
      (P3[1] * (V2[2] * T3[10] - V2[4] * T3[2]) + P3[2] * (V2[3] * T3[2] -
      V2[2] * T3[6])))))) + (P1[1] * (P2[0] * (P3[1] * (V2[5] * T3[11] - V2[4]
      * T3[15]) + (P3[2] * (V2[3] * T3[15] - V2[5] * T3[7]) + P3[3] * (V2[4] *
      T3[7] - V2[3] * T3[11]))) + (P2[1] * (P3[0] * (V2[4] * T3[15] - V2[5] *
      T3[11]) + (P3[2] * (V2[5] * T3[3] - V2[2] * T3[15]) + P3[3] * (V2[2] *
      T3[11] - V2[4] * T3[3]))) + (P2[2] * (P3[0] * (V2[5] * T3[7] - V2[3] *
      T3[15]) + (P3[1] * (V2[2] * T3[15] - V2[5] * T3[3]) + P3[3] * (V2[3] *
      T3[3] - V2[2] * T3[7]))) + P2[3] * (P3[0] * (V2[3] * T3[11] - V2[4] *
      T3[7]) + (P3[1] * (V2[4] * T3[3] - V2[2] * T3[11]) + P3[2] * (V2[2] *
      T3[7] - V2[3] * T3[3])))))) + (P1[2] * (P2[0] * (P3[1] * (V2[5] * T3[12]
      - V2[4] * T3[16]) + (P3[2] * (V2[3] * T3[16] - V2[5] * T3[8]) + P3[3] *
      (V2[4] * T3[8] - V2[3] * T3[12]))) + (P2[1] * (P3[0] * (V2[4] * T3[16] -
      V2[5] * T3[12]) + (P3[2] * (V2[5] * T3[4] - V2[2] * T3[16]) + P3[3] *
      (V2[2] * T3[12] - V2[4] * T3[4]))) + (P2[2] * (P3[0] * (V2[5] * T3[8] -
      V2[3] * T3[16]) + (P3[1] * (V2[2] * T3[16] - V2[5] * T3[4]) + P3[3] *
      (V2[3] * T3[4] - V2[2] * T3[8]))) + P2[3] * (P3[0] * (V2[3] * T3[12] -
      V2[4] * T3[8]) + (P3[1] * (V2[4] * T3[4] - V2[2] * T3[12]) + P3[2] *
      (V2[2] * T3[8] - V2[3] * T3[4])))))) + P1[3] * (P2[0] * (P3[1] * (V2[5] *
      T3[13] - V2[4] * T3[17]) + (P3[2] * (V2[3] * T3[17] - V2[5] * T3[9]) +
      P3[3] * (V2[4] * T3[9] - V2[3] * T3[13]))) + (P2[1] * (P3[0] * (V2[4] *
      T3[17] - V2[5] * T3[13]) + (P3[2] * (V2[5] * T3[5] - V2[2] * T3[17]) +
      P3[3] * (V2[2] * T3[13] - V2[4] * T3[5]))) + (P2[2] * (P3[0] * (V2[5] *
      T3[9] - V2[3] * T3[17]) + (P3[1] * (V2[2] * T3[17] - V2[5] * T3[5]) +
      P3[3] * (V2[3] * T3[5] - V2[2] * T3[9]))) + P2[3] * (P3[0] * (V2[3] *
      T3[13] - V2[4] * T3[9]) + (P3[1] * (V2[4] * T3[5] - V2[2] * T3[13]) +
      P3[2] * (V2[2] * T3[9] - V2[3] * T3[5])))))))));
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  TMP36 = -1. * (P2[0] * (P1[0] * (P3[1] * (V2[4] * T3[5] - V2[5] * T3[4]) +
      (P3[2] * (V2[5] * T3[3] - V2[3] * T3[5]) + P3[3] * (V2[3] * T3[4] - V2[4]
      * T3[3]))) + (P1[1] * (P3[0] * (V2[5] * T3[4] - V2[4] * T3[5]) + (P3[2] *
      (V2[2] * T3[5] - V2[5] * T3[2]) + P3[3] * (V2[4] * T3[2] - V2[2] *
      T3[4]))) + (P1[2] * (P3[0] * (V2[3] * T3[5] - V2[5] * T3[3]) + (P3[1] *
      (V2[5] * T3[2] - V2[2] * T3[5]) + P3[3] * (V2[2] * T3[3] - V2[3] *
      T3[2]))) + P1[3] * (P3[0] * (V2[4] * T3[3] - V2[3] * T3[4]) + (P3[1] *
      (V2[2] * T3[4] - V2[4] * T3[2]) + P3[2] * (V2[3] * T3[2] - V2[2] *
      T3[3])))))) + (P2[1] * (P1[0] * (P3[1] * (V2[5] * T3[8] - V2[4] * T3[9])
      + (P3[2] * (V2[3] * T3[9] - V2[5] * T3[7]) + P3[3] * (V2[4] * T3[7] -
      V2[3] * T3[8]))) + (P1[1] * (P3[0] * (V2[4] * T3[9] - V2[5] * T3[8]) +
      (P3[2] * (V2[5] * T3[6] - V2[2] * T3[9]) + P3[3] * (V2[2] * T3[8] - V2[4]
      * T3[6]))) + (P1[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[9]) + (P3[1] *
      (V2[2] * T3[9] - V2[5] * T3[6]) + P3[3] * (V2[3] * T3[6] - V2[2] *
      T3[7]))) + P1[3] * (P3[0] * (V2[3] * T3[8] - V2[4] * T3[7]) + (P3[1] *
      (V2[4] * T3[6] - V2[2] * T3[8]) + P3[2] * (V2[2] * T3[7] - V2[3] *
      T3[6])))))) + (P2[2] * (P1[0] * (P3[1] * (V2[5] * T3[12] - V2[4] *
      T3[13]) + (P3[2] * (V2[3] * T3[13] - V2[5] * T3[11]) + P3[3] * (V2[4] *
      T3[11] - V2[3] * T3[12]))) + (P1[1] * (P3[0] * (V2[4] * T3[13] - V2[5] *
      T3[12]) + (P3[2] * (V2[5] * T3[10] - V2[2] * T3[13]) + P3[3] * (V2[2] *
      T3[12] - V2[4] * T3[10]))) + (P1[2] * (P3[0] * (V2[5] * T3[11] - V2[3] *
      T3[13]) + (P3[1] * (V2[2] * T3[13] - V2[5] * T3[10]) + P3[3] * (V2[3] *
      T3[10] - V2[2] * T3[11]))) + P1[3] * (P3[0] * (V2[3] * T3[12] - V2[4] *
      T3[11]) + (P3[1] * (V2[4] * T3[10] - V2[2] * T3[12]) + P3[2] * (V2[2] *
      T3[11] - V2[3] * T3[10])))))) + P2[3] * (P1[0] * (P3[1] * (V2[5] * T3[16]
      - V2[4] * T3[17]) + (P3[2] * (V2[3] * T3[17] - V2[5] * T3[15]) + P3[3] *
      (V2[4] * T3[15] - V2[3] * T3[16]))) + (P1[1] * (P3[0] * (V2[4] * T3[17] -
      V2[5] * T3[16]) + (P3[2] * (V2[5] * T3[14] - V2[2] * T3[17]) + P3[3] *
      (V2[2] * T3[16] - V2[4] * T3[14]))) + (P1[2] * (P3[0] * (V2[5] * T3[15] -
      V2[3] * T3[17]) + (P3[1] * (V2[2] * T3[17] - V2[5] * T3[14]) + P3[3] *
      (V2[3] * T3[14] - V2[2] * T3[15]))) + P1[3] * (P3[0] * (V2[3] * T3[16] -
      V2[4] * T3[15]) + (P3[1] * (V2[4] * T3[14] - V2[2] * T3[16]) + P3[2] *
      (V2[2] * T3[15] - V2[3] * T3[14])))))))));
  TMP34 = -1. * (P1[0] * (P2[0] * (P3[1] * (V2[4] * T3[5] - V2[5] * T3[4]) +
      (P3[2] * (V2[5] * T3[3] - V2[3] * T3[5]) + P3[3] * (V2[3] * T3[4] - V2[4]
      * T3[3]))) + (P2[1] * (P3[0] * (V2[5] * T3[4] - V2[4] * T3[5]) + (P3[2] *
      (V2[2] * T3[5] - V2[5] * T3[2]) + P3[3] * (V2[4] * T3[2] - V2[2] *
      T3[4]))) + (P2[2] * (P3[0] * (V2[3] * T3[5] - V2[5] * T3[3]) + (P3[1] *
      (V2[5] * T3[2] - V2[2] * T3[5]) + P3[3] * (V2[2] * T3[3] - V2[3] *
      T3[2]))) + P2[3] * (P3[0] * (V2[4] * T3[3] - V2[3] * T3[4]) + (P3[1] *
      (V2[2] * T3[4] - V2[4] * T3[2]) + P3[2] * (V2[3] * T3[2] - V2[2] *
      T3[3])))))) + (P1[1] * (P2[0] * (P3[1] * (V2[5] * T3[8] - V2[4] * T3[9])
      + (P3[2] * (V2[3] * T3[9] - V2[5] * T3[7]) + P3[3] * (V2[4] * T3[7] -
      V2[3] * T3[8]))) + (P2[1] * (P3[0] * (V2[4] * T3[9] - V2[5] * T3[8]) +
      (P3[2] * (V2[5] * T3[6] - V2[2] * T3[9]) + P3[3] * (V2[2] * T3[8] - V2[4]
      * T3[6]))) + (P2[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[9]) + (P3[1] *
      (V2[2] * T3[9] - V2[5] * T3[6]) + P3[3] * (V2[3] * T3[6] - V2[2] *
      T3[7]))) + P2[3] * (P3[0] * (V2[3] * T3[8] - V2[4] * T3[7]) + (P3[1] *
      (V2[4] * T3[6] - V2[2] * T3[8]) + P3[2] * (V2[2] * T3[7] - V2[3] *
      T3[6])))))) + (P1[2] * (P2[0] * (P3[1] * (V2[5] * T3[12] - V2[4] *
      T3[13]) + (P3[2] * (V2[3] * T3[13] - V2[5] * T3[11]) + P3[3] * (V2[4] *
      T3[11] - V2[3] * T3[12]))) + (P2[1] * (P3[0] * (V2[4] * T3[13] - V2[5] *
      T3[12]) + (P3[2] * (V2[5] * T3[10] - V2[2] * T3[13]) + P3[3] * (V2[2] *
      T3[12] - V2[4] * T3[10]))) + (P2[2] * (P3[0] * (V2[5] * T3[11] - V2[3] *
      T3[13]) + (P3[1] * (V2[2] * T3[13] - V2[5] * T3[10]) + P3[3] * (V2[3] *
      T3[10] - V2[2] * T3[11]))) + P2[3] * (P3[0] * (V2[3] * T3[12] - V2[4] *
      T3[11]) + (P3[1] * (V2[4] * T3[10] - V2[2] * T3[12]) + P3[2] * (V2[2] *
      T3[11] - V2[3] * T3[10])))))) + P1[3] * (P2[0] * (P3[1] * (V2[5] * T3[16]
      - V2[4] * T3[17]) + (P3[2] * (V2[3] * T3[17] - V2[5] * T3[15]) + P3[3] *
      (V2[4] * T3[15] - V2[3] * T3[16]))) + (P2[1] * (P3[0] * (V2[4] * T3[17] -
      V2[5] * T3[16]) + (P3[2] * (V2[5] * T3[14] - V2[2] * T3[17]) + P3[3] *
      (V2[2] * T3[16] - V2[4] * T3[14]))) + (P2[2] * (P3[0] * (V2[5] * T3[15] -
      V2[3] * T3[17]) + (P3[1] * (V2[2] * T3[17] - V2[5] * T3[14]) + P3[3] *
      (V2[3] * T3[14] - V2[2] * T3[15]))) + P2[3] * (P3[0] * (V2[3] * T3[16] -
      V2[4] * T3[15]) + (P3[1] * (V2[4] * T3[14] - V2[2] * T3[16]) + P3[2] *
      (V2[2] * T3[15] - V2[3] * T3[14])))))))));
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * (TMP12 * (P3[1] * (P1[2] * (P2[0] * - 1. * (+cI * (T3[5] +
      T3[14])) + (P2[1] * (+cI * (T3[9] + T3[15])) + (P2[2] * 2. * (+cI *
      (T3[13] + T3[16])) + 2. * (P2[3] * (-cI * (T3[12]) + cI * (T3[17])))))) +
      (P1[3] * (P2[0] * (+cI * (T3[4] + T3[10])) + (P2[1] * - 1. * (+cI *
      (T3[8] + T3[11])) + (P2[2] * 2. * (-cI * (T3[12]) + cI * (T3[17])) - 2. *
      (P2[3] * (+cI * (T3[16] + T3[13])))))) + (P1[0] * (P2[2] * - 1. * (+cI *
      (T3[5] + T3[14])) + P2[3] * (+cI * (T3[4] + T3[10]))) + P1[1] * (P2[2] *
      (+cI * (T3[9] + T3[15])) - P2[3] * (+cI * (T3[8] + T3[11])))))) + (P3[2]
      * (P1[1] * (P2[0] * (+cI * (T3[5] + T3[14])) + (P2[1] * - 2. * (+cI *
      (T3[9] + T3[15])) + (P2[2] * - 1. * (+cI * (T3[13] + T3[16])) + 2. *
      (P2[3] * (-cI * (T3[17]) + cI * (T3[7])))))) + (P1[3] * (P2[0] * - 1. *
      (+cI * (T3[3] + T3[6])) + (P2[1] * 2. * (-cI * (T3[17]) + cI * (T3[7])) +
      (P2[2] * (+cI * (T3[11] + T3[8])) + 2. * (P2[3] * (+cI * (T3[15] +
      T3[9])))))) + (P1[0] * (P2[1] * (+cI * (T3[5] + T3[14])) - P2[3] * (+cI *
      (T3[3] + T3[6]))) + P1[2] * (P2[1] * - 1. * (+cI * (T3[13] + T3[16])) +
      P2[3] * (+cI * (T3[11] + T3[8])))))) + (P3[3] * (P1[1] * (P2[0] * - 1. *
      (+cI * (T3[4] + T3[10])) + (P2[1] * 2. * (+cI * (T3[8] + T3[11])) +
      (P2[2] * 2. * (-cI * (T3[7]) + cI * (T3[12])) + P2[3] * (+cI * (T3[16] +
      T3[13]))))) + (P1[2] * (P2[0] * (+cI * (T3[3] + T3[6])) + (P2[1] * 2. *
      (-cI * (T3[7]) + cI * (T3[12])) + (P2[2] * - 2. * (+cI * (T3[11] +
      T3[8])) - P2[3] * (+cI * (T3[15] + T3[9]))))) + (P1[0] * (P2[1] * - 1. *
      (+cI * (T3[4] + T3[10])) + P2[2] * (+cI * (T3[3] + T3[6]))) + P1[3] *
      (P2[1] * (+cI * (T3[16] + T3[13])) - P2[2] * (+cI * (T3[15] + T3[9]))))))
      + OM1 * P1[0] * (+cI * (TMP61 + TMP62))))) + (OM1 * P1[0] * TMP14 * (+cI
      * (TMP34 + TMP36 + TMP38 + TMP40)) - P3[0] * (+cI * (TMP34 + TMP36 +
      TMP38 + TMP40))));
  V1[3] = denom * (TMP12 * (P3[0] * (P1[2] * (P2[0] * - 1. * (+cI * (T3[5] +
      T3[14])) + (P2[1] * (+cI * (T3[9] + T3[15])) + (P2[2] * 2. * (+cI *
      (T3[13] + T3[16])) + 2. * (P2[3] * (-cI * (T3[12]) + cI * (T3[17])))))) +
      (P1[3] * (P2[0] * (+cI * (T3[4] + T3[10])) + (P2[1] * - 1. * (+cI *
      (T3[8] + T3[11])) + (P2[2] * 2. * (-cI * (T3[12]) + cI * (T3[17])) - 2. *
      (P2[3] * (+cI * (T3[16] + T3[13])))))) + (P1[0] * (P2[2] * - 1. * (+cI *
      (T3[5] + T3[14])) + P2[3] * (+cI * (T3[4] + T3[10]))) + P1[1] * (P2[2] *
      (+cI * (T3[9] + T3[15])) - P2[3] * (+cI * (T3[8] + T3[11])))))) + (P3[2]
      * (P1[0] * (P2[0] * 2. * (+cI * (T3[5] + T3[14])) + (P2[1] * - 1. * (+cI
      * (T3[9] + T3[15])) + (P2[2] * - 1. * (+cI * (T3[13] + T3[16])) - 2. *
      (P2[3] * (+cI * (T3[2] + T3[17])))))) + (P1[3] * (P2[0] * - 2. * (+cI *
      (T3[17] + T3[2])) + (P2[1] * (+cI * (T3[6] + T3[3])) + (P2[2] * (+cI *
      (T3[10] + T3[4])) + 2. * (P2[3] * (+cI * (T3[14] + T3[5])))))) + (P1[1] *
      (P2[0] * - 1. * (+cI * (T3[9] + T3[15])) + P2[3] * (+cI * (T3[6] +
      T3[3]))) + P1[2] * (P2[0] * - 1. * (+cI * (T3[13] + T3[16])) + P2[3] *
      (+cI * (T3[10] + T3[4])))))) + (P3[3] * (P1[0] * (P2[0] * - 2. * (+cI *
      (T3[4] + T3[10])) + (P2[1] * (+cI * (T3[8] + T3[11])) + (P2[2] * 2. *
      (+cI * (T3[2] + T3[12])) + P2[3] * (+cI * (T3[16] + T3[13]))))) + (P1[2]
      * (P2[0] * 2. * (+cI * (T3[12] + T3[2])) + (P2[1] * - 1. * (+cI * (T3[6]
      + T3[3])) + (P2[2] * - 2. * (+cI * (T3[10] + T3[4])) - P2[3] * (+cI *
      (T3[14] + T3[5]))))) + (P1[1] * (P2[0] * (+cI * (T3[8] + T3[11])) - P2[2]
      * (+cI * (T3[6] + T3[3]))) + P1[3] * (P2[0] * (+cI * (T3[16] + T3[13])) -
      P2[2] * (+cI * (T3[14] + T3[5])))))) + OM1 * P1[1] * (+cI * (TMP61 +
      TMP62))))) + (OM1 * P1[1] * TMP14 * (+cI * (TMP34 + TMP36 + TMP38 +
      TMP40)) - P3[1] * (+cI * (TMP34 + TMP36 + TMP38 + TMP40))));
  V1[4] = denom * (TMP12 * (P3[0] * (P1[1] * (P2[0] * (+cI * (T3[5] + T3[14]))
      + (P2[1] * - 2. * (+cI * (T3[9] + T3[15])) + (P2[2] * - 1. * (+cI *
      (T3[13] + T3[16])) + 2. * (P2[3] * (-cI * (T3[17]) + cI * (T3[7])))))) +
      (P1[3] * (P2[0] * - 1. * (+cI * (T3[3] + T3[6])) + (P2[1] * 2. * (-cI *
      (T3[17]) + cI * (T3[7])) + (P2[2] * (+cI * (T3[11] + T3[8])) + 2. *
      (P2[3] * (+cI * (T3[15] + T3[9])))))) + (P1[0] * (P2[1] * (+cI * (T3[5] +
      T3[14])) - P2[3] * (+cI * (T3[3] + T3[6]))) + P1[2] * (P2[1] * - 1. *
      (+cI * (T3[13] + T3[16])) + P2[3] * (+cI * (T3[11] + T3[8])))))) + (P3[1]
      * (P1[0] * (P2[0] * - 2. * (+cI * (T3[5] + T3[14])) + (P2[1] * (+cI *
      (T3[9] + T3[15])) + (P2[2] * (+cI * (T3[13] + T3[16])) + 2. * (P2[3] *
      (+cI * (T3[2] + T3[17])))))) + (P1[3] * (P2[0] * 2. * (+cI * (T3[17] +
      T3[2])) + (P2[1] * - 1. * (+cI * (T3[6] + T3[3])) + (P2[2] * - 1. * (+cI
      * (T3[10] + T3[4])) - 2. * (P2[3] * (+cI * (T3[14] + T3[5])))))) + (P1[1]
      * (P2[0] * (+cI * (T3[9] + T3[15])) - P2[3] * (+cI * (T3[6] + T3[3]))) +
      P1[2] * (P2[0] * (+cI * (T3[13] + T3[16])) - P2[3] * (+cI * (T3[10] +
      T3[4])))))) + (P3[3] * (P1[0] * (P2[0] * 2. * (+cI * (T3[3] + T3[6])) +
      (P2[1] * - 2. * (+cI * (T3[2] + T3[7])) + (P2[2] * - 1. * (+cI * (T3[11]
      + T3[8])) - P2[3] * (+cI * (T3[15] + T3[9]))))) + (P1[1] * (P2[0] * - 2.
      * (+cI * (T3[7] + T3[2])) + (P2[1] * 2. * (+cI * (T3[6] + T3[3])) +
      (P2[2] * (+cI * (T3[10] + T3[4])) + P2[3] * (+cI * (T3[14] + T3[5]))))) +
      (P1[2] * (P2[0] * - 1. * (+cI * (T3[11] + T3[8])) + P2[1] * (+cI *
      (T3[10] + T3[4]))) + P1[3] * (P2[0] * - 1. * (+cI * (T3[15] + T3[9])) +
      P2[1] * (+cI * (T3[14] + T3[5])))))) + OM1 * P1[2] * (+cI * (TMP61 +
      TMP62))))) + (OM1 * P1[2] * TMP14 * (+cI * (TMP34 + TMP36 + TMP38 +
      TMP40)) - P3[2] * (+cI * (TMP34 + TMP36 + TMP38 + TMP40))));
  V1[5] = denom * (TMP12 * (P3[0] * (P1[1] * (P2[0] * - 1. * (+cI * (T3[4] +
      T3[10])) + (P2[1] * 2. * (+cI * (T3[8] + T3[11])) + (P2[2] * 2. * (-cI *
      (T3[7]) + cI * (T3[12])) + P2[3] * (+cI * (T3[16] + T3[13]))))) + (P1[2]
      * (P2[0] * (+cI * (T3[3] + T3[6])) + (P2[1] * 2. * (-cI * (T3[7]) + cI *
      (T3[12])) + (P2[2] * - 2. * (+cI * (T3[11] + T3[8])) - P2[3] * (+cI *
      (T3[15] + T3[9]))))) + (P1[0] * (P2[1] * - 1. * (+cI * (T3[4] + T3[10]))
      + P2[2] * (+cI * (T3[3] + T3[6]))) + P1[3] * (P2[1] * (+cI * (T3[16] +
      T3[13])) - P2[2] * (+cI * (T3[15] + T3[9])))))) + (P3[1] * (P1[0] *
      (P2[0] * 2. * (+cI * (T3[4] + T3[10])) + (P2[1] * - 1. * (+cI * (T3[8] +
      T3[11])) + (P2[2] * - 2. * (+cI * (T3[2] + T3[12])) - P2[3] * (+cI *
      (T3[16] + T3[13]))))) + (P1[2] * (P2[0] * - 2. * (+cI * (T3[12] + T3[2]))
      + (P2[1] * (+cI * (T3[6] + T3[3])) + (P2[2] * 2. * (+cI * (T3[10] +
      T3[4])) + P2[3] * (+cI * (T3[14] + T3[5]))))) + (P1[1] * (P2[0] * - 1. *
      (+cI * (T3[8] + T3[11])) + P2[2] * (+cI * (T3[6] + T3[3]))) + P1[3] *
      (P2[0] * - 1. * (+cI * (T3[16] + T3[13])) + P2[2] * (+cI * (T3[14] +
      T3[5])))))) + (P3[2] * (P1[0] * (P2[0] * - 2. * (+cI * (T3[3] + T3[6])) +
      (P2[1] * 2. * (+cI * (T3[2] + T3[7])) + (P2[2] * (+cI * (T3[11] + T3[8]))
      + P2[3] * (+cI * (T3[15] + T3[9]))))) + (P1[1] * (P2[0] * 2. * (+cI *
      (T3[7] + T3[2])) + (P2[1] * - 2. * (+cI * (T3[6] + T3[3])) + (P2[2] * -
      1. * (+cI * (T3[10] + T3[4])) - P2[3] * (+cI * (T3[14] + T3[5]))))) +
      (P1[2] * (P2[0] * (+cI * (T3[11] + T3[8])) - P2[1] * (+cI * (T3[10] +
      T3[4]))) + P1[3] * (P2[0] * (+cI * (T3[15] + T3[9])) - P2[1] * (+cI *
      (T3[14] + T3[5])))))) + OM1 * P1[3] * (+cI * (TMP61 + TMP62))))) + (OM1 *
      P1[3] * TMP14 * (+cI * (TMP34 + TMP36 + TMP38 + TMP40)) - P3[3] * (+cI *
      (TMP34 + TMP36 + TMP38 + TMP40))));
}


void VVT10_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP10; 
  double P3[4]; 
  complex<double> TMP14; 
  complex<double> TMP52; 
  complex<double> TMP9; 
  complex<double> TMP11; 
  double P2[4]; 
  complex<double> TMP53; 
  complex<double> TMP15; 
  double OM3; 
  complex<double> TMP12; 
  double P1[4]; 
  complex<double> denom; 
  complex<double> TMP50; 
  complex<double> TMP13; 
  complex<double> TMP51; 
  complex<double> TMP8; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP51 = (P2[0] * P2[0] - P2[1] * P2[1] - P2[2] * P2[2] - P2[3] * P2[3]); 
  TMP50 = (P1[0] * P1[0] - P1[1] * P1[1] - P1[2] * P1[2] - P1[3] * P1[3]); 
  TMP53 = (P2[0] * V2[2] - P2[1] * V2[3] - P2[2] * V2[4] - P2[3] * V2[5]); 
  TMP52 = (P1[0] * V1[2] - P1[1] * V1[3] - P1[2] * V1[4] - P1[3] * V1[5]); 
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]); 
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]); 
  TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * 0.333333333 * (OM3 * (P3[0] * (P3[0] * (OM3 * (TMP11 * (TMP14
      * (TMP8 * - 2. * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      2. * (-2. * cI * (TMP9) + cI * (TMP12)) + 2. * cI * (TMP9 * TMP10))) +
      (TMP11 * (TMP9 * 2. * (+cI * (TMP13 + TMP10)) - 2. * cI * (TMP8 * TMP15))
      - 2. * cI * (TMP10 * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 2. *
      (+cI * (TMP9 + TMP12)) - 2. * cI * (TMP8 * TMP15)) - 2. * cI * (TMP10 *
      TMP12 * TMP15))) + (TMP15 * (TMP8 * - 1. * (-2. * cI * (TMP15) + cI *
      (TMP50 + TMP51)) + (-2. * cI * (TMP9 * TMP13) - cI * (TMP12 * TMP52 +
      TMP10 * TMP53))) + (TMP13 * (TMP50 * (+cI * (TMP9 + TMP12)) + (+cI *
      (TMP9 * TMP51 + TMP14 * TMP53))) + (TMP11 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + TMP51 * (-cI * (TMP8 * TMP14) + cI * (TMP9 *
      TMP10)))))) + (TMP11 * (TMP9 * (P1[0] * 3. * (-cI * (TMP10) + 2. * cI *
      (TMP13)) + (P2[0] * - 6. * (+cI * (TMP13 + TMP10)) - 3. * cI * (V1[2] *
      TMP14))) + (TMP8 * (P1[0] * 6. * (-cI * (TMP15) + cI * (TMP14)) + 6. *
      (P2[0] * (+cI * (TMP15 + TMP14)))) + 3. * (V2[2] * (-cI * (TMP13 * TMP14)
      + cI * (TMP10 * TMP15))))) + (TMP14 * (TMP13 * (P1[0] * - 6. * (+cI *
      (TMP9 + TMP12)) + 3. * (P2[0] * (-cI * (TMP12) + 2. * cI * (TMP9)))) +
      TMP15 * (TMP8 * 6. * (-cI * (P2[0]) + cI * (P1[0])) + 3. * cI * (V1[2] *
      TMP12))) + 3. * (TMP10 * TMP12 * TMP15 * (+cI * (P1[0] + P2[0])))))) +
      (TMP11 * (TMP14 * (TMP8 * - 1. * (-2. * cI * (TMP15) + cI * (TMP14 +
      TMP11)) + (TMP13 * (-2. * cI * (TMP9) + cI * (TMP12)) + cI * (TMP9 *
      TMP10))) + (TMP11 * (TMP9 * (+cI * (TMP13 + TMP10)) - cI * (TMP8 *
      TMP15)) - cI * (TMP10 * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * (+cI
      * (TMP9 + TMP12)) - cI * (TMP8 * TMP15)) - cI * (TMP10 * TMP12 *
      TMP15)))) + (TMP15 * (TMP8 * (P1[0] * 3. * (-cI * (P1[0]) + 2. * cI *
      (P2[0])) + (+1.000000000 * cI * (TMP50 + TMP51) - 2.000000000 * cI *
      (TMP15) - 3. * cI * (P2[0] * P2[0]))) + (TMP10 * 1.000000000 * (+cI *
      (TMP53) - 3.000000000 * cI * (P2[0] * V2[2])) + (+2.000000000 * cI *
      (TMP9 * TMP13) + TMP12 * 1.000000000 * (+cI * (TMP52) - 3.000000000 * cI
      * (P1[0] * V1[2]))))) + (TMP13 * (TMP9 * (P1[0] * 3. * (-2. * cI *
      (P2[0]) + cI * (P1[0])) + (-1.000000000 * cI * (TMP50 + TMP51) + 3. * cI
      * (P2[0] * P2[0]))) + (+1.000000000 * (TMP14 * (-cI * (TMP53) +
      3.000000000 * cI * (P2[0] * V2[2]))) + TMP12 * 1.000000000 * (-cI *
      (TMP50) + 3.000000000 * cI * (P1[0] * P1[0])))) + (TMP11 * 1.000000000 *
      (TMP9 * (-cI * (TMP52) + 3.000000000 * cI * (P1[0] * V1[2])) +
      1.000000000 * (TMP8 * 1.000000000 * (+cI * (TMP50) - 3.000000000 * cI *
      (P1[0] * P1[0])))) + (+1.000000000 * (TMP14 * TMP8 * (+cI * (TMP51) -
      3.000000000 * cI * (P2[0] * P2[0]))) + TMP10 * 1.000000000 * TMP9 * (-cI
      * (TMP51) + 3.000000000 * cI * (P2[0] * P2[0])))))));
  T3[6] = denom * (OM3 * (P3[0] * (P3[1] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[1] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[3] * TMP14) +
      P2[1] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[3] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[1] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[1] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[1] + P2[1]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[1]) + cI * (P1[1]))) +
      cI * (V1[3] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[1] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[1] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[1] * (TMP11 * (TMP9 * (P1[0] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[2] * TMP14) +
      P2[0] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[2] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[0] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[0] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[0] + P2[0]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[0]) + cI * (P1[0]))) +
      cI * (V1[2] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[0] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[0] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[0] * (P1[1] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[3] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[1] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[0] * (P2[1] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[3] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[1] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[1] * V2[2] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[1] * 0.500000000 * V1[2] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[10] = denom * (OM3 * (P3[0] * (P3[2] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[2] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[4] * TMP14) +
      P2[2] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[2] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[2] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[2] + P2[2]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[2]) + cI * (P1[2]))) +
      cI * (V1[4] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[2] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[2] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[2] * (TMP11 * (TMP9 * (P1[0] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[2] * TMP14) +
      P2[0] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[2] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[0] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[0] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[0] + P2[0]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[0]) + cI * (P1[0]))) +
      cI * (V1[2] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[0] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[0] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[0] * (P1[2] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[4] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[2] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[0] * (P2[2] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[2] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[2] * V2[2] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[2] * 0.500000000 * V1[2] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[14] = denom * (OM3 * (P3[0] * (P3[3] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[3] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[5] * TMP14) +
      P2[3] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[3] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[3] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[3] + P2[3]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[3]) + cI * (P1[3]))) +
      cI * (V1[5] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[3] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[3] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[3] * (TMP11 * (TMP9 * (P1[0] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[2] * TMP14) +
      P2[0] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[2] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[0] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[0] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[0] + P2[0]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[0]) + cI * (P1[0]))) +
      cI * (V1[2] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[0] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[0] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[0] * (P1[3] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[5] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[3] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[0] * (P2[3] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[3] * V2[2] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * 0.500000000 * V1[2] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[3] = denom * (OM3 * (P3[0] * (P3[1] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[1] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[3] * TMP14) +
      P2[1] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[3] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[1] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[1] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[1] + P2[1]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[1]) + cI * (P1[1]))) +
      cI * (V1[3] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[1] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[1] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[1] * (TMP11 * (TMP9 * (P1[0] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[2] * TMP14) +
      P2[0] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[2] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[0] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[0] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[0] + P2[0]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[0]) + cI * (P1[0]))) +
      cI * (V1[2] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[0] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[0] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[0] * (P1[1] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[3] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[1] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[0] * (P2[1] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[3] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[1] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[1] * V2[2] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[1] * 0.500000000 * V1[2] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[7] = denom * 0.333333333 * (OM3 * (P3[1] * (P3[1] * (OM3 * (TMP11 * (TMP14
      * (TMP8 * - 2. * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      2. * (-2. * cI * (TMP9) + cI * (TMP12)) + 2. * cI * (TMP9 * TMP10))) +
      (TMP11 * (TMP9 * 2. * (+cI * (TMP13 + TMP10)) - 2. * cI * (TMP8 * TMP15))
      - 2. * cI * (TMP10 * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 2. *
      (+cI * (TMP9 + TMP12)) - 2. * cI * (TMP8 * TMP15)) - 2. * cI * (TMP10 *
      TMP12 * TMP15))) + (TMP15 * (TMP8 * - 1. * (-2. * cI * (TMP15) + cI *
      (TMP50 + TMP51)) + (-2. * cI * (TMP9 * TMP13) - cI * (TMP12 * TMP52 +
      TMP10 * TMP53))) + (TMP13 * (TMP50 * (+cI * (TMP9 + TMP12)) + (+cI *
      (TMP9 * TMP51 + TMP14 * TMP53))) + (TMP11 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + TMP51 * (-cI * (TMP8 * TMP14) + cI * (TMP9 *
      TMP10)))))) + (TMP11 * (TMP9 * (P1[1] * 3. * (-cI * (TMP10) + 2. * cI *
      (TMP13)) + (P2[1] * - 6. * (+cI * (TMP13 + TMP10)) - 3. * cI * (V1[3] *
      TMP14))) + (TMP8 * (P1[1] * 6. * (-cI * (TMP15) + cI * (TMP14)) + 6. *
      (P2[1] * (+cI * (TMP15 + TMP14)))) + 3. * (V2[3] * (-cI * (TMP13 * TMP14)
      + cI * (TMP10 * TMP15))))) + (TMP14 * (TMP13 * (P1[1] * - 6. * (+cI *
      (TMP9 + TMP12)) + 3. * (P2[1] * (-cI * (TMP12) + 2. * cI * (TMP9)))) +
      TMP15 * (TMP8 * 6. * (-cI * (P2[1]) + cI * (P1[1])) + 3. * cI * (V1[3] *
      TMP12))) + 3. * (TMP10 * TMP12 * TMP15 * (+cI * (P1[1] + P2[1])))))) +
      (TMP11 * (TMP14 * (TMP8 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) +
      (TMP13 * (-cI * (TMP12) + 2. * cI * (TMP9)) - cI * (TMP9 * TMP10))) +
      (TMP11 * (TMP9 * - 1. * (+cI * (TMP13 + TMP10)) + cI * (TMP8 * TMP15)) +
      cI * (TMP10 * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * - 1. * (+cI *
      (TMP9 + TMP12)) + cI * (TMP8 * TMP15)) + cI * (TMP10 * TMP12 * TMP15))))
      + (TMP15 * (TMP8 * (P1[1] * 3. * (-cI * (P1[1]) + 2. * cI * (P2[1])) +
      (-1.000000000 * cI * (TMP50 + TMP51) + 2.000000000 * cI * (TMP15) - 3. *
      cI * (P2[1] * P2[1]))) + (TMP10 * - 1.000000000 * (+cI * (TMP53) +
      3.000000000 * cI * (P2[1] * V2[3])) + (-2.000000000 * cI * (TMP9 * TMP13)
      + TMP12 * - 1.000000000 * (+cI * (TMP52) + 3.000000000 * cI * (P1[1] *
      V1[3]))))) + (TMP13 * (TMP9 * (P1[1] * 3. * (-2. * cI * (P2[1]) + cI *
      (P1[1])) + (+1.000000000 * cI * (TMP50 + TMP51) + 3. * cI * (P2[1] *
      P2[1]))) + (+1.000000000 * (TMP14 * (+cI * (TMP53) + 3.000000000 * cI *
      (P2[1] * V2[3]))) + TMP12 * 1.000000000 * (+cI * (TMP50) + 3.000000000 *
      cI * (P1[1] * P1[1])))) + (TMP11 * 1.000000000 * (TMP9 * (+cI * (TMP52) +
      3.000000000 * cI * (P1[1] * V1[3])) + 1.000000000 * (TMP8 * - 1.000000000
      * (+cI * (TMP50) + 3.000000000 * cI * (P1[1] * P1[1])))) + (-1.000000000
      * (TMP14 * TMP8 * (+cI * (TMP51) + 3.000000000 * cI * (P2[1] * P2[1]))) +
      TMP10 * 1.000000000 * TMP9 * (+cI * (TMP51) + 3.000000000 * cI * (P2[1] *
      P2[1])))))));
  T3[11] = denom * (OM3 * (P3[1] * (P3[2] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[2] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[4] * TMP14) +
      P2[2] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[2] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[2] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[2] + P2[2]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[2]) + cI * (P1[2]))) +
      cI * (V1[4] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[2] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[2] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[2] * (TMP11 * (TMP9 * (P1[1] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[3] * TMP14) +
      P2[1] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[3] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[1] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[1] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[1] + P2[1]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[1]) + cI * (P1[1]))) +
      cI * (V1[3] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[1] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[1] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[1] * (P1[2] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[4] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[2] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[1] * (P2[2] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[2] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[2] * V2[3] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[2] * 0.500000000 * V1[3] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[15] = denom * (OM3 * (P3[1] * (P3[3] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[3] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[5] * TMP14) +
      P2[3] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[3] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[3] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[3] + P2[3]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[3]) + cI * (P1[3]))) +
      cI * (V1[5] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[3] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[3] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[3] * (TMP11 * (TMP9 * (P1[1] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[3] * TMP14) +
      P2[1] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[3] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[1] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[1] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[1] + P2[1]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[1]) + cI * (P1[1]))) +
      cI * (V1[3] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[1] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[1] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[1] * (P1[3] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[5] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[3] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[1] * (P2[3] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[3] * V2[3] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * 0.500000000 * V1[3] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[4] = denom * (OM3 * (P3[0] * (P3[2] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[2] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[4] * TMP14) +
      P2[2] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[2] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[2] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[2] + P2[2]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[2]) + cI * (P1[2]))) +
      cI * (V1[4] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[2] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[2] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[2] * (TMP11 * (TMP9 * (P1[0] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[2] * TMP14) +
      P2[0] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[2] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[0] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[0] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[0] + P2[0]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[0]) + cI * (P1[0]))) +
      cI * (V1[2] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[0] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[0] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[0] * (P1[2] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[4] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[2] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[0] * (P2[2] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[2] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[2] * V2[2] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[2] * 0.500000000 * V1[2] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[8] = denom * (OM3 * (P3[1] * (P3[2] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[2] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[4] * TMP14) +
      P2[2] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[2] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[2] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[2] + P2[2]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[2]) + cI * (P1[2]))) +
      cI * (V1[4] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[2] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[2] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[2] * (TMP11 * (TMP9 * (P1[1] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[3] * TMP14) +
      P2[1] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[3] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[1] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[1] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[1] + P2[1]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[1]) + cI * (P1[1]))) +
      cI * (V1[3] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[1] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[1] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[1] * (P1[2] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[4] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[2] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[1] * (P2[2] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[2] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[2] * V2[3] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[2] * 0.500000000 * V1[3] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[12] = denom * 0.333333333 * (OM3 * (P3[2] * (P3[2] * (OM3 * (TMP11 *
      (TMP14 * (TMP8 * - 2. * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) +
      (TMP13 * 2. * (-2. * cI * (TMP9) + cI * (TMP12)) + 2. * cI * (TMP9 *
      TMP10))) + (TMP11 * (TMP9 * 2. * (+cI * (TMP13 + TMP10)) - 2. * cI *
      (TMP8 * TMP15)) - 2. * cI * (TMP10 * TMP12 * TMP15))) + TMP14 * (TMP14 *
      (TMP13 * 2. * (+cI * (TMP9 + TMP12)) - 2. * cI * (TMP8 * TMP15)) - 2. *
      cI * (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 1. * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-2. * cI * (TMP9 * TMP13) - cI *
      (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 * (+cI * (TMP9 +
      TMP12)) + (+cI * (TMP9 * TMP51 + TMP14 * TMP53))) + (TMP11 * (-cI * (TMP8
      * TMP50) + cI * (TMP9 * TMP52)) + TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)))))) + (TMP11 * (TMP9 * (P1[2] * 3. * (-cI * (TMP10) + 2.
      * cI * (TMP13)) + (P2[2] * - 6. * (+cI * (TMP13 + TMP10)) - 3. * cI *
      (V1[4] * TMP14))) + (TMP8 * (P1[2] * 6. * (-cI * (TMP15) + cI * (TMP14))
      + 6. * (P2[2] * (+cI * (TMP15 + TMP14)))) + 3. * (V2[4] * (-cI * (TMP13 *
      TMP14) + cI * (TMP10 * TMP15))))) + (TMP14 * (TMP13 * (P1[2] * - 6. *
      (+cI * (TMP9 + TMP12)) + 3. * (P2[2] * (-cI * (TMP12) + 2. * cI *
      (TMP9)))) + TMP15 * (TMP8 * 6. * (-cI * (P2[2]) + cI * (P1[2])) + 3. * cI
      * (V1[4] * TMP12))) + 3. * (TMP10 * TMP12 * TMP15 * (+cI * (P1[2] +
      P2[2])))))) + (TMP11 * (TMP14 * (TMP8 * (-2. * cI * (TMP15) + cI * (TMP14
      + TMP11)) + (TMP13 * (-cI * (TMP12) + 2. * cI * (TMP9)) - cI * (TMP9 *
      TMP10))) + (TMP11 * (TMP9 * - 1. * (+cI * (TMP13 + TMP10)) + cI * (TMP8 *
      TMP15)) + cI * (TMP10 * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * - 1.
      * (+cI * (TMP9 + TMP12)) + cI * (TMP8 * TMP15)) + cI * (TMP10 * TMP12 *
      TMP15)))) + (TMP15 * (TMP8 * (P1[2] * 3. * (-cI * (P1[2]) + 2. * cI *
      (P2[2])) + (-1.000000000 * cI * (TMP50 + TMP51) + 2.000000000 * cI *
      (TMP15) - 3. * cI * (P2[2] * P2[2]))) + (TMP10 * - 1.000000000 * (+cI *
      (TMP53) + 3.000000000 * cI * (P2[2] * V2[4])) + (-2.000000000 * cI *
      (TMP9 * TMP13) + TMP12 * - 1.000000000 * (+cI * (TMP52) + 3.000000000 *
      cI * (P1[2] * V1[4]))))) + (TMP13 * (TMP9 * (P1[2] * 3. * (-2. * cI *
      (P2[2]) + cI * (P1[2])) + (+1.000000000 * cI * (TMP50 + TMP51) + 3. * cI
      * (P2[2] * P2[2]))) + (+1.000000000 * (TMP14 * (+cI * (TMP53) +
      3.000000000 * cI * (P2[2] * V2[4]))) + TMP12 * 1.000000000 * (+cI *
      (TMP50) + 3.000000000 * cI * (P1[2] * P1[2])))) + (TMP11 * 1.000000000 *
      (TMP9 * (+cI * (TMP52) + 3.000000000 * cI * (P1[2] * V1[4])) +
      1.000000000 * (TMP8 * - 1.000000000 * (+cI * (TMP50) + 3.000000000 * cI *
      (P1[2] * P1[2])))) + (-1.000000000 * (TMP14 * TMP8 * (+cI * (TMP51) +
      3.000000000 * cI * (P2[2] * P2[2]))) + TMP10 * 1.000000000 * TMP9 * (+cI
      * (TMP51) + 3.000000000 * cI * (P2[2] * P2[2])))))));
  T3[16] = denom * (OM3 * (P3[2] * (P3[3] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[3] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[5] * TMP14) +
      P2[3] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[3] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[3] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[3] + P2[3]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[3]) + cI * (P1[3]))) +
      cI * (V1[5] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[3] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[3] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[3] * (TMP11 * (TMP9 * (P1[2] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[4] * TMP14) +
      P2[2] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[2] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[2] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[2] + P2[2]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[2]) + cI * (P1[2]))) +
      cI * (V1[4] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[2] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[2] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[2] * (P1[3] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[5] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[3] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[2] * (P2[3] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[3] * V2[4] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * 0.500000000 * V1[4] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[5] = denom * (OM3 * (P3[0] * (P3[3] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[3] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[5] * TMP14) +
      P2[3] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[3] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[3] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[3] + P2[3]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[3]) + cI * (P1[3]))) +
      cI * (V1[5] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[3] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[3] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[3] * (TMP11 * (TMP9 * (P1[0] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[2] * TMP14) +
      P2[0] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[2] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[0] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[0] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[0] + P2[0]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[0]) + cI * (P1[0]))) +
      cI * (V1[2] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[0] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[0] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[0] * (P1[3] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[5] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[3] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[0] * (P2[3] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[3] * V2[2] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * 0.500000000 * V1[2] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[9] = denom * (OM3 * (P3[1] * (P3[3] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[3] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[5] * TMP14) +
      P2[3] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[3] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[3] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[3] + P2[3]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[3]) + cI * (P1[3]))) +
      cI * (V1[5] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[3] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[3] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[3] * (TMP11 * (TMP9 * (P1[1] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[3] * TMP14) +
      P2[1] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[3] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[1] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[1] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[1] + P2[1]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[1]) + cI * (P1[1]))) +
      cI * (V1[3] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[1] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[1] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[1] * (P1[3] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[5] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[3] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[1] * (P2[3] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[3] * V2[3] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * 0.500000000 * V1[3] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[13] = denom * (OM3 * (P3[2] * (P3[3] * (OM3 * (TMP11 * (TMP14 * (TMP8 * -
      0.666666667 * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) + (TMP13 *
      1.333333333 * (+0.500000000 * cI * (TMP12) - cI * (TMP9)) + 0.666666667 *
      cI * (TMP9 * TMP10))) + (TMP11 * (TMP9 * 0.666666667 * (+cI * (TMP13 +
      TMP10)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI * (TMP10
      * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * 0.666666667 * (+cI * (TMP9
      + TMP12)) - 0.666666667 * cI * (TMP8 * TMP15)) - 0.666666667 * cI *
      (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 0.333333333 * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-0.666666667 * cI * (TMP9 * TMP13) -
      0.333333333 * cI * (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 *
      0.333333333 * (+cI * (TMP9 + TMP12)) + (+0.333333333 * cI * (TMP9 * TMP51
      + TMP14 * TMP53))) + (TMP11 * 0.333333333 * (-cI * (TMP8 * TMP50) + cI *
      (TMP9 * TMP52)) + 0.333333333 * (TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10))))))) + (TMP11 * (TMP9 * (P1[3] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[5] * TMP14) +
      P2[3] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[3] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[3] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[3] + P2[3]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[3]) + cI * (P1[3]))) +
      cI * (V1[5] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[3] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[3] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + P3[3] * (TMP11 * (TMP9 * (P1[2] * 0.500000000 * (-cI *
      (TMP10) + 2. * cI * (TMP13)) + (-0.500000000 * cI * (V1[4] * TMP14) +
      P2[2] * - 1. * (+cI * (TMP13 + TMP10)))) + (+0.500000000 * (V2[4] * (-cI
      * (TMP13 * TMP14) + cI * (TMP10 * TMP15))) + TMP8 * (P1[2] * (-cI *
      (TMP15) + cI * (TMP14)) + P2[2] * (+cI * (TMP15 + TMP14))))) +
      (+0.500000000 * (TMP10 * TMP12 * TMP15 * (+cI * (P1[2] + P2[2]))) + TMP14
      * 0.500000000 * (TMP15 * (+2. * (TMP8 * (-cI * (P2[2]) + cI * (P1[2]))) +
      cI * (V1[4] * TMP12)) + 2. * (TMP13 * 0.500000000 * (P2[2] * (-cI *
      (TMP12) + 2. * cI * (TMP9)) + 2. * (P1[2] * - 1. * (+cI * (TMP9 +
      TMP12))))))))) + (P1[2] * (P1[3] * (TMP13 * (+cI * (TMP9 + TMP12)) - TMP8
      * (+cI * (TMP15 + TMP11))) + (+0.500000000 * (V1[5] * (-cI * (TMP12 *
      TMP15) + cI * (TMP9 * TMP11))) + P2[3] * (-cI * (TMP9 * TMP13) + cI *
      (TMP8 * TMP15)))) + (P2[2] * (P2[3] * (TMP8 * - 1. * (+cI * (TMP15 +
      TMP14)) + TMP9 * (+cI * (TMP13 + TMP10))) + (+0.500000000 * (V2[5] * (-cI
      * (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * (-cI * (TMP9 *
      TMP13) + cI * (TMP8 * TMP15)))) + (+0.500000000 * (P2[3] * V2[4] * (-cI *
      (TMP10 * TMP15) + cI * (TMP13 * TMP14))) + P1[3] * 0.500000000 * V1[4] *
      (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11))))));
  T3[17] = denom * 0.333333333 * (OM3 * (P3[3] * (P3[3] * (OM3 * (TMP11 *
      (TMP14 * (TMP8 * - 2. * (-2. * cI * (TMP15) + cI * (TMP14 + TMP11)) +
      (TMP13 * 2. * (-2. * cI * (TMP9) + cI * (TMP12)) + 2. * cI * (TMP9 *
      TMP10))) + (TMP11 * (TMP9 * 2. * (+cI * (TMP13 + TMP10)) - 2. * cI *
      (TMP8 * TMP15)) - 2. * cI * (TMP10 * TMP12 * TMP15))) + TMP14 * (TMP14 *
      (TMP13 * 2. * (+cI * (TMP9 + TMP12)) - 2. * cI * (TMP8 * TMP15)) - 2. *
      cI * (TMP10 * TMP12 * TMP15))) + (TMP15 * (TMP8 * - 1. * (-2. * cI *
      (TMP15) + cI * (TMP50 + TMP51)) + (-2. * cI * (TMP9 * TMP13) - cI *
      (TMP12 * TMP52 + TMP10 * TMP53))) + (TMP13 * (TMP50 * (+cI * (TMP9 +
      TMP12)) + (+cI * (TMP9 * TMP51 + TMP14 * TMP53))) + (TMP11 * (-cI * (TMP8
      * TMP50) + cI * (TMP9 * TMP52)) + TMP51 * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)))))) + (TMP11 * (TMP9 * (P1[3] * 3. * (-cI * (TMP10) + 2.
      * cI * (TMP13)) + (P2[3] * - 6. * (+cI * (TMP13 + TMP10)) - 3. * cI *
      (V1[5] * TMP14))) + (TMP8 * (P1[3] * 6. * (-cI * (TMP15) + cI * (TMP14))
      + 6. * (P2[3] * (+cI * (TMP15 + TMP14)))) + 3. * (V2[5] * (-cI * (TMP13 *
      TMP14) + cI * (TMP10 * TMP15))))) + (TMP14 * (TMP13 * (P1[3] * - 6. *
      (+cI * (TMP9 + TMP12)) + 3. * (P2[3] * (-cI * (TMP12) + 2. * cI *
      (TMP9)))) + TMP15 * (TMP8 * 6. * (-cI * (P2[3]) + cI * (P1[3])) + 3. * cI
      * (V1[5] * TMP12))) + 3. * (TMP10 * TMP12 * TMP15 * (+cI * (P1[3] +
      P2[3])))))) + (TMP11 * (TMP14 * (TMP8 * (-2. * cI * (TMP15) + cI * (TMP14
      + TMP11)) + (TMP13 * (-cI * (TMP12) + 2. * cI * (TMP9)) - cI * (TMP9 *
      TMP10))) + (TMP11 * (TMP9 * - 1. * (+cI * (TMP13 + TMP10)) + cI * (TMP8 *
      TMP15)) + cI * (TMP10 * TMP12 * TMP15))) + TMP14 * (TMP14 * (TMP13 * - 1.
      * (+cI * (TMP9 + TMP12)) + cI * (TMP8 * TMP15)) + cI * (TMP10 * TMP12 *
      TMP15)))) + (TMP15 * (TMP8 * (P1[3] * 3. * (-cI * (P1[3]) + 2. * cI *
      (P2[3])) + (-1.000000000 * cI * (TMP50 + TMP51) + 2.000000000 * cI *
      (TMP15) - 3. * cI * (P2[3] * P2[3]))) + (TMP10 * - 1.000000000 * (+cI *
      (TMP53) + 3.000000000 * cI * (P2[3] * V2[5])) + (-2.000000000 * cI *
      (TMP9 * TMP13) + TMP12 * - 1.000000000 * (+cI * (TMP52) + 3.000000000 *
      cI * (P1[3] * V1[5]))))) + (TMP13 * (TMP9 * (P1[3] * 3. * (-2. * cI *
      (P2[3]) + cI * (P1[3])) + (+1.000000000 * cI * (TMP50 + TMP51) + 3. * cI
      * (P2[3] * P2[3]))) + (+1.000000000 * (TMP14 * (+cI * (TMP53) +
      3.000000000 * cI * (P2[3] * V2[5]))) + TMP12 * 1.000000000 * (+cI *
      (TMP50) + 3.000000000 * cI * (P1[3] * P1[3])))) + (TMP11 * 1.000000000 *
      (TMP9 * (+cI * (TMP52) + 3.000000000 * cI * (P1[3] * V1[5])) +
      1.000000000 * (TMP8 * - 1.000000000 * (+cI * (TMP50) + 3.000000000 * cI *
      (P1[3] * P1[3])))) + (-1.000000000 * (TMP14 * TMP8 * (+cI * (TMP51) +
      3.000000000 * cI * (P2[3] * P2[3]))) + TMP10 * 1.000000000 * TMP9 * (+cI
      * (TMP51) + 3.000000000 * cI * (P2[3] * P2[3])))))));
}


void VVT9_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP60; 
  double P1[4]; 
  complex<double> TMP12; 
  double P2[4]; 
  double P3[4]; 
  complex<double> denom; 
  double OM1; 
  complex<double> TMP14; 
  complex<double> TMP28; 
  complex<double> TMP29; 
  complex<double> TMP24; 
  OM1 = 0.; 
  if (M1 != 0.)
    OM1 = 1./pow(M1, 2); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  P3[0] = T3[0].real(); 
  P3[1] = T3[1].real(); 
  P3[2] = T3[1].imag(); 
  P3[3] = T3[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP24 = (P1[0] * - 1. * (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] *
      T3[15] - P2[0] * T3[3]) + (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] +
      P2[3] * T3[16] - P2[0] * T3[4]) + P1[3] * (P2[1] * T3[9] + P2[2] * T3[13]
      + P2[3] * T3[17] - P2[0] * T3[5]))));
  TMP60 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  TMP28 = (P1[0] * - 1. * (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] -
      V2[2] * T3[2]) + (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] *
      T3[15] - V2[2] * T3[3]) + (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] +
      V2[5] * T3[16] - V2[2] * T3[4]) + P1[3] * (V2[3] * T3[9] + V2[4] * T3[13]
      + V2[5] * T3[17] - V2[2] * T3[5]))));
  TMP29 = (P1[0] * - 1. * (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] -
      V2[2] * T3[2]) + (P1[1] * (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9]
      - V2[2] * T3[6]) + (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] *
      T3[13] - V2[2] * T3[10]) + P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] +
      V2[5] * T3[17] - V2[2] * T3[14]))));
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * - cI * (TMP12 * (OM1 * - P1[0] * (TMP60 + TMP24) + (P2[1] * -
      1. * (T3[3] + T3[6]) + (P2[2] * - 1. * (T3[4] + T3[10]) + (P2[3] * - 1. *
      (T3[5] + T3[14]) + 2. * (P2[0] * T3[2]))))) + (OM1 * - P1[0] * TMP14 *
      (TMP28 + TMP29) + P3[0] * (TMP28 + TMP29)));
  V1[3] = denom * cI * (TMP12 * (OM1 * P1[1] * (TMP60 + TMP24) + (P2[0] * - 1.
      * (T3[6] + T3[3]) + (P2[2] * (T3[8] + T3[11]) + (P2[3] * (T3[9] + T3[15])
      + 2. * (P2[1] * T3[7]))))) + (OM1 * P1[1] * TMP14 * (TMP28 + TMP29) -
      P3[1] * (TMP28 + TMP29)));
  V1[4] = denom * cI * (TMP12 * (OM1 * P1[2] * (TMP60 + TMP24) + (P2[0] * - 1.
      * (T3[10] + T3[4]) + (P2[1] * (T3[11] + T3[8]) + (P2[3] * (T3[13] +
      T3[16]) + 2. * (P2[2] * T3[12]))))) + (OM1 * P1[2] * TMP14 * (TMP28 +
      TMP29) - P3[2] * (TMP28 + TMP29)));
  V1[5] = denom * cI * (TMP12 * (OM1 * P1[3] * (TMP60 + TMP24) + (P2[0] * - 1.
      * (T3[14] + T3[5]) + (P2[1] * (T3[15] + T3[9]) + (P2[2] * (T3[16] +
      T3[13]) + 2. * (P2[3] * T3[17]))))) + (OM1 * P1[3] * TMP14 * (TMP28 +
      TMP29) - P3[3] * (TMP28 + TMP29)));
}


void VVT12_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP12; 
  complex<double> TMP11; 
  double P1[4]; 
  complex<double> TMP10; 
  double P2[4]; 
  double P3[4]; 
  complex<double> TMP15; 
  double OM3; 
  complex<double> TMP14; 
  complex<double> denom; 
  complex<double> TMP9; 
  complex<double> TMP13; 
  complex<double> TMP8; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]); 
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]); 
  TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * 2. * (OM3 * (P3[0] * (P3[0] * (OM3 * (TMP10 * 0.666666667 *
      (-cI * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 0.666666667 * (TMP14 *
      (-cI * (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-0.666666667 * cI *
      (TMP9 * TMP13) + 0.666666667 * cI * (TMP8 * TMP15))) + (P1[0] * (-cI *
      (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[0] * (-cI * (TMP8 * TMP14) +
      cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[2] * TMP10 + V1[2] *
      TMP12)) + (+cI * (V1[2] * TMP9 * TMP11 + V2[2] * TMP13 * TMP14)))))) +
      (TMP10 * 0.333333333 * (-cI * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) +
      0.333333333 * (TMP14 * (-cI * (TMP12 * TMP13) + cI * (TMP8 * TMP11))))) +
      (TMP13 * (-cI * (V2[2] * P1[0]) + 0.666666667 * cI * (TMP9)) + (TMP15 *
      (-0.666666667 * cI * (TMP8) + cI * (V2[2] * V1[2])) + P2[0] * (-cI *
      (V1[2] * TMP9) + cI * (P1[0] * TMP8)))));
  T3[3] = denom * (OM3 * (P3[0] * (P3[1] * (OM3 * (TMP10 * 1.333333333 * (-cI *
      (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[1] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[1] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[3] * TMP12 + V2[3] * TMP10))
      + (+cI * (V1[3] * TMP9 * TMP11 + V2[3] * TMP13 * TMP14)))))) + P3[1] *
      (P1[0] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[0] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[2] *
      TMP10 + V1[2] * TMP12)) + (+cI * (V1[2] * TMP9 * TMP11 + V2[2] * TMP13 *
      TMP14)))))) + (P1[0] * (-cI * (V2[3] * TMP13) + cI * (P2[1] * TMP8)) +
      (P1[1] * (-cI * (V2[2] * TMP13) + cI * (P2[0] * TMP8)) + (TMP15 * (+cI *
      (V2[2] * V1[3] + V2[3] * V1[2])) - TMP9 * (+cI * (P2[1] * V1[2] + P2[0] *
      V1[3]))))));
  T3[4] = denom * (OM3 * (P3[0] * (P3[2] * (OM3 * (TMP10 * 1.333333333 * (-cI *
      (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[2] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[2] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[4] * TMP12 + V2[4] * TMP10))
      + (+cI * (V1[4] * TMP9 * TMP11 + V2[4] * TMP13 * TMP14)))))) + P3[2] *
      (P1[0] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[0] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[2] *
      TMP10 + V1[2] * TMP12)) + (+cI * (V1[2] * TMP9 * TMP11 + V2[2] * TMP13 *
      TMP14)))))) + (P1[0] * (-cI * (V2[4] * TMP13) + cI * (P2[2] * TMP8)) +
      (P1[2] * (-cI * (V2[2] * TMP13) + cI * (P2[0] * TMP8)) + (TMP15 * (+cI *
      (V2[2] * V1[4] + V2[4] * V1[2])) - TMP9 * (+cI * (P2[2] * V1[2] + P2[0] *
      V1[4]))))));
  T3[5] = denom * (OM3 * (P3[0] * (P3[3] * (OM3 * (TMP10 * 1.333333333 * (-cI *
      (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[3] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[3] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[5] * TMP12 + V2[5] * TMP10))
      + (+cI * (V1[5] * TMP9 * TMP11 + V2[5] * TMP13 * TMP14)))))) + P3[3] *
      (P1[0] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[0] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[2] *
      TMP10 + V1[2] * TMP12)) + (+cI * (V1[2] * TMP9 * TMP11 + V2[2] * TMP13 *
      TMP14)))))) + (P1[0] * (-cI * (V2[5] * TMP13) + cI * (P2[3] * TMP8)) +
      (P1[3] * (-cI * (V2[2] * TMP13) + cI * (P2[0] * TMP8)) + (TMP15 * (+cI *
      (V2[2] * V1[5] + V2[5] * V1[2])) - TMP9 * (+cI * (P2[3] * V1[2] + P2[0] *
      V1[5]))))));
  T3[6] = denom * (OM3 * (P3[0] * (P3[1] * (OM3 * (TMP10 * 1.333333333 * (-cI *
      (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[1] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[1] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[3] * TMP10 + V1[3] * TMP12))
      + (+cI * (V1[3] * TMP9 * TMP11 + V2[3] * TMP13 * TMP14)))))) + P3[1] *
      (P1[0] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[0] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[2] *
      TMP12 + V2[2] * TMP10)) + (+cI * (V1[2] * TMP9 * TMP11 + V2[2] * TMP13 *
      TMP14)))))) + (P1[0] * (-cI * (V2[3] * TMP13) + cI * (P2[1] * TMP8)) +
      (P1[1] * (-cI * (V2[2] * TMP13) + cI * (P2[0] * TMP8)) + (TMP15 * (+cI *
      (V2[3] * V1[2] + V2[2] * V1[3])) - TMP9 * (+cI * (P2[0] * V1[3] + P2[1] *
      V1[2]))))));
  T3[7] = denom * 2. * (OM3 * (P3[1] * (P3[1] * (OM3 * (TMP10 * 0.666666667 *
      (-cI * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 0.666666667 * (TMP14 *
      (-cI * (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-0.666666667 * cI *
      (TMP9 * TMP13) + 0.666666667 * cI * (TMP8 * TMP15))) + (P1[1] * (-cI *
      (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[1] * (-cI * (TMP8 * TMP14) +
      cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[3] * TMP10 + V1[3] *
      TMP12)) + (+cI * (V1[3] * TMP9 * TMP11 + V2[3] * TMP13 * TMP14)))))) +
      (TMP10 * 0.333333333 * (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11)) +
      0.333333333 * (TMP14 * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13))))) +
      (TMP13 * - 1. * (+cI * (V2[3] * P1[1]) + 0.666666667 * cI * (TMP9)) +
      (TMP15 * (+cI * (V2[3] * V1[3]) + 0.666666667 * cI * (TMP8)) + P2[1] *
      (-cI * (V1[3] * TMP9) + cI * (P1[1] * TMP8)))));
  T3[8] = denom * (OM3 * (P3[1] * (P3[2] * (OM3 * (TMP10 * 1.333333333 * (-cI *
      (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[2] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[2] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[4] * TMP12 + V2[4] * TMP10))
      + (+cI * (V1[4] * TMP9 * TMP11 + V2[4] * TMP13 * TMP14)))))) + P3[2] *
      (P1[1] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[1] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[3] *
      TMP10 + V1[3] * TMP12)) + (+cI * (V1[3] * TMP9 * TMP11 + V2[3] * TMP13 *
      TMP14)))))) + (P1[1] * (-cI * (V2[4] * TMP13) + cI * (P2[2] * TMP8)) +
      (P1[2] * (-cI * (V2[3] * TMP13) + cI * (P2[1] * TMP8)) + (TMP15 * (+cI *
      (V2[3] * V1[4] + V2[4] * V1[3])) - TMP9 * (+cI * (P2[2] * V1[3] + P2[1] *
      V1[4]))))));
  T3[9] = denom * (OM3 * (P3[1] * (P3[3] * (OM3 * (TMP10 * 1.333333333 * (-cI *
      (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[3] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[3] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[5] * TMP12 + V2[5] * TMP10))
      + (+cI * (V1[5] * TMP9 * TMP11 + V2[5] * TMP13 * TMP14)))))) + P3[3] *
      (P1[1] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[1] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[3] *
      TMP10 + V1[3] * TMP12)) + (+cI * (V1[3] * TMP9 * TMP11 + V2[3] * TMP13 *
      TMP14)))))) + (P1[1] * (-cI * (V2[5] * TMP13) + cI * (P2[3] * TMP8)) +
      (P1[3] * (-cI * (V2[3] * TMP13) + cI * (P2[1] * TMP8)) + (TMP15 * (+cI *
      (V2[3] * V1[5] + V2[5] * V1[3])) - TMP9 * (+cI * (P2[3] * V1[3] + P2[1] *
      V1[5]))))));
  T3[10] = denom * (OM3 * (P3[0] * (P3[2] * (OM3 * (TMP10 * 1.333333333 * (-cI
      * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[2] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[2] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[4] * TMP10 + V1[4] * TMP12))
      + (+cI * (V1[4] * TMP9 * TMP11 + V2[4] * TMP13 * TMP14)))))) + P3[2] *
      (P1[0] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[0] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[2] *
      TMP12 + V2[2] * TMP10)) + (+cI * (V1[2] * TMP9 * TMP11 + V2[2] * TMP13 *
      TMP14)))))) + (P1[0] * (-cI * (V2[4] * TMP13) + cI * (P2[2] * TMP8)) +
      (P1[2] * (-cI * (V2[2] * TMP13) + cI * (P2[0] * TMP8)) + (TMP15 * (+cI *
      (V2[4] * V1[2] + V2[2] * V1[4])) - TMP9 * (+cI * (P2[0] * V1[4] + P2[2] *
      V1[2]))))));
  T3[11] = denom * (OM3 * (P3[1] * (P3[2] * (OM3 * (TMP10 * 1.333333333 * (-cI
      * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[2] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[2] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[4] * TMP10 + V1[4] * TMP12))
      + (+cI * (V1[4] * TMP9 * TMP11 + V2[4] * TMP13 * TMP14)))))) + P3[2] *
      (P1[1] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[1] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[3] *
      TMP12 + V2[3] * TMP10)) + (+cI * (V1[3] * TMP9 * TMP11 + V2[3] * TMP13 *
      TMP14)))))) + (P1[1] * (-cI * (V2[4] * TMP13) + cI * (P2[2] * TMP8)) +
      (P1[2] * (-cI * (V2[3] * TMP13) + cI * (P2[1] * TMP8)) + (TMP15 * (+cI *
      (V2[4] * V1[3] + V2[3] * V1[4])) - TMP9 * (+cI * (P2[1] * V1[4] + P2[2] *
      V1[3]))))));
  T3[12] = denom * 2. * (OM3 * (P3[2] * (P3[2] * (OM3 * (TMP10 * 0.666666667 *
      (-cI * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 0.666666667 * (TMP14 *
      (-cI * (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-0.666666667 * cI *
      (TMP9 * TMP13) + 0.666666667 * cI * (TMP8 * TMP15))) + (P1[2] * (-cI *
      (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[2] * (-cI * (TMP8 * TMP14) +
      cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[4] * TMP10 + V1[4] *
      TMP12)) + (+cI * (V1[4] * TMP9 * TMP11 + V2[4] * TMP13 * TMP14)))))) +
      (TMP10 * 0.333333333 * (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11)) +
      0.333333333 * (TMP14 * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13))))) +
      (TMP13 * - 1. * (+cI * (V2[4] * P1[2]) + 0.666666667 * cI * (TMP9)) +
      (TMP15 * (+cI * (V2[4] * V1[4]) + 0.666666667 * cI * (TMP8)) + P2[2] *
      (-cI * (V1[4] * TMP9) + cI * (P1[2] * TMP8)))));
  T3[13] = denom * (OM3 * (P3[2] * (P3[3] * (OM3 * (TMP10 * 1.333333333 * (-cI
      * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[3] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[3] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[5] * TMP12 + V2[5] * TMP10))
      + (+cI * (V1[5] * TMP9 * TMP11 + V2[5] * TMP13 * TMP14)))))) + P3[3] *
      (P1[2] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[2] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[4] *
      TMP10 + V1[4] * TMP12)) + (+cI * (V1[4] * TMP9 * TMP11 + V2[4] * TMP13 *
      TMP14)))))) + (P1[2] * (-cI * (V2[5] * TMP13) + cI * (P2[3] * TMP8)) +
      (P1[3] * (-cI * (V2[4] * TMP13) + cI * (P2[2] * TMP8)) + (TMP15 * (+cI *
      (V2[4] * V1[5] + V2[5] * V1[4])) - TMP9 * (+cI * (P2[3] * V1[4] + P2[2] *
      V1[5]))))));
  T3[14] = denom * (OM3 * (P3[0] * (P3[3] * (OM3 * (TMP10 * 1.333333333 * (-cI
      * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[3] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[3] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[5] * TMP10 + V1[5] * TMP12))
      + (+cI * (V1[5] * TMP9 * TMP11 + V2[5] * TMP13 * TMP14)))))) + P3[3] *
      (P1[0] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[0] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[2] *
      TMP12 + V2[2] * TMP10)) + (+cI * (V1[2] * TMP9 * TMP11 + V2[2] * TMP13 *
      TMP14)))))) + (P1[0] * (-cI * (V2[5] * TMP13) + cI * (P2[3] * TMP8)) +
      (P1[3] * (-cI * (V2[2] * TMP13) + cI * (P2[0] * TMP8)) + (TMP15 * (+cI *
      (V2[5] * V1[2] + V2[2] * V1[5])) - TMP9 * (+cI * (P2[0] * V1[5] + P2[3] *
      V1[2]))))));
  T3[15] = denom * (OM3 * (P3[1] * (P3[3] * (OM3 * (TMP10 * 1.333333333 * (-cI
      * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[3] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[3] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[5] * TMP10 + V1[5] * TMP12))
      + (+cI * (V1[5] * TMP9 * TMP11 + V2[5] * TMP13 * TMP14)))))) + P3[3] *
      (P1[1] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[1] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[3] *
      TMP12 + V2[3] * TMP10)) + (+cI * (V1[3] * TMP9 * TMP11 + V2[3] * TMP13 *
      TMP14)))))) + (P1[1] * (-cI * (V2[5] * TMP13) + cI * (P2[3] * TMP8)) +
      (P1[3] * (-cI * (V2[3] * TMP13) + cI * (P2[1] * TMP8)) + (TMP15 * (+cI *
      (V2[5] * V1[3] + V2[3] * V1[5])) - TMP9 * (+cI * (P2[1] * V1[5] + P2[3] *
      V1[3]))))));
  T3[16] = denom * (OM3 * (P3[2] * (P3[3] * (OM3 * (TMP10 * 1.333333333 * (-cI
      * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 1.333333333 * (TMP14 * (-cI *
      (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-1.333333333 * cI * (TMP9 *
      TMP13) + 1.333333333 * cI * (TMP8 * TMP15))) + (P1[3] * (-cI * (TMP8 *
      TMP11) + cI * (TMP12 * TMP13)) + (P2[3] * (-cI * (TMP8 * TMP14) + cI *
      (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[5] * TMP10 + V1[5] * TMP12))
      + (+cI * (V1[5] * TMP9 * TMP11 + V2[5] * TMP13 * TMP14)))))) + P3[3] *
      (P1[2] * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[2] * (-cI *
      (TMP8 * TMP14) + cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V1[4] *
      TMP12 + V2[4] * TMP10)) + (+cI * (V1[4] * TMP9 * TMP11 + V2[4] * TMP13 *
      TMP14)))))) + (P1[2] * (-cI * (V2[5] * TMP13) + cI * (P2[3] * TMP8)) +
      (P1[3] * (-cI * (V2[4] * TMP13) + cI * (P2[2] * TMP8)) + (TMP15 * (+cI *
      (V2[5] * V1[4] + V2[4] * V1[5])) - TMP9 * (+cI * (P2[2] * V1[5] + P2[3] *
      V1[4]))))));
  T3[17] = denom * 2. * (OM3 * (P3[3] * (P3[3] * (OM3 * (TMP10 * 0.666666667 *
      (-cI * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) + 0.666666667 * (TMP14 *
      (-cI * (TMP12 * TMP13) + cI * (TMP8 * TMP11)))) + (-0.666666667 * cI *
      (TMP9 * TMP13) + 0.666666667 * cI * (TMP8 * TMP15))) + (P1[3] * (-cI *
      (TMP8 * TMP11) + cI * (TMP12 * TMP13)) + (P2[3] * (-cI * (TMP8 * TMP14) +
      cI * (TMP9 * TMP10)) + (TMP15 * - 1. * (+cI * (V2[5] * TMP10 + V1[5] *
      TMP12)) + (+cI * (V1[5] * TMP9 * TMP11 + V2[5] * TMP13 * TMP14)))))) +
      (TMP10 * 0.333333333 * (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11)) +
      0.333333333 * (TMP14 * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13))))) +
      (TMP13 * - 1. * (+cI * (V2[5] * P1[3]) + 0.666666667 * cI * (TMP9)) +
      (TMP15 * (+cI * (V2[5] * V1[5]) + 0.666666667 * cI * (TMP8)) + P2[3] *
      (-cI * (V1[5] * TMP9) + cI * (P1[3] * TMP8)))));
}


void VVT9_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP12; 
  complex<double> TMP11; 
  double P1[4]; 
  complex<double> TMP10; 
  double P2[4]; 
  double P3[4]; 
  complex<double> denom; 
  double OM3; 
  complex<double> TMP14; 
  complex<double> TMP9; 
  complex<double> TMP13; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]); 
  TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * 2. * (OM3 * (TMP10 * (TMP12 * (P3[0] * (OM3 * 0.666666667 *
      P3[0] * (+cI * (TMP11 + TMP14)) + (-cI * (P2[0] + P1[0]))) +
      (+0.333333333 * cI * (TMP11 + TMP14))) + P3[0] * (-cI * (V2[2] * TMP14) +
      0.333333333 * cI * (P3[0] * TMP9))) + P3[0] * TMP12 * (-cI * (V1[2] *
      TMP11) + 0.333333333 * cI * (P3[0] * TMP13))) + (TMP10 * (-0.333333333 *
      cI * (TMP9) + cI * (V2[2] * P1[0])) + TMP12 * (-0.333333333 * cI *
      (TMP13) + cI * (P2[0] * V1[2]))));
  T3[3] = denom * (OM3 * (TMP10 * (TMP12 * (P3[0] * (OM3 * 1.333333333 * P3[1]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[1] + P1[1]))) - P3[1] * (+cI *
      (P2[0] + P1[0]))) + (P3[0] * (-cI * (V2[3] * TMP14) + 0.666666667 * cI *
      (P3[1] * TMP9)) - cI * (P3[1] * V2[2] * TMP14))) + TMP12 * (P3[0] * (-cI
      * (V1[3] * TMP11) + 0.666666667 * cI * (P3[1] * TMP13)) - cI * (P3[1] *
      V1[2] * TMP11))) + (TMP10 * (+cI * (V2[2] * P1[1] + V2[3] * P1[0])) +
      TMP12 * (+cI * (P2[1] * V1[2] + P2[0] * V1[3]))));
  T3[4] = denom * (OM3 * (TMP10 * (TMP12 * (P3[0] * (OM3 * 1.333333333 * P3[2]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[2] + P1[2]))) - P3[2] * (+cI *
      (P2[0] + P1[0]))) + (P3[0] * (-cI * (V2[4] * TMP14) + 0.666666667 * cI *
      (P3[2] * TMP9)) - cI * (P3[2] * V2[2] * TMP14))) + TMP12 * (P3[0] * (-cI
      * (V1[4] * TMP11) + 0.666666667 * cI * (P3[2] * TMP13)) - cI * (P3[2] *
      V1[2] * TMP11))) + (TMP10 * (+cI * (V2[2] * P1[2] + V2[4] * P1[0])) +
      TMP12 * (+cI * (P2[2] * V1[2] + P2[0] * V1[4]))));
  T3[5] = denom * (OM3 * (TMP10 * (TMP12 * (P3[0] * (OM3 * 1.333333333 * P3[3]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[3] + P1[3]))) - P3[3] * (+cI *
      (P2[0] + P1[0]))) + (P3[0] * (-cI * (V2[5] * TMP14) + 0.666666667 * cI *
      (P3[3] * TMP9)) - cI * (P3[3] * V2[2] * TMP14))) + TMP12 * (P3[0] * (-cI
      * (V1[5] * TMP11) + 0.666666667 * cI * (P3[3] * TMP13)) - cI * (P3[3] *
      V1[2] * TMP11))) + (TMP10 * (+cI * (V2[2] * P1[3] + V2[5] * P1[0])) +
      TMP12 * (+cI * (P2[3] * V1[2] + P2[0] * V1[5]))));
  T3[6] = denom * (OM3 * (TMP10 * (TMP12 * (P3[0] * (OM3 * 1.333333333 * P3[1]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[1] + P1[1]))) - P3[1] * (+cI *
      (P2[0] + P1[0]))) + (P3[0] * (-cI * (V2[3] * TMP14) + 0.666666667 * cI *
      (P3[1] * TMP9)) - cI * (P3[1] * V2[2] * TMP14))) + TMP12 * (P3[0] * (-cI
      * (V1[3] * TMP11) + 0.666666667 * cI * (P3[1] * TMP13)) - cI * (P3[1] *
      V1[2] * TMP11))) + (TMP10 * (+cI * (V2[3] * P1[0] + V2[2] * P1[1])) +
      TMP12 * (+cI * (P2[0] * V1[3] + P2[1] * V1[2]))));
  T3[7] = denom * 2. * (OM3 * (TMP10 * (TMP12 * (P3[1] * (OM3 * 0.666666667 *
      P3[1] * (+cI * (TMP11 + TMP14)) + (-cI * (P2[1] + P1[1]))) +
      (-0.333333333 * cI * (TMP11 + TMP14))) + P3[1] * (-cI * (V2[3] * TMP14) +
      0.333333333 * cI * (P3[1] * TMP9))) + P3[1] * TMP12 * (-cI * (V1[3] *
      TMP11) + 0.333333333 * cI * (P3[1] * TMP13))) + (TMP10 * (+cI * (V2[3] *
      P1[1]) + 0.333333333 * cI * (TMP9)) + TMP12 * (+cI * (P2[1] * V1[3]) +
      0.333333333 * cI * (TMP13))));
  T3[8] = denom * (OM3 * (TMP10 * (TMP12 * (P3[1] * (OM3 * 1.333333333 * P3[2]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[2] + P1[2]))) - P3[2] * (+cI *
      (P2[1] + P1[1]))) + (P3[1] * (-cI * (V2[4] * TMP14) + 0.666666667 * cI *
      (P3[2] * TMP9)) - cI * (P3[2] * V2[3] * TMP14))) + TMP12 * (P3[1] * (-cI
      * (V1[4] * TMP11) + 0.666666667 * cI * (P3[2] * TMP13)) - cI * (P3[2] *
      V1[3] * TMP11))) + (TMP10 * (+cI * (V2[3] * P1[2] + V2[4] * P1[1])) +
      TMP12 * (+cI * (P2[2] * V1[3] + P2[1] * V1[4]))));
  T3[9] = denom * (OM3 * (TMP10 * (TMP12 * (P3[1] * (OM3 * 1.333333333 * P3[3]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[3] + P1[3]))) - P3[3] * (+cI *
      (P2[1] + P1[1]))) + (P3[1] * (-cI * (V2[5] * TMP14) + 0.666666667 * cI *
      (P3[3] * TMP9)) - cI * (P3[3] * V2[3] * TMP14))) + TMP12 * (P3[1] * (-cI
      * (V1[5] * TMP11) + 0.666666667 * cI * (P3[3] * TMP13)) - cI * (P3[3] *
      V1[3] * TMP11))) + (TMP10 * (+cI * (V2[3] * P1[3] + V2[5] * P1[1])) +
      TMP12 * (+cI * (P2[3] * V1[3] + P2[1] * V1[5]))));
  T3[10] = denom * (OM3 * (TMP10 * (TMP12 * (P3[0] * (OM3 * 1.333333333 * P3[2]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[2] + P1[2]))) - P3[2] * (+cI *
      (P2[0] + P1[0]))) + (P3[0] * (-cI * (V2[4] * TMP14) + 0.666666667 * cI *
      (P3[2] * TMP9)) - cI * (P3[2] * V2[2] * TMP14))) + TMP12 * (P3[0] * (-cI
      * (V1[4] * TMP11) + 0.666666667 * cI * (P3[2] * TMP13)) - cI * (P3[2] *
      V1[2] * TMP11))) + (TMP10 * (+cI * (V2[4] * P1[0] + V2[2] * P1[2])) +
      TMP12 * (+cI * (P2[0] * V1[4] + P2[2] * V1[2]))));
  T3[11] = denom * (OM3 * (TMP10 * (TMP12 * (P3[1] * (OM3 * 1.333333333 * P3[2]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[2] + P1[2]))) - P3[2] * (+cI *
      (P2[1] + P1[1]))) + (P3[1] * (-cI * (V2[4] * TMP14) + 0.666666667 * cI *
      (P3[2] * TMP9)) - cI * (P3[2] * V2[3] * TMP14))) + TMP12 * (P3[1] * (-cI
      * (V1[4] * TMP11) + 0.666666667 * cI * (P3[2] * TMP13)) - cI * (P3[2] *
      V1[3] * TMP11))) + (TMP10 * (+cI * (V2[4] * P1[1] + V2[3] * P1[2])) +
      TMP12 * (+cI * (P2[1] * V1[4] + P2[2] * V1[3]))));
  T3[12] = denom * 2. * (OM3 * (TMP10 * (TMP12 * (P3[2] * (OM3 * 0.666666667 *
      P3[2] * (+cI * (TMP11 + TMP14)) + (-cI * (P2[2] + P1[2]))) +
      (-0.333333333 * cI * (TMP11 + TMP14))) + P3[2] * (-cI * (V2[4] * TMP14) +
      0.333333333 * cI * (P3[2] * TMP9))) + P3[2] * TMP12 * (-cI * (V1[4] *
      TMP11) + 0.333333333 * cI * (P3[2] * TMP13))) + (TMP10 * (+cI * (V2[4] *
      P1[2]) + 0.333333333 * cI * (TMP9)) + TMP12 * (+cI * (P2[2] * V1[4]) +
      0.333333333 * cI * (TMP13))));
  T3[13] = denom * (OM3 * (TMP10 * (TMP12 * (P3[2] * (OM3 * 1.333333333 * P3[3]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[3] + P1[3]))) - P3[3] * (+cI *
      (P2[2] + P1[2]))) + (P3[2] * (-cI * (V2[5] * TMP14) + 0.666666667 * cI *
      (P3[3] * TMP9)) - cI * (P3[3] * V2[4] * TMP14))) + TMP12 * (P3[2] * (-cI
      * (V1[5] * TMP11) + 0.666666667 * cI * (P3[3] * TMP13)) - cI * (P3[3] *
      V1[4] * TMP11))) + (TMP10 * (+cI * (V2[4] * P1[3] + V2[5] * P1[2])) +
      TMP12 * (+cI * (P2[3] * V1[4] + P2[2] * V1[5]))));
  T3[14] = denom * (OM3 * (TMP10 * (TMP12 * (P3[0] * (OM3 * 1.333333333 * P3[3]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[3] + P1[3]))) - P3[3] * (+cI *
      (P2[0] + P1[0]))) + (P3[0] * (-cI * (V2[5] * TMP14) + 0.666666667 * cI *
      (P3[3] * TMP9)) - cI * (P3[3] * V2[2] * TMP14))) + TMP12 * (P3[0] * (-cI
      * (V1[5] * TMP11) + 0.666666667 * cI * (P3[3] * TMP13)) - cI * (P3[3] *
      V1[2] * TMP11))) + (TMP10 * (+cI * (V2[5] * P1[0] + V2[2] * P1[3])) +
      TMP12 * (+cI * (P2[0] * V1[5] + P2[3] * V1[2]))));
  T3[15] = denom * (OM3 * (TMP10 * (TMP12 * (P3[1] * (OM3 * 1.333333333 * P3[3]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[3] + P1[3]))) - P3[3] * (+cI *
      (P2[1] + P1[1]))) + (P3[1] * (-cI * (V2[5] * TMP14) + 0.666666667 * cI *
      (P3[3] * TMP9)) - cI * (P3[3] * V2[3] * TMP14))) + TMP12 * (P3[1] * (-cI
      * (V1[5] * TMP11) + 0.666666667 * cI * (P3[3] * TMP13)) - cI * (P3[3] *
      V1[3] * TMP11))) + (TMP10 * (+cI * (V2[5] * P1[1] + V2[3] * P1[3])) +
      TMP12 * (+cI * (P2[1] * V1[5] + P2[3] * V1[3]))));
  T3[16] = denom * (OM3 * (TMP10 * (TMP12 * (P3[2] * (OM3 * 1.333333333 * P3[3]
      * (+cI * (TMP11 + TMP14)) + (-cI * (P2[3] + P1[3]))) - P3[3] * (+cI *
      (P2[2] + P1[2]))) + (P3[2] * (-cI * (V2[5] * TMP14) + 0.666666667 * cI *
      (P3[3] * TMP9)) - cI * (P3[3] * V2[4] * TMP14))) + TMP12 * (P3[2] * (-cI
      * (V1[5] * TMP11) + 0.666666667 * cI * (P3[3] * TMP13)) - cI * (P3[3] *
      V1[4] * TMP11))) + (TMP10 * (+cI * (V2[5] * P1[2] + V2[4] * P1[3])) +
      TMP12 * (+cI * (P2[2] * V1[5] + P2[3] * V1[4]))));
  T3[17] = denom * 2. * (OM3 * (TMP10 * (TMP12 * (P3[3] * (OM3 * 0.666666667 *
      P3[3] * (+cI * (TMP11 + TMP14)) + (-cI * (P2[3] + P1[3]))) +
      (-0.333333333 * cI * (TMP11 + TMP14))) + P3[3] * (-cI * (V2[5] * TMP14) +
      0.333333333 * cI * (P3[3] * TMP9))) + P3[3] * TMP12 * (-cI * (V1[5] *
      TMP11) + 0.333333333 * cI * (P3[3] * TMP13))) + (TMP10 * (+cI * (V2[5] *
      P1[3]) + 0.333333333 * cI * (TMP9)) + TMP12 * (+cI * (P2[3] * V1[5]) +
      0.333333333 * cI * (TMP13))));
}


void VVT4_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP12; 
  complex<double> TMP11; 
  double P1[4]; 
  complex<double> TMP10; 
  double P2[4]; 
  complex<double> TMP31; 
  double P3[4]; 
  complex<double> TMP30; 
  complex<double> denom; 
  double OM3; 
  complex<double> TMP14; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP31 = -1. * (P1[0] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P2[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P2[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))) + (P1[1] * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P2[2] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P2[3] * (P3[2] * V1[2] - P3[0] *
      V1[4]))) + (P1[2] * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P2[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P2[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + P1[3] * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P2[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P2[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))))));
  TMP30 = -1. * (P1[0] * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] *
      (P3[1] * V2[5] - P3[3] * V2[3]) + P2[3] * (P3[2] * V2[3] - P3[1] *
      V2[4]))) + (P1[1] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[4] - P3[2] *
      V2[2]))) + (P1[2] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P2[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P1[3] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P2[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P2[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))))));
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * - 2. * cI * (TMP10 * (OM3 * P3[0] * (TMP14 * (P2[1] * (P3[2]
      * V2[5] - P3[3] * V2[4]) + (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
      P2[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) - 0.333333333 * (P3[0] *
      TMP30)) + (P1[0] * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] *
      (P3[1] * V2[5] - P3[3] * V2[3]) + P2[3] * (P3[2] * V2[3] - P3[1] *
      V2[4]))) + 0.333333333 * (TMP30))) + TMP12 * (OM3 * P3[0] * (TMP11 *
      (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] * (P3[3] * V1[3] -
      P3[1] * V1[5]) + P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) - 0.333333333
      * (P3[0] * TMP31)) + (P2[0] * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
      (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) + P1[3] * (P3[2] * V1[3] - P3[1]
      * V1[4]))) + 0.333333333 * (TMP31))));
  T3[6] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP14 * (P2[0] * (P3[3] *
      V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3]
      * (P3[2] * V2[2] - P3[0] * V2[4]))) + 0.666666667 * (P3[1] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[2] * V1[2] - P3[0] *
      V1[4]))) + 0.666666667 * (P3[1] * TMP31))) + P3[1] * (TMP10 * TMP14 *
      (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP11 *
      TMP12 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P1[0] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[4] - P3[2] *
      V2[2]))) + P1[1] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P2[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P2[0] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
      (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[4] - P3[2]
      * V1[2]))) + P2[1] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P1[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[10] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP14 * (P2[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.666666667 * (P3[2] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P1[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.666666667 * (P3[2] * TMP31))) + P3[2] * (TMP10 * TMP14 *
      (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP11 *
      TMP12 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P1[0] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P2[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P1[2] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P2[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P2[0] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
      (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[1] * V1[2] - P3[0]
      * V1[3]))) + P2[2] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P1[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[14] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP14 * (P2[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P2[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P1[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P1[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP31))) + P3[3] * (TMP10 * TMP14 *
      (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP11 *
      TMP12 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P1[0] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P2[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P2[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P1[3] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P2[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P2[0] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P1[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P2[3] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P1[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[3] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP14 * (P2[0] * (P3[3] *
      V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3]
      * (P3[2] * V2[2] - P3[0] * V2[4]))) + 0.666666667 * (P3[1] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[2] * V1[2] - P3[0] *
      V1[4]))) + 0.666666667 * (P3[1] * TMP31))) + P3[1] * (TMP10 * TMP14 *
      (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP11 *
      TMP12 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P1[0] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[4] - P3[2] *
      V2[2]))) + P1[1] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P2[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P2[0] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
      (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[4] - P3[2]
      * V1[2]))) + P2[1] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P1[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[7] = denom * 2. * cI * (TMP10 * (OM3 * P3[1] * (TMP14 * (P2[0] * (P3[3] *
      V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3]
      * (P3[2] * V2[2] - P3[0] * V2[4]))) + 0.333333333 * (P3[1] * TMP30)) +
      (P1[1] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] * (P3[3] *
      V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
      0.333333333 * (TMP30))) + TMP12 * (OM3 * P3[1] * (TMP11 * (P1[0] * (P3[3]
      * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
      P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) + 0.333333333 * (P3[1] *
      TMP31)) + (P2[1] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))) + 0.333333333 * (TMP31))));
  T3[11] = denom * cI * (OM3 * (P3[1] * (TMP10 * (TMP14 * (P2[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.666666667 * (P3[2] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P1[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.666666667 * (P3[2] * TMP31))) + P3[2] * (TMP10 * TMP14 *
      (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[0] * V2[5] -
      P3[3] * V2[2]) + P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) + TMP11 *
      TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[0] *
      V1[5] - P3[3] * V1[2]) + P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))))) +
      (TMP10 * (P1[1] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P2[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P1[2] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[4] - P3[2] *
      V2[2])))) + TMP12 * (P2[1] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
      (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[1] * V1[2] - P3[0]
      * V1[3]))) + P2[2] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))))));
  T3[15] = denom * cI * (OM3 * (P3[1] * (TMP10 * (TMP14 * (P2[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P2[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P1[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P1[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP31))) + P3[3] * (TMP10 * TMP14 *
      (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[0] * V2[5] -
      P3[3] * V2[2]) + P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) + TMP11 *
      TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[0] *
      V1[5] - P3[3] * V1[2]) + P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))))) +
      (TMP10 * (P1[1] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P2[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P2[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P1[3] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[4] - P3[2] *
      V2[2])))) + TMP12 * (P2[1] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P1[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P2[3] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))))));
  T3[4] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP14 * (P2[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.666666667 * (P3[2] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P1[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.666666667 * (P3[2] * TMP31))) + P3[2] * (TMP10 * TMP14 *
      (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP11 *
      TMP12 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P1[0] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P2[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P1[2] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P2[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P2[0] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
      (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[1] * V1[2] - P3[0]
      * V1[3]))) + P2[2] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P1[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[8] = denom * cI * (OM3 * (P3[1] * (TMP10 * (TMP14 * (P2[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.666666667 * (P3[2] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P1[1] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.666666667 * (P3[2] * TMP31))) + P3[2] * (TMP10 * TMP14 *
      (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[0] * V2[5] -
      P3[3] * V2[2]) + P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) + TMP11 *
      TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[0] *
      V1[5] - P3[3] * V1[2]) + P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))))) +
      (TMP10 * (P1[1] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P2[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3] * (P3[1] * V2[2] - P3[0] *
      V2[3]))) + P1[2] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[4] - P3[2] *
      V2[2])))) + TMP12 * (P2[1] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
      (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[1] * V1[2] - P3[0]
      * V1[3]))) + P2[2] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))))));
  T3[12] = denom * 2. * cI * (TMP10 * (OM3 * P3[2] * (TMP14 * (P2[0] * (P3[1] *
      V2[5] - P3[3] * V2[3]) + (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3]
      * (P3[0] * V2[3] - P3[1] * V2[2]))) + 0.333333333 * (P3[2] * TMP30)) +
      (P1[2] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P2[1] * (P3[0] *
      V2[5] - P3[3] * V2[2]) + P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
      0.333333333 * (TMP30))) + TMP12 * (OM3 * P3[2] * (TMP11 * (P1[0] * (P3[1]
      * V1[5] - P3[3] * V1[3]) + (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
      P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) + 0.333333333 * (P3[2] *
      TMP31)) + (P2[2] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) + (P1[1] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.333333333 * (TMP31))));
  T3[16] = denom * cI * (OM3 * (P3[2] * (TMP10 * (TMP14 * (P2[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P2[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P1[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P1[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP31))) + P3[3] * (TMP10 * TMP14 *
      (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) + (P2[1] * (P3[3] * V2[2] -
      P3[0] * V2[5]) + P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) + TMP11 *
      TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P1[1] * (P3[3] *
      V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))))) +
      (TMP10 * (P1[2] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P2[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P2[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P1[3] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P2[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3] * (P3[1] * V2[2] - P3[0] *
      V2[3])))) + TMP12 * (P2[2] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P1[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P2[3] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) + (P1[1] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[1] * V1[2] - P3[0] *
      V1[3]))))));
  T3[5] = denom * cI * (OM3 * (P3[0] * (TMP10 * (TMP14 * (P2[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P2[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P1[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P1[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP31))) + P3[3] * (TMP10 * TMP14 *
      (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[1] * V2[5] -
      P3[3] * V2[3]) + P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) + TMP11 *
      TMP12 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[1] *
      V1[5] - P3[3] * V1[3]) + P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))))) +
      (TMP10 * (P1[0] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P2[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P2[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P1[3] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[3] - P3[1] * V2[5]) + P2[3] * (P3[1] * V2[4] - P3[2] *
      V2[3])))) + TMP12 * (P2[0] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P1[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P2[3] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[3] - P3[1] * V1[5]) + P1[3] * (P3[1] * V1[4] - P3[2] *
      V1[3]))))));
  T3[9] = denom * cI * (OM3 * (P3[1] * (TMP10 * (TMP14 * (P2[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P2[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P1[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P1[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP31))) + P3[3] * (TMP10 * TMP14 *
      (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) + (P2[2] * (P3[0] * V2[5] -
      P3[3] * V2[2]) + P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) + TMP11 *
      TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) + (P1[2] * (P3[0] *
      V1[5] - P3[3] * V1[2]) + P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))))) +
      (TMP10 * (P1[1] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P2[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P2[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P1[3] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) + (P2[2] *
      (P3[3] * V2[2] - P3[0] * V2[5]) + P2[3] * (P3[0] * V2[4] - P3[2] *
      V2[2])))) + TMP12 * (P2[1] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P1[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P2[3] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) + (P1[2] *
      (P3[3] * V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[4] - P3[2] *
      V1[2]))))));
  T3[13] = denom * cI * (OM3 * (P3[2] * (TMP10 * (TMP14 * (P2[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P2[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.666666667 * (P3[3] * TMP30)) +
      TMP12 * (TMP11 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) + (P1[1] *
      (P3[0] * V1[4] - P3[2] * V1[2]) + P1[2] * (P3[1] * V1[2] - P3[0] *
      V1[3]))) + 0.666666667 * (P3[3] * TMP31))) + P3[3] * (TMP10 * TMP14 *
      (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) + (P2[1] * (P3[3] * V2[2] -
      P3[0] * V2[5]) + P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) + TMP11 *
      TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) + (P1[1] * (P3[3] *
      V1[2] - P3[0] * V1[5]) + P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))))) +
      (TMP10 * (P1[2] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P2[1] *
      (P3[2] * V2[2] - P3[0] * V2[4]) + P2[2] * (P3[0] * V2[3] - P3[1] *
      V2[2]))) + P1[3] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) + (P2[1] *
      (P3[0] * V2[5] - P3[3] * V2[2]) + P2[3] * (P3[1] * V2[2] - P3[0] *
      V2[3])))) + TMP12 * (P2[2] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
      (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) + P1[2] * (P3[0] * V1[3] - P3[1]
      * V1[2]))) + P2[3] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) + (P1[1] *
      (P3[0] * V1[5] - P3[3] * V1[2]) + P1[3] * (P3[1] * V1[2] - P3[0] *
      V1[3]))))));
  T3[17] = denom * 2. * cI * (TMP10 * (OM3 * P3[3] * (TMP14 * (P2[0] * (P3[2] *
      V2[3] - P3[1] * V2[4]) + (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) + P2[2]
      * (P3[1] * V2[2] - P3[0] * V2[3]))) + 0.333333333 * (P3[3] * TMP30)) +
      (P1[3] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) + (P2[1] * (P3[2] *
      V2[2] - P3[0] * V2[4]) + P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
      0.333333333 * (TMP30))) + TMP12 * (OM3 * P3[3] * (TMP11 * (P1[0] * (P3[2]
      * V1[3] - P3[1] * V1[4]) + (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
      P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) + 0.333333333 * (P3[3] *
      TMP31)) + (P2[3] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) + (P1[1] *
      (P3[2] * V1[2] - P3[0] * V1[4]) + P1[2] * (P3[0] * V1[3] - P3[1] *
      V1[2]))) + 0.333333333 * (TMP31))));
}


void VVT12_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP60; 
  double P1[4]; 
  double P2[4]; 
  complex<double> denom; 
  complex<double> TMP15; 
  double OM1; 
  complex<double> TMP28; 
  complex<double> TMP29; 
  complex<double> TMP24; 
  complex<double> TMP25; 
  complex<double> TMP9; 
  OM1 = 0.; 
  if (M1 != 0.)
    OM1 = 1./pow(M1, 2); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP24 = (P1[0] * - 1. * (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] *
      T3[15] - P2[0] * T3[3]) + (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] +
      P2[3] * T3[16] - P2[0] * T3[4]) + P1[3] * (P2[1] * T3[9] + P2[2] * T3[13]
      + P2[3] * T3[17] - P2[0] * T3[5]))));
  TMP25 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  TMP60 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  TMP28 = (P1[0] * - 1. * (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] -
      V2[2] * T3[2]) + (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] *
      T3[15] - V2[2] * T3[3]) + (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] +
      V2[5] * T3[16] - V2[2] * T3[4]) + P1[3] * (V2[3] * T3[9] + V2[4] * T3[13]
      + V2[5] * T3[17] - V2[2] * T3[5]))));
  TMP29 = (P1[0] * - 1. * (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] -
      V2[2] * T3[2]) + (P1[1] * (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9]
      - V2[2] * T3[6]) + (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] *
      T3[13] - V2[2] * T3[10]) + P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] +
      V2[5] * T3[17] - V2[2] * T3[14]))));
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * (TMP9 * (OM1 * P1[0] * (-cI * (TMP60) + cI * (TMP25)) +
      (P2[1] * - 1. * (+cI * (T3[3] + T3[6])) + (P2[2] * - 1. * (+cI * (T3[4] +
      T3[10])) + (P2[3] * - 1. * (+cI * (T3[5] + T3[14])) + 2. * cI * (P2[0] *
      T3[2]))))) + (TMP15 * (V2[3] * (+cI * (T3[6] + T3[3])) + (V2[4] * (+cI *
      (T3[10] + T3[4])) + (V2[5] * (+cI * (T3[14] + T3[5])) - 2. * cI * (V2[2]
      * T3[2])))) + (P2[0] * (+cI * (TMP28 + TMP29)) - V2[2] * (+cI * (TMP24 +
      TMP25)))));
  V1[3] = denom * (TMP9 * (OM1 * P1[1] * (-cI * (TMP60) + cI * (TMP25)) +
      (P2[0] * (+cI * (T3[6] + T3[3])) + (P2[2] * - 1. * (+cI * (T3[8] +
      T3[11])) + (P2[3] * - 1. * (+cI * (T3[9] + T3[15])) - 2. * cI * (P2[1] *
      T3[7]))))) + (TMP15 * (V2[2] * - 1. * (+cI * (T3[3] + T3[6])) + (V2[4] *
      (+cI * (T3[11] + T3[8])) + (V2[5] * (+cI * (T3[15] + T3[9])) + 2. * cI *
      (V2[3] * T3[7])))) + (P2[1] * (+cI * (TMP28 + TMP29)) - V2[3] * (+cI *
      (TMP24 + TMP25)))));
  V1[4] = denom * (TMP9 * (OM1 * P1[2] * (-cI * (TMP60) + cI * (TMP25)) +
      (P2[0] * (+cI * (T3[10] + T3[4])) + (P2[1] * - 1. * (+cI * (T3[11] +
      T3[8])) + (P2[3] * - 1. * (+cI * (T3[13] + T3[16])) - 2. * cI * (P2[2] *
      T3[12]))))) + (TMP15 * (V2[2] * - 1. * (+cI * (T3[4] + T3[10])) + (V2[3]
      * (+cI * (T3[8] + T3[11])) + (V2[5] * (+cI * (T3[16] + T3[13])) + 2. * cI
      * (V2[4] * T3[12])))) + (P2[2] * (+cI * (TMP28 + TMP29)) - V2[4] * (+cI *
      (TMP24 + TMP25)))));
  V1[5] = denom * (TMP9 * (OM1 * P1[3] * (-cI * (TMP60) + cI * (TMP25)) +
      (P2[0] * (+cI * (T3[14] + T3[5])) + (P2[1] * - 1. * (+cI * (T3[15] +
      T3[9])) + (P2[2] * - 1. * (+cI * (T3[16] + T3[13])) - 2. * cI * (P2[3] *
      T3[17]))))) + (TMP15 * (V2[2] * - 1. * (+cI * (T3[5] + T3[14])) + (V2[3]
      * (+cI * (T3[9] + T3[15])) + (V2[4] * (+cI * (T3[13] + T3[16])) + 2. * cI
      * (V2[5] * T3[17])))) + (P2[3] * (+cI * (TMP28 + TMP29)) - V2[5] * (+cI *
      (TMP24 + TMP25)))));
}


void VVT1_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> denom; 
  complex<double> TMP11; 
  double P1[4]; 
  double P2[4]; 
  complex<double> TMP7; 
  double P3[4]; 
  complex<double> TMP6; 
  complex<double> TMP15; 
  double OM3; 
  complex<double> TMP14; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP7 = -1. * (P1[0] * (P2[1] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P2[2] *
      (V2[3] * V1[5] - V2[5] * V1[3]) + P2[3] * (V2[4] * V1[3] - V2[3] *
      V1[4]))) + (P1[1] * (P2[0] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P2[2] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P2[3] * (V2[2] * V1[4] - V2[4] *
      V1[2]))) + (P1[2] * (P2[0] * (V2[5] * V1[3] - V2[3] * V1[5]) + (P2[1] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P2[3] * (V2[3] * V1[2] - V2[2] *
      V1[3]))) + P1[3] * (P2[0] * (V2[3] * V1[4] - V2[4] * V1[3]) + (P2[1] *
      (V2[4] * V1[2] - V2[2] * V1[4]) + P2[2] * (V2[2] * V1[3] - V2[3] *
      V1[2]))))));
  TMP6 = -1. * (P1[0] * (P2[1] * (V2[4] * V1[5] - V2[5] * V1[4]) + (P2[2] *
      (V2[5] * V1[3] - V2[3] * V1[5]) + P2[3] * (V2[3] * V1[4] - V2[4] *
      V1[3]))) + (P1[1] * (P2[0] * (V2[5] * V1[4] - V2[4] * V1[5]) + (P2[2] *
      (V2[2] * V1[5] - V2[5] * V1[2]) + P2[3] * (V2[4] * V1[2] - V2[2] *
      V1[4]))) + (P1[2] * (P2[0] * (V2[3] * V1[5] - V2[5] * V1[3]) + (P2[1] *
      (V2[5] * V1[2] - V2[2] * V1[5]) + P2[3] * (V2[2] * V1[3] - V2[3] *
      V1[2]))) + P1[3] * (P2[0] * (V2[4] * V1[3] - V2[3] * V1[4]) + (P2[1] *
      (V2[2] * V1[4] - V2[4] * V1[2]) + P2[2] * (V2[3] * V1[2] - V2[2] *
      V1[3]))))));
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * 8. * (OM3 * (P3[0] * (P3[0] * (OM3 * 0.666666667 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.333333333 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[0] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[0] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + 0.333333333 * (TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)))) + (P1[0] * P2[0] * (-cI * (TMP6) +
      cI * (TMP7)) + 0.333333333 * (TMP15 * (-cI * (TMP7) + cI * (TMP6)))));
  T3[3] = denom * 4. * (OM3 * (P3[0] * (P3[1] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[1] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[1] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[1] * (P1[0] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[0] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[0] * P2[1] * (-cI * (TMP6) + cI * (TMP7)) + P1[1] * P2[0]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[4] = denom * 4. * (OM3 * (P3[0] * (P3[2] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[2] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[2] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[2] * (P1[0] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[0] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[0] * P2[2] * (-cI * (TMP6) + cI * (TMP7)) + P1[2] * P2[0]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[5] = denom * 4. * (OM3 * (P3[0] * (P3[3] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[3] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[3] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[3] * (P1[0] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[0] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[0] * P2[3] * (-cI * (TMP6) + cI * (TMP7)) + P1[3] * P2[0]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[6] = denom * 4. * (OM3 * (P3[0] * (P3[1] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[1] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[1] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[1] * (P1[0] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[0] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[0] * P2[1] * (-cI * (TMP6) + cI * (TMP7)) + P1[1] * P2[0]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[7] = denom * 8. * (OM3 * (P3[1] * (P3[1] * (OM3 * 0.666666667 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.333333333 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[1] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[1] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + 0.333333333 * (TMP11 *
      TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + (P1[1] * P2[1] * (-cI * (TMP6) +
      cI * (TMP7)) + 0.333333333 * (TMP15 * (-cI * (TMP6) + cI * (TMP7)))));
  T3[8] = denom * 4. * (OM3 * (P3[1] * (P3[2] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[2] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[2] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[2] * (P1[1] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[1] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[1] * P2[2] * (-cI * (TMP6) + cI * (TMP7)) + P1[2] * P2[1]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[9] = denom * 4. * (OM3 * (P3[1] * (P3[3] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[3] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[3] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[3] * (P1[1] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[1] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[1] * P2[3] * (-cI * (TMP6) + cI * (TMP7)) + P1[3] * P2[1]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[10] = denom * 4. * (OM3 * (P3[0] * (P3[2] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[2] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[2] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[2] * (P1[0] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[0] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[0] * P2[2] * (-cI * (TMP6) + cI * (TMP7)) + P1[2] * P2[0]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[11] = denom * 4. * (OM3 * (P3[1] * (P3[2] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[2] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[2] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[2] * (P1[1] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[1] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[1] * P2[2] * (-cI * (TMP6) + cI * (TMP7)) + P1[2] * P2[1]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[12] = denom * 8. * (OM3 * (P3[2] * (P3[2] * (OM3 * 0.666666667 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.333333333 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[2] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[2] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + 0.333333333 * (TMP11 *
      TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + (P1[2] * P2[2] * (-cI * (TMP6) +
      cI * (TMP7)) + 0.333333333 * (TMP15 * (-cI * (TMP6) + cI * (TMP7)))));
  T3[13] = denom * 4. * (OM3 * (P3[2] * (P3[3] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[3] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[3] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[3] * (P1[2] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[2] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[2] * P2[3] * (-cI * (TMP6) + cI * (TMP7)) + P1[3] * P2[2]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[14] = denom * 4. * (OM3 * (P3[0] * (P3[3] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[3] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[3] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[3] * (P1[0] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[0] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[0] * P2[3] * (-cI * (TMP6) + cI * (TMP7)) + P1[3] * P2[0]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[15] = denom * 4. * (OM3 * (P3[1] * (P3[3] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[3] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[3] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[3] * (P1[1] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[1] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[1] * P2[3] * (-cI * (TMP6) + cI * (TMP7)) + P1[3] * P2[1]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[16] = denom * 4. * (OM3 * (P3[2] * (P3[3] * (OM3 * 1.333333333 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.666666667 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[3] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[3] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + P3[3] * (P1[2] * TMP11 *
      (-cI * (TMP7) + cI * (TMP6)) + P2[2] * TMP14 * (-cI * (TMP7) + cI *
      (TMP6)))) + (P1[2] * P2[3] * (-cI * (TMP6) + cI * (TMP7)) + P1[3] * P2[2]
      * (-cI * (TMP6) + cI * (TMP7))));
  T3[17] = denom * 8. * (OM3 * (P3[3] * (P3[3] * (OM3 * 0.666666667 * TMP11 *
      TMP14 * (-cI * (TMP6) + cI * (TMP7)) + 0.333333333 * (TMP15 * (-cI *
      (TMP6) + cI * (TMP7)))) + (P1[3] * TMP11 * (-cI * (TMP7) + cI * (TMP6)) +
      P2[3] * TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + 0.333333333 * (TMP11 *
      TMP14 * (-cI * (TMP7) + cI * (TMP6)))) + (P1[3] * P2[3] * (-cI * (TMP6) +
      cI * (TMP7)) + 0.333333333 * (TMP15 * (-cI * (TMP6) + cI * (TMP7)))));
}

void VVT1_10_11_12_13_3_5_7_8_9_3(complex<double> V1[], complex<double> V2[],
    complex<double> COUP1, complex<double> COUP2, complex<double> COUP3,
    complex<double> COUP4, complex<double> COUP5, complex<double> COUP6,
    complex<double> COUP7, complex<double> COUP8, complex<double> COUP9,
    complex<double> COUP10, double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
//   double P3[4];
//   double P2[4];
//   double OM3;
//   double P1[4];
  complex<double> Ttmp[18]; 
  complex<double> denom; 
  int i; 
  VVT1_3(V1, V2, COUP1, M3, W3, T3); 
  VVT10_3(V1, V2, COUP2, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
  VVT11_3(V1, V2, COUP3, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
  VVT12_3(V1, V2, COUP4, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
  VVT13_3(V1, V2, COUP5, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
  VVT3_3(V1, V2, COUP6, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
  VVT5_3(V1, V2, COUP7, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
  VVT7_3(V1, V2, COUP8, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
  VVT8_3(V1, V2, COUP9, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
  VVT9_3(V1, V2, COUP10, M3, W3, Ttmp); 
  i = 2; 
  while (i < 18)
  {
    T3[i] = T3[i] + Ttmp[i]; 
    i++; 
  }
}

void VVT11_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP12; 
  complex<double> TMP10; 
  double P3[4]; 
  complex<double> denom; 
  double OM3; 
  complex<double> TMP8; 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]); 
  TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]); 
  TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * 2. * (OM3 * (P3[0] * (P3[0] * 0.333333333 * (+cI * (TMP8) +
      2. * cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[2] * TMP10 + V1[2] *
      TMP12))) + 0.333333333 * cI * (TMP10 * TMP12)) + (-0.333333333 * cI *
      (TMP8) + cI * (V2[2] * V1[2])));
  T3[6] = denom * (OM3 * (P3[0] * (P3[1] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[3] * TMP10 + V1[3] * TMP12))) -
      P3[1] * (+cI * (V1[2] * TMP12 + V2[2] * TMP10))) + (+cI * (V2[3] * V1[2]
      + V2[2] * V1[3])));
  T3[10] = denom * (OM3 * (P3[0] * (P3[2] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[4] * TMP10 + V1[4] * TMP12))) -
      P3[2] * (+cI * (V1[2] * TMP12 + V2[2] * TMP10))) + (+cI * (V2[4] * V1[2]
      + V2[2] * V1[4])));
  T3[14] = denom * (OM3 * (P3[0] * (P3[3] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[5] * TMP10 + V1[5] * TMP12))) -
      P3[3] * (+cI * (V1[2] * TMP12 + V2[2] * TMP10))) + (+cI * (V2[5] * V1[2]
      + V2[2] * V1[5])));
  T3[3] = denom * (OM3 * (P3[0] * (P3[1] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V1[3] * TMP12 + V2[3] * TMP10))) -
      P3[1] * (+cI * (V2[2] * TMP10 + V1[2] * TMP12))) + (+cI * (V2[2] * V1[3]
      + V2[3] * V1[2])));
  T3[7] = denom * 2. * (OM3 * (P3[1] * (P3[1] * 0.333333333 * (+cI * (TMP8) +
      2. * cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[3] * TMP10 + V1[3] *
      TMP12))) - 0.333333333 * cI * (TMP10 * TMP12)) + (+cI * (V2[3] * V1[3]) +
      0.333333333 * cI * (TMP8)));
  T3[11] = denom * (OM3 * (P3[1] * (P3[2] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[4] * TMP10 + V1[4] * TMP12))) -
      P3[2] * (+cI * (V1[3] * TMP12 + V2[3] * TMP10))) + (+cI * (V2[4] * V1[3]
      + V2[3] * V1[4])));
  T3[15] = denom * (OM3 * (P3[1] * (P3[3] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[5] * TMP10 + V1[5] * TMP12))) -
      P3[3] * (+cI * (V1[3] * TMP12 + V2[3] * TMP10))) + (+cI * (V2[5] * V1[3]
      + V2[3] * V1[5])));
  T3[4] = denom * (OM3 * (P3[0] * (P3[2] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V1[4] * TMP12 + V2[4] * TMP10))) -
      P3[2] * (+cI * (V2[2] * TMP10 + V1[2] * TMP12))) + (+cI * (V2[2] * V1[4]
      + V2[4] * V1[2])));
  T3[8] = denom * (OM3 * (P3[1] * (P3[2] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V1[4] * TMP12 + V2[4] * TMP10))) -
      P3[2] * (+cI * (V2[3] * TMP10 + V1[3] * TMP12))) + (+cI * (V2[3] * V1[4]
      + V2[4] * V1[3])));
  T3[12] = denom * 2. * (OM3 * (P3[2] * (P3[2] * 0.333333333 * (+cI * (TMP8) +
      2. * cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[4] * TMP10 + V1[4] *
      TMP12))) - 0.333333333 * cI * (TMP10 * TMP12)) + (+cI * (V2[4] * V1[4]) +
      0.333333333 * cI * (TMP8)));
  T3[16] = denom * (OM3 * (P3[2] * (P3[3] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[5] * TMP10 + V1[5] * TMP12))) -
      P3[3] * (+cI * (V1[4] * TMP12 + V2[4] * TMP10))) + (+cI * (V2[5] * V1[4]
      + V2[4] * V1[5])));
  T3[5] = denom * (OM3 * (P3[0] * (P3[3] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V1[5] * TMP12 + V2[5] * TMP10))) -
      P3[3] * (+cI * (V2[2] * TMP10 + V1[2] * TMP12))) + (+cI * (V2[2] * V1[5]
      + V2[5] * V1[2])));
  T3[9] = denom * (OM3 * (P3[1] * (P3[3] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V1[5] * TMP12 + V2[5] * TMP10))) -
      P3[3] * (+cI * (V2[3] * TMP10 + V1[3] * TMP12))) + (+cI * (V2[3] * V1[5]
      + V2[5] * V1[3])));
  T3[13] = denom * (OM3 * (P3[2] * (P3[3] * 0.666666667 * (+cI * (TMP8) + 2. *
      cI * (OM3 * TMP10 * TMP12)) + (-cI * (V1[5] * TMP12 + V2[5] * TMP10))) -
      P3[3] * (+cI * (V2[4] * TMP10 + V1[4] * TMP12))) + (+cI * (V2[4] * V1[5]
      + V2[5] * V1[4])));
  T3[17] = denom * 2. * (OM3 * (P3[3] * (P3[3] * 0.333333333 * (+cI * (TMP8) +
      2. * cI * (OM3 * TMP10 * TMP12)) + (-cI * (V2[5] * TMP10 + V1[5] *
      TMP12))) - 0.333333333 * cI * (TMP10 * TMP12)) + (+cI * (V2[5] * V1[5]) +
      0.333333333 * cI * (TMP8)));
}


void VVT7_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> denom; 
  complex<double> TMP11; 
  double P1[4]; 
  double P2[4]; 
  double P3[4]; 
  complex<double> TMP15; 
  double OM3; 
  complex<double> TMP14; 
  complex<double> TMP8; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * 2. * TMP8 * (OM3 * (P3[0] * (P3[0] * 0.333333333 * (+cI *
      (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[0] * TMP14 +
      P1[0] * TMP11))) + 0.333333333 * cI * (TMP11 * TMP14)) + (-0.333333333 *
      cI * (TMP15) + cI * (P2[0] * P1[0])));
  T3[3] = denom * TMP8 * (OM3 * (P3[0] * (P3[1] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P1[1] * TMP11 + P2[1] *
      TMP14))) - P3[1] * (+cI * (P2[0] * TMP14 + P1[0] * TMP11))) + (+cI *
      (P2[0] * P1[1] + P2[1] * P1[0])));
  T3[4] = denom * TMP8 * (OM3 * (P3[0] * (P3[2] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P1[2] * TMP11 + P2[2] *
      TMP14))) - P3[2] * (+cI * (P2[0] * TMP14 + P1[0] * TMP11))) + (+cI *
      (P2[0] * P1[2] + P2[2] * P1[0])));
  T3[5] = denom * TMP8 * (OM3 * (P3[0] * (P3[3] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P1[3] * TMP11 + P2[3] *
      TMP14))) - P3[3] * (+cI * (P2[0] * TMP14 + P1[0] * TMP11))) + (+cI *
      (P2[0] * P1[3] + P2[3] * P1[0])));
  T3[6] = denom * TMP8 * (OM3 * (P3[0] * (P3[1] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[1] * TMP14 + P1[1] *
      TMP11))) - P3[1] * (+cI * (P1[0] * TMP11 + P2[0] * TMP14))) + (+cI *
      (P2[1] * P1[0] + P2[0] * P1[1])));
  T3[7] = denom * 2. * TMP8 * (OM3 * (P3[1] * (P3[1] * 0.333333333 * (+cI *
      (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[1] * TMP14 +
      P1[1] * TMP11))) - 0.333333333 * cI * (TMP11 * TMP14)) + (+cI * (P2[1] *
      P1[1]) + 0.333333333 * cI * (TMP15)));
  T3[8] = denom * TMP8 * (OM3 * (P3[1] * (P3[2] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P1[2] * TMP11 + P2[2] *
      TMP14))) - P3[2] * (+cI * (P2[1] * TMP14 + P1[1] * TMP11))) + (+cI *
      (P2[1] * P1[2] + P2[2] * P1[1])));
  T3[9] = denom * TMP8 * (OM3 * (P3[1] * (P3[3] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P1[3] * TMP11 + P2[3] *
      TMP14))) - P3[3] * (+cI * (P2[1] * TMP14 + P1[1] * TMP11))) + (+cI *
      (P2[1] * P1[3] + P2[3] * P1[1])));
  T3[10] = denom * TMP8 * (OM3 * (P3[0] * (P3[2] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[2] * TMP14 + P1[2] *
      TMP11))) - P3[2] * (+cI * (P1[0] * TMP11 + P2[0] * TMP14))) + (+cI *
      (P2[2] * P1[0] + P2[0] * P1[2])));
  T3[11] = denom * TMP8 * (OM3 * (P3[1] * (P3[2] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[2] * TMP14 + P1[2] *
      TMP11))) - P3[2] * (+cI * (P1[1] * TMP11 + P2[1] * TMP14))) + (+cI *
      (P2[2] * P1[1] + P2[1] * P1[2])));
  T3[12] = denom * 2. * TMP8 * (OM3 * (P3[2] * (P3[2] * 0.333333333 * (+cI *
      (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[2] * TMP14 +
      P1[2] * TMP11))) - 0.333333333 * cI * (TMP11 * TMP14)) + (+cI * (P2[2] *
      P1[2]) + 0.333333333 * cI * (TMP15)));
  T3[13] = denom * TMP8 * (OM3 * (P3[2] * (P3[3] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P1[3] * TMP11 + P2[3] *
      TMP14))) - P3[3] * (+cI * (P2[2] * TMP14 + P1[2] * TMP11))) + (+cI *
      (P2[2] * P1[3] + P2[3] * P1[2])));
  T3[14] = denom * TMP8 * (OM3 * (P3[0] * (P3[3] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[3] * TMP14 + P1[3] *
      TMP11))) - P3[3] * (+cI * (P1[0] * TMP11 + P2[0] * TMP14))) + (+cI *
      (P2[3] * P1[0] + P2[0] * P1[3])));
  T3[15] = denom * TMP8 * (OM3 * (P3[1] * (P3[3] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[3] * TMP14 + P1[3] *
      TMP11))) - P3[3] * (+cI * (P1[1] * TMP11 + P2[1] * TMP14))) + (+cI *
      (P2[3] * P1[1] + P2[1] * P1[3])));
  T3[16] = denom * TMP8 * (OM3 * (P3[2] * (P3[3] * 0.666666667 * (+cI * (TMP15)
      + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[3] * TMP14 + P1[3] *
      TMP11))) - P3[3] * (+cI * (P1[2] * TMP11 + P2[2] * TMP14))) + (+cI *
      (P2[3] * P1[2] + P2[2] * P1[3])));
  T3[17] = denom * 2. * TMP8 * (OM3 * (P3[3] * (P3[3] * 0.333333333 * (+cI *
      (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (-cI * (P2[3] * TMP14 +
      P1[3] * TMP11))) - 0.333333333 * cI * (TMP11 * TMP14)) + (+cI * (P2[3] *
      P1[3]) + 0.333333333 * cI * (TMP15)));
}


void VVT11_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  double P1[4]; 
  complex<double> denom; 
  complex<double> TMP28; 
  complex<double> TMP29; 
  double OM1; 
  OM1 = 0.; 
  if (M1 != 0.)
    OM1 = 1./pow(M1, 2); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP28 = (P1[0] * - 1. * (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] -
      V2[2] * T3[2]) + (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] *
      T3[15] - V2[2] * T3[3]) + (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] +
      V2[5] * T3[16] - V2[2] * T3[4]) + P1[3] * (V2[3] * T3[9] + V2[4] * T3[13]
      + V2[5] * T3[17] - V2[2] * T3[5]))));
  TMP29 = (P1[0] * - 1. * (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] -
      V2[2] * T3[2]) + (P1[1] * (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9]
      - V2[2] * T3[6]) + (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] *
      T3[13] - V2[2] * T3[10]) + P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] +
      V2[5] * T3[17] - V2[2] * T3[14]))));
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * - cI * (OM1 * - P1[0] * (TMP28 + TMP29) + (V2[3] * - 1. *
      (T3[6] + T3[3]) + (V2[4] * - 1. * (T3[10] + T3[4]) + (V2[5] * - 1. *
      (T3[14] + T3[5]) + 2. * (V2[2] * T3[2])))));
  V1[3] = denom * cI * (OM1 * P1[1] * (TMP28 + TMP29) + (V2[2] * - 1. * (T3[3]
      + T3[6]) + (V2[4] * (T3[11] + T3[8]) + (V2[5] * (T3[15] + T3[9]) + 2. *
      (V2[3] * T3[7])))));
  V1[4] = denom * cI * (OM1 * P1[2] * (TMP28 + TMP29) + (V2[2] * - 1. * (T3[4]
      + T3[10]) + (V2[3] * (T3[8] + T3[11]) + (V2[5] * (T3[16] + T3[13]) + 2. *
      (V2[4] * T3[12])))));
  V1[5] = denom * cI * (OM1 * P1[3] * (TMP28 + TMP29) + (V2[2] * - 1. * (T3[5]
      + T3[14]) + (V2[3] * (T3[9] + T3[15]) + (V2[4] * (T3[13] + T3[16]) + 2. *
      (V2[5] * T3[17])))));
}


void VVT2_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  double P1[4]; 
  double P2[4]; 
  complex<double> denom; 
  complex<double> TMP24; 
  complex<double> TMP25; 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP24 = (P1[0] * - 1. * (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] *
      T3[15] - P2[0] * T3[3]) + (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] +
      P2[3] * T3[16] - P2[0] * T3[4]) + P1[3] * (P2[1] * T3[9] + P2[2] * T3[13]
      + P2[3] * T3[17] - P2[0] * T3[5]))));
  TMP25 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * - 2. * cI * (TMP24 * (P1[1] * (P2[3] * V2[4] - P2[2] * V2[5])
      + (P1[2] * (P2[1] * V2[5] - P2[3] * V2[3]) + P1[3] * (P2[2] * V2[3] -
      P2[1] * V2[4]))) + TMP25 * (P1[1] * (P2[3] * V2[4] - P2[2] * V2[5]) +
      (P1[2] * (P2[1] * V2[5] - P2[3] * V2[3]) + P1[3] * (P2[2] * V2[3] - P2[1]
      * V2[4]))));
  V1[3] = denom * 2. * cI * (TMP24 * (P1[0] * (P2[2] * V2[5] - P2[3] * V2[4]) +
      (P1[2] * (P2[3] * V2[2] - P2[0] * V2[5]) + P1[3] * (P2[0] * V2[4] - P2[2]
      * V2[2]))) + TMP25 * (P1[0] * (P2[2] * V2[5] - P2[3] * V2[4]) + (P1[2] *
      (P2[3] * V2[2] - P2[0] * V2[5]) + P1[3] * (P2[0] * V2[4] - P2[2] *
      V2[2]))));
  V1[4] = denom * 2. * cI * (TMP24 * (P1[0] * (P2[3] * V2[3] - P2[1] * V2[5]) +
      (P1[1] * (P2[0] * V2[5] - P2[3] * V2[2]) + P1[3] * (P2[1] * V2[2] - P2[0]
      * V2[3]))) + TMP25 * (P1[0] * (P2[3] * V2[3] - P2[1] * V2[5]) + (P1[1] *
      (P2[0] * V2[5] - P2[3] * V2[2]) + P1[3] * (P2[1] * V2[2] - P2[0] *
      V2[3]))));
  V1[5] = denom * 2. * cI * (TMP24 * (P1[0] * (P2[1] * V2[4] - P2[2] * V2[3]) +
      (P1[1] * (P2[2] * V2[2] - P2[0] * V2[4]) + P1[2] * (P2[0] * V2[3] - P2[1]
      * V2[2]))) + TMP25 * (P1[0] * (P2[1] * V2[4] - P2[2] * V2[3]) + (P1[1] *
      (P2[2] * V2[2] - P2[0] * V2[4]) + P1[2] * (P2[0] * V2[3] - P2[1] *
      V2[2]))));
}


void FFV1_1(complex<double> F2[], complex<double> V3[], complex<double> COUP,
    double M1, double W1, complex<double> F1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  double P1[4]; 
  complex<double> denom; 
  F1[0] = +F2[0] + V3[0]; 
  F1[1] = +F2[1] + V3[1]; 
  P1[0] = -F1[0].real(); 
  P1[1] = -F1[1].real(); 
  P1[2] = -F1[1].imag(); 
  P1[3] = -F1[0].imag(); 
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  F1[2] = denom * cI * (F2[2] * (P1[0] * (V3[5] - V3[2]) + (P1[1] * (V3[3] - cI
      * (V3[4])) + (P1[2] * (V3[4] + cI * (V3[3])) + P1[3] * (V3[5] - V3[2]))))
      + (F2[3] * (P1[0] * (V3[3] + cI * (V3[4])) + (P1[1] * - 1. * (V3[2] +
      V3[5]) + (P1[2] * - 1. * (+cI * (V3[2] + V3[5])) + P1[3] * (V3[3] + cI *
      (V3[4]))))) + M1 * (F2[4] * (V3[2] + V3[5]) + F2[5] * (V3[3] + cI *
      (V3[4])))));
  F1[3] = denom * - cI * (F2[2] * (P1[0] * (+cI * (V3[4]) - V3[3]) + (P1[1] *
      (V3[2] - V3[5]) + (P1[2] * (-cI * (V3[2]) + cI * (V3[5])) + P1[3] *
      (V3[3] - cI * (V3[4]))))) + (F2[3] * (P1[0] * (V3[2] + V3[5]) + (P1[1] *
      - 1. * (V3[3] + cI * (V3[4])) + (P1[2] * (+cI * (V3[3]) - V3[4]) - P1[3]
      * (V3[2] + V3[5])))) + M1 * (F2[4] * (+cI * (V3[4]) - V3[3]) + F2[5] *
      (V3[5] - V3[2]))));
  F1[4] = denom * - cI * (F2[4] * (P1[0] * (V3[2] + V3[5]) + (P1[1] * (+cI *
      (V3[4]) - V3[3]) + (P1[2] * - 1. * (V3[4] + cI * (V3[3])) - P1[3] *
      (V3[2] + V3[5])))) + (F2[5] * (P1[0] * (V3[3] + cI * (V3[4])) + (P1[1] *
      (V3[5] - V3[2]) + (P1[2] * (-cI * (V3[2]) + cI * (V3[5])) - P1[3] *
      (V3[3] + cI * (V3[4]))))) + M1 * (F2[2] * (V3[5] - V3[2]) + F2[3] *
      (V3[3] + cI * (V3[4])))));
  F1[5] = denom * cI * (F2[4] * (P1[0] * (+cI * (V3[4]) - V3[3]) + (P1[1] *
      (V3[2] + V3[5]) + (P1[2] * - 1. * (+cI * (V3[2] + V3[5])) + P1[3] * (+cI
      * (V3[4]) - V3[3])))) + (F2[5] * (P1[0] * (V3[5] - V3[2]) + (P1[1] *
      (V3[3] + cI * (V3[4])) + (P1[2] * (V3[4] - cI * (V3[3])) + P1[3] * (V3[5]
      - V3[2])))) + M1 * (F2[2] * (+cI * (V3[4]) - V3[3]) + F2[3] * (V3[2] +
      V3[5]))));
}


void VVT8_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
    double M3, double W3, complex<double> T3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> denom; 
  complex<double> TMP11; 
  double P1[4]; 
  double P2[4]; 
  double P3[4]; 
  complex<double> TMP15; 
  double OM3; 
  complex<double> TMP14; 
  complex<double> TMP9; 
  complex<double> TMP13; 
  complex<double> TMP8; 
  P1[0] = V1[0].real(); 
  P1[1] = V1[1].real(); 
  P1[2] = V1[1].imag(); 
  P1[3] = V1[0].imag(); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  T3[0] = +V1[0] + V2[0]; 
  T3[1] = +V1[1] + V2[1]; 
  P3[0] = -T3[0].real(); 
  P3[1] = -T3[1].real(); 
  P3[2] = -T3[1].imag(); 
  P3[3] = -T3[0].imag(); 
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]); 
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  TMP14 = (P3[0] * P1[0] - P3[1] * P1[1] - P3[2] * P1[2] - P3[3] * P1[3]); 
  TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]); 
  TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]); 
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  T3[2] = denom * 2. * (OM3 * (P3[0] * (TMP15 * (TMP8 * (P3[0] * - 0.333333333
      * (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[0] *
      TMP14 + P1[0] * TMP11))) + 0.333333333 * cI * (P3[0] * TMP9 * TMP13)) +
      TMP13 * TMP9 * (TMP11 * (-cI * (P1[0]) + 0.666666667 * cI * (P3[0] * OM3
      * TMP14)) - cI * (P2[0] * TMP14))) + 0.333333333 * (TMP11 * TMP14 * (-cI
      * (TMP8 * TMP15) + cI * (TMP9 * TMP13)))) + (TMP15 * (TMP8 * (-cI *
      (P2[0] * P1[0]) + 0.333333333 * cI * (TMP15)) - 0.333333333 * cI * (TMP9
      * TMP13)) + cI * (P2[0] * P1[0] * TMP9 * TMP13)));
  T3[3] = denom * (OM3 * (P3[0] * (TMP15 * (TMP8 * (P3[1] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P1[1] * TMP11
      + P2[1] * TMP14))) + 0.666666667 * cI * (P3[1] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[1]) + 1.333333333 * cI * (P3[1] * OM3 *
      TMP14)) - cI * (P2[1] * TMP14))) + P3[1] * (P1[0] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[0] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[0] * P2[1] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[1] * P2[0] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[4] = denom * (OM3 * (P3[0] * (TMP15 * (TMP8 * (P3[2] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P1[2] * TMP11
      + P2[2] * TMP14))) + 0.666666667 * cI * (P3[2] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[2]) + 1.333333333 * cI * (P3[2] * OM3 *
      TMP14)) - cI * (P2[2] * TMP14))) + P3[2] * (P1[0] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[0] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[0] * P2[2] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[2] * P2[0] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[5] = denom * (OM3 * (P3[0] * (TMP15 * (TMP8 * (P3[3] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P1[3] * TMP11
      + P2[3] * TMP14))) + 0.666666667 * cI * (P3[3] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[3]) + 1.333333333 * cI * (P3[3] * OM3 *
      TMP14)) - cI * (P2[3] * TMP14))) + P3[3] * (P1[0] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[0] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[0] * P2[3] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[3] * P2[0] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[6] = denom * (OM3 * (P3[0] * (TMP15 * (TMP8 * (P3[1] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[1] * TMP14
      + P1[1] * TMP11))) + 0.666666667 * cI * (P3[1] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[1]) + 1.333333333 * cI * (P3[1] * OM3 *
      TMP14)) - cI * (P2[1] * TMP14))) + P3[1] * (P1[0] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[0] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[0] * P2[1] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[1] * P2[0] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[7] = denom * 2. * (OM3 * (P3[1] * (TMP15 * (TMP8 * (P3[1] * - 0.333333333
      * (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[1] *
      TMP14 + P1[1] * TMP11))) + 0.333333333 * cI * (P3[1] * TMP9 * TMP13)) +
      TMP13 * TMP9 * (TMP11 * (-cI * (P1[1]) + 0.666666667 * cI * (P3[1] * OM3
      * TMP14)) - cI * (P2[1] * TMP14))) + 0.333333333 * (TMP11 * TMP14 * (-cI
      * (TMP9 * TMP13) + cI * (TMP8 * TMP15)))) + (TMP15 * (TMP8 * - 1. * (+cI
      * (P2[1] * P1[1]) + 0.333333333 * cI * (TMP15)) + 0.333333333 * cI *
      (TMP9 * TMP13)) + cI * (P2[1] * P1[1] * TMP9 * TMP13)));
  T3[8] = denom * (OM3 * (P3[1] * (TMP15 * (TMP8 * (P3[2] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P1[2] * TMP11
      + P2[2] * TMP14))) + 0.666666667 * cI * (P3[2] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[2]) + 1.333333333 * cI * (P3[2] * OM3 *
      TMP14)) - cI * (P2[2] * TMP14))) + P3[2] * (P1[1] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[1] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[1] * P2[2] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[2] * P2[1] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[9] = denom * (OM3 * (P3[1] * (TMP15 * (TMP8 * (P3[3] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P1[3] * TMP11
      + P2[3] * TMP14))) + 0.666666667 * cI * (P3[3] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[3]) + 1.333333333 * cI * (P3[3] * OM3 *
      TMP14)) - cI * (P2[3] * TMP14))) + P3[3] * (P1[1] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[1] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[1] * P2[3] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[3] * P2[1] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[10] = denom * (OM3 * (P3[0] * (TMP15 * (TMP8 * (P3[2] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[2] * TMP14
      + P1[2] * TMP11))) + 0.666666667 * cI * (P3[2] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[2]) + 1.333333333 * cI * (P3[2] * OM3 *
      TMP14)) - cI * (P2[2] * TMP14))) + P3[2] * (P1[0] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[0] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[0] * P2[2] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[2] * P2[0] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[11] = denom * (OM3 * (P3[1] * (TMP15 * (TMP8 * (P3[2] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[2] * TMP14
      + P1[2] * TMP11))) + 0.666666667 * cI * (P3[2] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[2]) + 1.333333333 * cI * (P3[2] * OM3 *
      TMP14)) - cI * (P2[2] * TMP14))) + P3[2] * (P1[1] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[1] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[1] * P2[2] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[2] * P2[1] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[12] = denom * 2. * (OM3 * (P3[2] * (TMP15 * (TMP8 * (P3[2] * - 0.333333333
      * (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[2] *
      TMP14 + P1[2] * TMP11))) + 0.333333333 * cI * (P3[2] * TMP9 * TMP13)) +
      TMP13 * TMP9 * (TMP11 * (-cI * (P1[2]) + 0.666666667 * cI * (P3[2] * OM3
      * TMP14)) - cI * (P2[2] * TMP14))) + 0.333333333 * (TMP11 * TMP14 * (-cI
      * (TMP9 * TMP13) + cI * (TMP8 * TMP15)))) + (TMP15 * (TMP8 * - 1. * (+cI
      * (P2[2] * P1[2]) + 0.333333333 * cI * (TMP15)) + 0.333333333 * cI *
      (TMP9 * TMP13)) + cI * (P2[2] * P1[2] * TMP9 * TMP13)));
  T3[13] = denom * (OM3 * (P3[2] * (TMP15 * (TMP8 * (P3[3] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P1[3] * TMP11
      + P2[3] * TMP14))) + 0.666666667 * cI * (P3[3] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[3]) + 1.333333333 * cI * (P3[3] * OM3 *
      TMP14)) - cI * (P2[3] * TMP14))) + P3[3] * (P1[2] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[2] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[2] * P2[3] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[3] * P2[2] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[14] = denom * (OM3 * (P3[0] * (TMP15 * (TMP8 * (P3[3] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[3] * TMP14
      + P1[3] * TMP11))) + 0.666666667 * cI * (P3[3] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[3]) + 1.333333333 * cI * (P3[3] * OM3 *
      TMP14)) - cI * (P2[3] * TMP14))) + P3[3] * (P1[0] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[0] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[0] * P2[3] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[3] * P2[0] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[15] = denom * (OM3 * (P3[1] * (TMP15 * (TMP8 * (P3[3] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[3] * TMP14
      + P1[3] * TMP11))) + 0.666666667 * cI * (P3[3] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[3]) + 1.333333333 * cI * (P3[3] * OM3 *
      TMP14)) - cI * (P2[3] * TMP14))) + P3[3] * (P1[1] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[1] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[1] * P2[3] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[3] * P2[1] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[16] = denom * (OM3 * (P3[2] * (TMP15 * (TMP8 * (P3[3] * - 0.666666667 *
      (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[3] * TMP14
      + P1[3] * TMP11))) + 0.666666667 * cI * (P3[3] * TMP9 * TMP13)) + TMP13 *
      TMP9 * (TMP11 * (-cI * (P1[3]) + 1.333333333 * cI * (P3[3] * OM3 *
      TMP14)) - cI * (P2[3] * TMP14))) + P3[3] * (P1[2] * TMP11 * (-cI * (TMP9
      * TMP13) + cI * (TMP8 * TMP15)) + P2[2] * TMP14 * (-cI * (TMP9 * TMP13) +
      cI * (TMP8 * TMP15)))) + (P1[2] * P2[3] * (-cI * (TMP8 * TMP15) + cI *
      (TMP9 * TMP13)) + P1[3] * P2[2] * (-cI * (TMP8 * TMP15) + cI * (TMP9 *
      TMP13))));
  T3[17] = denom * 2. * (OM3 * (P3[3] * (TMP15 * (TMP8 * (P3[3] * - 0.333333333
      * (+cI * (TMP15) + 2. * cI * (OM3 * TMP11 * TMP14)) + (+cI * (P2[3] *
      TMP14 + P1[3] * TMP11))) + 0.333333333 * cI * (P3[3] * TMP9 * TMP13)) +
      TMP13 * TMP9 * (TMP11 * (-cI * (P1[3]) + 0.666666667 * cI * (P3[3] * OM3
      * TMP14)) - cI * (P2[3] * TMP14))) + 0.333333333 * (TMP11 * TMP14 * (-cI
      * (TMP9 * TMP13) + cI * (TMP8 * TMP15)))) + (TMP15 * (TMP8 * - 1. * (+cI
      * (P2[3] * P1[3]) + 0.333333333 * cI * (TMP15)) + 0.333333333 * cI *
      (TMP9 * TMP13)) + cI * (P2[3] * P1[3] * TMP9 * TMP13)));
}


void FFV4_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
    double M3, double W3, complex<double> V3[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> TMP5; 
  complex<double> TMP1; 
  double P3[4]; 
  double OM3; 
  complex<double> denom; 
  OM3 = 0.; 
  if (M3 != 0.)
    OM3 = 1./pow(M3, 2); 
  V3[0] = +F1[0] + F2[0]; 
  V3[1] = +F1[1] + F2[1]; 
  P3[0] = -V3[0].real(); 
  P3[1] = -V3[1].real(); 
  P3[2] = -V3[1].imag(); 
  P3[3] = -V3[0].imag(); 
  TMP5 = (F1[4] * (F2[2] * (P3[0] - P3[3]) - F2[3] * (P3[1] + cI * (P3[2]))) +
      F1[5] * (F2[2] * (+cI * (P3[2]) - P3[1]) + F2[3] * (P3[0] + P3[3])));
  TMP1 = (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
      F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])));
  denom = COUP/(pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) - pow(P3[3], 2) -
      M3 * (M3 - cI * W3));
  V3[2] = denom * - 2. * cI * (OM3 * - 0.500000000 * P3[0] * (TMP1 + 2. *
      (TMP5)) + (+0.500000000 * (F1[2] * F2[4] + F1[3] * F2[5]) + F1[4] * F2[2]
      + F1[5] * F2[3]));
  V3[3] = denom * - 2. * cI * (OM3 * - 0.500000000 * P3[1] * (TMP1 + 2. *
      (TMP5)) + (-0.500000000 * (F1[2] * F2[5] + F1[3] * F2[4]) + F1[4] * F2[3]
      + F1[5] * F2[2]));
  V3[4] = denom * 2. * cI * (OM3 * 0.500000000 * P3[2] * (TMP1 + 2. * (TMP5)) +
      (+0.500000000 * cI * (F1[2] * F2[5]) - 0.500000000 * cI * (F1[3] * F2[4])
      - cI * (F1[4] * F2[3]) + cI * (F1[5] * F2[2])));
  V3[5] = denom * 2. * cI * (OM3 * 0.500000000 * P3[3] * (TMP1 + 2. * (TMP5)) +
      (+0.500000000 * (F1[2] * F2[4]) - 0.500000000 * (F1[3] * F2[5]) - F1[4] *
      F2[2] + F1[5] * F2[3]));
}


void VVT8_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  complex<double> denom; 
  double P1[4]; 
  double P2[4]; 
  complex<double> TMP15; 
  complex<double> TMP24; 
  complex<double> TMP25; 
  complex<double> TMP9; 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP24 = (P1[0] * - 1. * (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] *
      T3[15] - P2[0] * T3[3]) + (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] +
      P2[3] * T3[16] - P2[0] * T3[4]) + P1[3] * (P2[1] * T3[9] + P2[2] * T3[13]
      + P2[3] * T3[17] - P2[0] * T3[5]))));
  TMP15 = (P2[0] * P1[0] - P2[1] * P1[1] - P2[2] * P1[2] - P2[3] * P1[3]); 
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  TMP25 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * (P2[0] * - TMP9 * (+cI * (TMP24 + TMP25)) + TMP15 * V2[2] *
      (+cI * (TMP24 + TMP25)));
  V1[3] = denom * (P2[1] * - TMP9 * (+cI * (TMP24 + TMP25)) + TMP15 * V2[3] *
      (+cI * (TMP24 + TMP25)));
  V1[4] = denom * (P2[2] * - TMP9 * (+cI * (TMP24 + TMP25)) + TMP15 * V2[4] *
      (+cI * (TMP24 + TMP25)));
  V1[5] = denom * (P2[3] * - TMP9 * (+cI * (TMP24 + TMP25)) + TMP15 * V2[5] *
      (+cI * (TMP24 + TMP25)));
}


void VVT7_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
    double M1, double W1, complex<double> V1[])
{
  complex<double> cI = complex<double> (0., 1.); 
  double P1[4]; 
  double P2[4]; 
  complex<double> denom; 
  double OM1; 
  complex<double> TMP24; 
  complex<double> TMP25; 
  complex<double> TMP9; 
  OM1 = 0.; 
  if (M1 != 0.)
    OM1 = 1./pow(M1, 2); 
  P2[0] = V2[0].real(); 
  P2[1] = V2[1].real(); 
  P2[2] = V2[1].imag(); 
  P2[3] = V2[0].imag(); 
  V1[0] = +V2[0] + T3[0]; 
  V1[1] = +V2[1] + T3[1]; 
  P1[0] = -V1[0].real(); 
  P1[1] = -V1[1].real(); 
  P1[2] = -V1[1].imag(); 
  P1[3] = -V1[0].imag(); 
  TMP24 = (P1[0] * - 1. * (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] *
      T3[15] - P2[0] * T3[3]) + (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] +
      P2[3] * T3[16] - P2[0] * T3[4]) + P1[3] * (P2[1] * T3[9] + P2[2] * T3[13]
      + P2[3] * T3[17] - P2[0] * T3[5]))));
  TMP25 = (P1[0] * - 1. * (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] -
      P2[0] * T3[2]) + (P1[1] * (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9]
      - P2[0] * T3[6]) + (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] *
      T3[13] - P2[0] * T3[10]) + P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] +
      P2[3] * T3[17] - P2[0] * T3[14]))));
  TMP9 = (V2[2] * P1[0] - V2[3] * P1[1] - V2[4] * P1[2] - V2[5] * P1[3]); 
  denom = COUP/(pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) - pow(P1[3], 2) -
      M1 * (M1 - cI * W1));
  V1[2] = denom * (OM1 * P1[0] * TMP9 * (+cI * (TMP24 + TMP25)) - V2[2] * (+cI
      * (TMP24 + TMP25)));
  V1[3] = denom * (OM1 * P1[1] * TMP9 * (+cI * (TMP24 + TMP25)) - V2[3] * (+cI
      * (TMP24 + TMP25)));
  V1[4] = denom * (OM1 * P1[2] * TMP9 * (+cI * (TMP24 + TMP25)) - V2[4] * (+cI
      * (TMP24 + TMP25)));
  V1[5] = denom * (OM1 * P1[3] * TMP9 * (+cI * (TMP24 + TMP25)) - V2[5] * (+cI
      * (TMP24 + TMP25)));
}


}  // end namespace $(namespace)s_HZZ_Unitar

